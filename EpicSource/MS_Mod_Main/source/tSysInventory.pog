/** /file

   Keeps a system by system account of the players inventory. This allows long haul contracts without being too 
   annoying for the player who just wants to outfit his ship with some weapons.
   
   This is really not valuable until the a loadout system is coded. 

*/
package tSysInventory;

uses iShip, Global, Object, Sim, Input, iMapEntity, Math, iAI, Task, 
   Debug, iFaction, iSim, iFactionScript, iComms, INIFile, iUtilities, iPilotSetup,
   Group, Text, iEmail, State, iTrafficCreation, iRangeCheck,iRemotePilot, iRegion, iMissionTracker, iWingmen,
   iCargo, iCargoScript, iShipCreation, iHUD, iScriptedOrders, iStation, iStartSystem, iObjectives, iMultiplay, iCutsceneUtilities,
   iDirector, iEscort, iLagrangePoint, iMusic, iGame, Stream, iBackToBase, iDeathScript, iInventory;



provides SystemEnter,
         SystemExit;



/**
   System enter is called when the player leaves base or jumps to a new system.
   
   When the player jumps to a new system we need to save the old systems inventory
   for when the player returns.
   
   Then we check if the player left some inventory behind here.
   
*/
SystemEnter()
{
   string system = iMapEntity.SystemName();
   string prior_system;
   string save_name;
   int i, total, pod, items;

   //Check if there was a last system, and if it changed.

   if (Global.Exists("g_trout_sys_inv_last_sys")){
      prior_system = Global.String("g_trout_sys_inv_last_sys");
      if (system != prior_system) {

         total = iInventory.NumberOfCargoTypes();
         for (pod=0;pod<total;++pod) {
//            items = iInventory.NumberOfCargoType( iCargo.Type(pod) );
            items = iInventory.QuantityOfNthTypeInInventory( pod );
            iInventory.Remove(pod, items);
            Global.CreateInt(String.FormatStrStr("g_trout_sys_inv_%s%s",prior_system,String.FormatInt("%d",pod)), 
                             GA_Write, items);
         }

         // Remember we saved some stuff in this system.
         Global.CreateBool(String.FormatStrStr("g_trout_sys_inv_save_%s%s",prior_system,""),GA_Write,true);

         // Check if the new system had some stuff left behind.
         if (Global.Exists(String.FormatStrStr("g_trout_sys_inv_save_%s%s",system,""))) {

            total = iInventory.NumberOfCargoTypes();
            for (pod=0;pod<total;++pod) {
               items = Global.Int(String.FormatStrStr("g_trout_sys_inv_%s%s",system,String.FormatInt("%d",pod)));
               iInventory.AddWithoutMarkingNew(pod, items);
            }
         }

      }
   }
}

/**
   System exit is called when the player enters base or jumps to a new system.
   
   In either case, we need to remember what system we just left. If the 
   player did jump systems, then system enter will discover this 
   by looking at the last system global.

*/
SystemExit()
{
   string system = iMapEntity.SystemName();

   Global.CreateString("g_trout_sys_inv_last_sys",GA_Write,system);
}



/* 
THIS MOD IS NOT MADE, DISTRIBUTED, OR SUPPORTED BY INFOGRAMES
OR PARTICLE SYSTEMS LTD. 

ELEMENTS TM & (C) INFOGRAMES AND PARTICLE SYSTEMS LTD.
*/
