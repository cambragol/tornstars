//*******************************************************************************************/
//
// tsStarSystemSetup
//
// This module does system setup tasks when a player arrives in a new system.
// 
// 
//
// May 2005, Jon Freise
//******************************************************************************************/

package tsStarSystemSetup;

// Imports
uses  Sim,
      iShip,
      iSim,
      Debug,
      Global,
      GUI,
      iGame,
      iGUI,
      iHUD,
      iHabitat,
      iMapEntity,
      iLagrangePoint,
      iFaction,
      INIFile,
      Input,
      List,
      Object,
      String,
      Task,
      State,
      Text,
      iUtilities,
      iCargo,
      iInventory,
      iComms,
      Math,
      iPilotSetup,
      iMusic,
      iMod,
      iShipCreation,
      iDockport,
      iRegion,
      tsFaction,
      tsStationEnum,
      tsStation,
      tsLProduction,
      tsCapsuleJump;



// Exports
provides Government,
         SetGovernment,
         FindGovernment,
         IsKnown,
         SetKnown,
         UpdateSystem,
         DebugInfo;


// Prototypes
prototype FindGovernment();

prototype bool IsKnown(string system);

prototype SetKnown(string system, bool known);


// Update system is called when the player enters a system.
// It sets up any information that is needed for system operation.
//[of]:UpdateSystem()
UpdateSystem()
{
   list station_list;
   hhabitat station;
   int i, total;
   string system = iSim.ActiveWorld();
   hregion region;

   FindGovernment();

   if (!tsCapsuleJump.IsCapsuleSpace(system)) {
      SetKnown(system, true);
   }


   // Setup the traffic control fields around all the active stations.
   station_list = List.FromSet(iMapEntity.SystemHabitats());
   total = List.ItemCount(station_list);

   for (i=0;i<total;++i) {
      station = iHabitat.Cast(List.GetNth(station_list,i));

      // If this is an active station,
      // and the right type, 
      // put an Traffic Control field around it.
      if (ESS_Normal == tsStation.Status(station)) {
         if (ESC_Mine != tsStation.Category(station)) {

            region = iRegion.CreateTrafficControl(station, 10km, 500);
         }
      }
   }
}
//[cf]


// Returns the government of the active system.
//[of]:hfaction Government()
hfaction Government()
{
   return iFaction.Cast(Global.Handle("gt_esyssetup_system_gov"));
}
//[cf]


//Sets the government of the active system.
//[of]:SetGovernment(hfaction government_faction)
SetGovernment(hfaction government_faction)
{
   if (Global.Exists("gt_esyssetup_system_gov")) {
      Global.SetHandle("gt_esyssetup_system_gov", government_faction);
   }else{
      Global.CreateHandle("gt_esyssetup_system_gov",GA_Write|GA_NoSave, government_faction);
   }
}
//[cf]


// Find government looks through the system and finds the government stations.
// The first government station found wins.
//[of]:FindGovernment()
FindGovernment()
{
   list station_list;
   int i, total, station_type;
   hhabitat station;
   hfaction gov_faction;


   station_list = List.FromSet(iMapEntity.SystemHabitats());

   total = List.ItemCount(station_list);
   for (i=0;i<total;++i) {
      station = iHabitat.Cast(List.GetNth(station_list, i));

      station_type = tsLProduction.GetType(iSim.Cast(station));

      switch (station_type) {
      case ept_Outpost:
      case ept_RegionalDepartment:
      case ept_SystemAdministration:
      case ept_ClusterAdministration:

         gov_faction = iSim.Faction(station);
         SetGovernment(gov_faction);
         return;
         break;
      default:
         break;
      }
   }

   SetGovernment(tsFaction.EmptyFaction());
}
//[cf]


// Returns a boolean of if the system is known
//[of]:bool IsKnown(string system)
bool IsKnown(string system)
{
   return Global.Bool(String.Join("gt_eknown",system));
}
//[cf]


// Sets a system as known
//[of]:SetKnown(string system, bool known)
SetKnown(string system, bool known)
{
   string name = String.Join("gt_eknown",system);

   if (Global.Exists(name)) {
      Global.SetBool(name, known);
   }else {
      Global.CreateBool(name,GA_Write,known);
   }
}
//[cf]


DebugInfo()
{
   debug {
      Debug.PrintHandle(Government());
      Debug.PrintString("\n");
      Debug.PrintString("System Government\n");
      Debug.PrintString("\n");

   }
}

/*  
THIS MOD IS NOT MADE, DISTRIBUTED, OR SUPPORTED BY INFOGRAMES
OR PARTICLE SYSTEMS LTD. 

ELEMENTS TM & (C) INFOGRAMES AND PARTICLE SYSTEMS LTD.
*/
