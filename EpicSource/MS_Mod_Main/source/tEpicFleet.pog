//*******************************************************************************************/
//
// tEpicFleet.pog
//
// 
//
// Jan 2003, Jon Freise
//

// There are a few main entry points for player wingmen
// HireShip is used when the player hires a wingman for service. 
// CaptureShip is used when the player siezes a ship.
// SetupPlayerWingman is used in the general case of purchasing a ship (not a standard feature).
// and is used to restore the wingmen after load.
//
// There are a few main entry points for the player.
// PlayerDeath is the death script that handles the players ship being destroyed.
// SetupPlayer is used during restore to attach all proper items to the player ship.
// NewPlayerShip is used when the player purchases a ship, via menu. It will 
// setup that ship properly, and change the inventory to match the ship.
//******************************************************************************************/

package tEpicFleet;

uses    Sim,
        iShip,
        iSim,
        iPilotSetup,
        Debug,
        Global,
        GUI,
        iDirector,
        iGUI,
        iHUD,
        iHabitat,
        iMapEntity,
        INIFile,
        Input,
        List,
        Object,
        String,
        Task,
        Text,
        iUtilities,
        iCargo,
        iInventory,
        iComms,
        iAi,
        iWingmen,
        iRemotePilot,
        iDeathScript,
        iGame,
        Math,
        iInventory,
        iConversation,
        CargoTypes,
   
        tStationEnum,
        tEconUtil,
        tPodUtil,
        tEpicComms,
        tFormation,
        tEFaction, 
   tMegaTrucking;




provides NewGame,
        NewGameTest,
        StartSession,
        IsPlayerFleetShip,
        IdNumber,

        Marines,
        SetMarines,

        Fuel,
        SetFuel,

        FuelMax,
        SetFuelMax,

        FuelPerJump,
        SetFuelPerJump,

        DailyFuel,
        SetDailyFuel,

        DailyUpkeep,
        SetDailyUpkeep,
        
        World,
        SetWorld,

        PlayerFleet,
        IsCaptured,
        ShipPodList,

        SaveFleet,
        RestoreFleet,

        RemoveShip,
        SetupPlayerWingman,
        NewPlayerShip,

        GroupRemoveShip,
        GroupMoveShip,
        ReturnGroup,
        GroupNumber,
        SetGroupNumber,

        PlayerDeath,
        WingmanDeath,
        WingmanComms,

        HireShip,
        CaptureShip,
        FireShip,

        RunCheck,
        CreateTestShip,
        CreateTargets,
        DisruptShip;



        
enum eefOwnership {
   efoOwned,
   efoHired,
   efoCaptured
};



prototype NewGame(string player_ship_template, string system, string location, string name);

prototype NewGameTest();


prototype SaveFleet();

prototype int IdNumber(hship ship);

prototype int next_id_number();

prototype add_ship_to_list(hship ship);

prototype remove_ship_from_list(hship ship);

prototype set_id_number(hship ship, int id);

prototype location_by_sim(hsim sim, hsim relsim);   

prototype hsim Nearest(hsim location, list items);

prototype save_cargo_pods(hship ship, int ship_id);

prototype restore_cargo_pods(hship ship, int ship_id);


prototype hship find_ship(int id_number);

prototype int docked_ship(hship wingman);

prototype restore_docks();



prototype SetupPlayerWingman(hship ship, int id, int group, eefOwnership owner, string world);

prototype SetupPlayer(hship ship, int id);



// Player order group related prototypes

prototype bool GroupRemoveShip(hsim ship);

prototype bool GroupMoveShip(hsim ship, int group);

prototype int GroupNumber (hsim ship);

prototype SetGroupNumber(hsim ship, int group);

prototype group_add_ship(hsim ship, int group);

prototype group_remove_ship(hsim ship, int group);


// Helper functions

prototype task delayed_sim_destroy(hisim ship);

prototype release_wingman(hship ship);

prototype task wingman_watch(hship wingman);

prototype read_ship_upkeep(hship ship);


prototype reset_position();

prototype set_position(hship ship);


// Save loose cargo functions
prototype set locate_free_pods();

prototype restore_pod_list();
prototype hship restore_cargo_pod(int pod_id);

prototype int save_cargo_pod(hship cargo_pod);
prototype save_pod_list(list cargo_pods);


// Reading INI defaults
prototype float default_max_fuel(int ship_type);
prototype float default_daily_fuel(int ship_type);
prototype float default_jump_fuel(int ship_type);
prototype int default_daily_cost(int ship_type);

prototype read_ini_file(hship ship);


int float2int(float number)
{
   return number;
}

float int2float(int number)
{
   return number;
}


RunCheck()
{
   Global.SetBool("g_zz_ug_passme",true);
}

//******************************************************************************************/

// Initialize the EpicFleet package. Setup the unique number counter.

//******************************************************************************************/
NewGame(string player_ship_template, string system, string location, string name)
{
   list empty_list;
   int save_id;

   debug Debug.PrintString("eFleet NewGame\n");

   Global.CreateInt("g_epic_fleet_id_count",GA_Write,500);
   Global.CreateInt("g_epic_fleet_total_save_num", GA_Write, 1);
   Global.CreateList("g_epic_fleet_player_list",GA_Write, empty_list);
   Global.CreateBool("g_epic_fleet_new_game",GA_Write, true);

   // Create the very first player ship

   save_id = 0;
   Global.CreateString(String.FormatInt("g_epic_fleet_ship_template_%d",save_id),GA_Write, player_ship_template);
   Global.CreateString(String.FormatInt("g_epic_fleet_ship_name_%d",save_id),GA_Write, "player_ship_name");
   // Set up unique player value for this very first ship
   Global.CreateInt(String.FormatInt("g_epic_fleet_ship_id_%d",save_id),GA_Write, 499);

   Global.CreateBool(String.FormatInt("g_epic_fleet_ship_dock_%d",save_id),GA_Write, false);

   // Save system, location and establish x, y, z positions.
   Global.CreateString(String.FormatInt("g_epic_fleet_ship_system_%d",save_id),GA_Write, system);
   Global.CreateString(String.FormatInt("g_epic_fleet_ship_ref_%d",save_id),GA_Write, location);
   Global.CreateFloat(String.FormatInt("g_epic_fleet_ship_x_%d",save_id),GA_Write, 10km);
   Global.CreateFloat(String.FormatInt("g_epic_fleet_ship_y_%d",save_id),GA_Write, 10km);
   Global.CreateFloat(String.FormatInt("g_epic_fleet_ship_z_%d",save_id),GA_Write, 10km);
 

   Global.CreateInt(String.FormatInt("g_epic_fleet_ship_marines_%d",save_id),GA_Write, 0);
   // Fuel set to some impossibly high number
   Global.CreateFloat(String.FormatInt("g_epic_fleet_ship_fuel_%d",save_id),GA_Write, 10000);
// Global.CreateInt(String.FormatInt("g_epic_fleet_ship_upkeep_%d",save_id),GA_Write, 50);
// Global.CreateInt(String.FormatInt("g_epic_fleet_ship_jump_%d",save_id),GA_Write, 100);


   //Global.CreateBool("g_epic_fleet_first_try",GA_Write,true);
   //iGame.MovePlayerBase(system);

   iGame.SetGameType(IGT_SinglePlayer);

   //iGame.StartNewGame(system,"iActOne.ActOneStart()");

   iGame.SetStartSystem(system);      

   // test to see if we can keep the objectives screen from crashing.
   Global.CreateInt("g_current_act", GA_Write,1);

   Global.CreateBool("gt_fleet_non_base_save",GA_Write, true);

}

NewGameTest()
{

   hinifile player_config = INIFile.Create("ini:/player_start");

   string ship, system, station, name;


   ship = INIFile.String(player_config, "Player","start_ship","ini:/sims/ships/player/fast_attack_prefitted");
   system = INIFile.String(player_config, "Player","start_system","map:/geog/middle/emerald_sys");
   station = INIFile.String(player_config, "Player","start_station","Emerald STC");
   name = INIFile.String(player_config, "Player","start_name","Jon's Revenge");

   INIFile.Destroy(player_config);

   NewGame(ship, system,station, name);
}


StartSession()
{
	Input.BindKey( "tEpicFleet.CreateTestShip", "AnySection.CallShiftFun" );  
	Input.BindKey( "tEpicFleet.ChangeShip", "tEpicFleet.ChangeShip" );  

   Input.BindKey( "tPodUtil.TogglePodTag", "icPlayerPilot.SubTarget" );  

}

// Hands out the next unique ship id.
int next_id_number()
{
   int id;

   atomic {
      id = Global.Int("g_epic_fleet_id_count");
      ++id;
      Global.SetInt("g_epic_fleet_id_count",id);
   }
   return id;
}

int IdNumber(hship ship)
{
   return Object.IntProperty(ship,"EpicFleetIdNum");
}

set_id_number(hship ship, int id)
{
   Object.AddIntProperty(ship,"EpicFleetIdNum",id);
}


SetMarines(hship ship, int marines)
{
   if (Object.PropertyExists(ship, "EpicFleetMarines")) {
      Object.SetIntProperty(ship, "EpicFleetMarines",marines);
   }else{
      Object.AddIntProperty(ship, "EpicFleetMarines",marines);
   }
}

int Marines(hship ship)
{
   return Object.IntProperty(ship,"EpicFleetMarines");
}



// This is the maximum level of fuel that
// can be loaded into the ship.
SetFuelMax(hship ship, float fuel_maximum)
{
   if (Object.PropertyExists(ship, "max_fuel")) {
      Object.SetFloatProperty(ship, "max_fuel", fuel_maximum);
   }else{
      Object.AddFloatProperty(ship, "max_fuel", fuel_maximum);
   }
}

float FuelMax(hship ship)
{
   return Object.FloatProperty(ship, "max_fuel");
}



// This is the current level of fuel in the ship. Zero
// is the lowest and max_fuel is the highest value.
// When this number hits zero, the ship cannot move
// or fight.
SetFuel(hship ship, float fuel_used)
{
   // Clip current fuel supply to the ships limits.
   if (fuel_used < 0.0)
   {
      fuel_used = 0.0;
   }else if (fuel_used > FuelMax(ship))
   {
      fuel_used = FuelMax(ship);
   }

   if (Object.PropertyExists(ship, "fuel")) {
      Object.SetFloatProperty(ship, "fuel", fuel_used);
   }else{
      Object.AddFloatProperty(ship, "fuel", fuel_used);
   }
}

float Fuel(hship ship)
{
   return Object.FloatProperty(ship, "fuel");
}




// This is the amount of fuel the ship uses to make one capsule jump.
SetFuelPerJump(hship ship, float fuel_per_jump)
{
   if (Object.PropertyExists(ship, "jump_fuel")) {
      Object.SetFloatProperty(ship, "jump_fuel", fuel_per_jump);
   }else{
      Object.AddFloatProperty(ship, "jump_fuel", fuel_per_jump);
   }
}

float FuelPerJump(hship ship)
{
   return Object.FloatProperty(ship, "jump_fuel");
}



// This is the amount of fuel a ship burns for reactor power and
// using thrusters to move around.
SetDailyFuel(hship ship, float fuel_amount)
{
   if (Object.PropertyExists(ship, "daily_fuel")) {
      Object.SetFloatProperty(ship, "daily_fuel", fuel_amount);
   }else{
      Object.AddFloatProperty(ship, "daily_fuel", fuel_amount);
   }
}

float DailyFuel(hship ship)
{
   return Object.FloatProperty(ship, "daily_fuel");
}



// This is the cost in credits of operating a ship for one day.
// The credit cost pays for ship upkeep, standard expenses, and crew.
// Fuel is not included.
SetDailyUpkeep(hship ship, int daily_cost)
{
   if (Object.PropertyExists(ship, "daily_cost")) {
      Object.SetIntProperty(ship, "daily_cost", daily_cost);
   }else{
      Object.AddIntProperty(ship, "daily_cost", daily_cost);
   }
}

int DailyUpkeep(hship ship)
{
   return Object.IntProperty(ship, "daily_cost");
}


SetWorld(hship ship, string world)
{
   if (Object.PropertyExists(ship, "EpicFleetWorld")) {
      Object.SetStringProperty(ship, "EpicFleetWorld", world);
   }else{
      Object.AddStringProperty(ship, "EpicFleetWorld", world);
   }
}

string World(hship ship)
{
   return Object.StringProperty(ship, "EpicFleetWorld");
}


//******************************************************************************************/
// Add a new ship sim to the player fleet.
// Create new id.
// Add to fleet list for save.
//******************************************************************************************/

int AddNewShip(hship ship)
{
   int id = next_id_number();

   add_ship_to_list(ship);

   set_id_number(ship, id);
   
   // Attach a deathscript to autoremove this ship if it dies... 
   // actually, it should get cleaned out at the next save...
   // let see what happens.

   return id;
}


add_ship_to_list(hship ship)
{
   list fleet;
    
   atomic {
      fleet = Global.List("g_epic_fleet_player_list");

      if (none != ship ) {
         if (!List.Contains(fleet, ship)) {
            List.AddTail(fleet,ship);
            Global.SetList("g_epic_fleet_player_list",fleet);
         }
      }
   }
}

remove_ship_from_list(hship ship)
{
   list fleet;
    
   atomic {
      fleet = Global.List("g_epic_fleet_player_list");

      if (none != ship ) {
         List.Remove(fleet,ship);
         Global.SetList("g_epic_fleet_player_list",fleet);
      }
   }   
}


// Use to signal that the last save will not need to recreate the player ship.
// Instead, the player ship will be available.
SetBaseSave(bool entered_base)
{
   Global.CreateBool("gt_epic_fleet_player_base_save", GA_Write, entered_base);
}

eefOwnership Ownership(hship ship)
{
   return Object.IntProperty(ship,"gt_epic_fleet_ownership");
}

SetOwnership(hship ship, eefOwnership owner)
{
   if (Object.PropertyExists(ship,"gt_epic_fleet_ownership")) {
      Object.SetIntProperty(ship, "gt_epic_fleet_ownership", owner);
   }else {
      Object.AddIntProperty(ship,"gt_epic_fleet_ownership",owner);
   }
}

list PlayerFleet()
{
   return Global.List("g_epic_fleet_player_list");
}


// Reset the formation positions. Done when the fleet is restored.

reset_position()
{
   Global.CreateInt("gt_efleet_pos_counter",GA_Write|GA_NoSave, 0);
}


// Place the ship at the proper formation position. 
// All wingman commands will use this position to keep
// the wingmen from collision.

set_position(hship ship)
{
   int counter, spacing; 
   float x, y, z;

   counter = Global.Int("gt_efleet_pos_counter");
   Global.SetInt("gt_efleet_pos_counter", counter+1);

   // The distance behind increases by half a kilometer
   // for every four ships.
   z = (int2float(counter)/4);
   z = z + 1.0;
   z = z * 0.5km;
   z = z * -1.0;

   spacing = counter % 8;

   switch (spacing) {
   case 0:
      // above
      x = 0.0;
      y = 0.5km;
      break;
   case 1:
      // left
      x = 0.5km;
      y = 0.0;
      break;
   case 2:
      // below
      x = 0.0;
      y = -0.5km;
      break;
   case 3:
      // right
      x = -0.5km;
      y = 0.0;
      break;
   case 4:
      // above far
      x = 0.0;
      y = 1.0km;
      break;
   case 5:
      // left far
      x = 1.0km;
      y = 0.0;
      break;
   case 6:
      // below far
      x = 0.0;
      y = -1.0km;
      break;
   case 7:
      // left far
      x = -1.0km;
      y = 0.0;
      break;
   default:
      // Straight back
      x = 0.0;
      y = 0.0;
      break;
   }

   tFormation.SetPos(ship, x, y, z);
}


//******************************************************************************************/
// Save the players fleet into a global array.
// Do not destroy the fleet. Let the game cull normally.
// Weed out all null ship entries.
   
//******************************************************************************************/

SaveFleet()
{
   list fleet;
   hship ship, player;
   int count, i, save_id, ship_id;
   hsim reference;
   string system, template_name;
   bool docked;
   debug Debug.PrintString("eFleet Saving\n");
   fleet = Global.List("g_epic_fleet_player_list");

   player = iShip.FindPlayerShip();

   

   // Make sure the player ship (where ever he is) is first in list
   List.Remove(fleet, player);
   List.AddHead(fleet,player);

   count = List.ItemCount(fleet);
   save_id = 0;

   for (i=0;i<count;++i) {
      ship = iShip.Cast(List.GetNth(fleet,i));

      if (none != ship) {

         // Handle the odd case where the player ship has no valid template.
         Global.CreateString(String.FormatInt("g_epic_fleet_ship_template_%d",save_id),GA_Write, Sim.TemplateName(ship));
         Global.CreateString(String.FormatInt("g_epic_fleet_ship_name_%d",save_id),GA_Write, Sim.Name(ship));

         Global.CreateInt(String.FormatInt("g_epic_fleet_ship_id_%d",save_id),GA_Write, IdNumber(ship));

         Global.CreateInt(String.FormatInt("g_epic_fleet_ship_marines_%d",save_id),GA_Write, Marines(ship));

         Global.CreateFloat(String.FormatInt("g_epic_fleet_ship_fuel_%d",save_id),GA_Write, Fuel(ship));

//         Global.CreateInt(String.FormatInt("g_epic_fleet_ship_upkeep_%d",save_id),GA_Write, DailyUpkeep(ship));

//         Global.CreateInt(String.FormatInt("g_epic_fleet_ship_jump_%d",save_id),GA_Write, FuelPerJump(ship));

         Global.CreateString(String.FormatInt("g_epic_fleet_ship_world_%d",save_id),GA_Write, World(ship));         

         // Save any cargo pods.
         save_cargo_pods(ship, i);

         // Find the ships current location.
         system = iSim.WorldName(ship);
         if (0==i) {
            // if this is the player, remember where we need to begin.
            iGame.SetStartSystem(system);      
         }

         reference = Nearest(ship, List.FromSet(iMapEntity.SystemHabitatsInSystem(system)));
         
         docked = iSim.IsDockedToStructure(iSim.Cast(ship), iSim.Cast(reference));
         Global.CreateBool(String.FormatInt("g_epic_fleet_ship_dock_%d",save_id),GA_Write, docked);         

         // Save the id of any ship we are docked to.
         Global.CreateInt(String.FormatInt("g_epic_fleet_ship_linked_%d",save_id),GA_Write, docked_ship(ship));


         debug {
            Debug.PrintString("Saving: ");
            Debug.PrintHandle(ship);
            Debug.PrintString(" ");
            Debug.PrintHandle(reference);
            Debug.PrintString(" ");
            Debug.PrintString(system);
            Debug.PrintString("\n");
         }

//         reference = iMapEntity.SystemCentre();
         location_by_sim(ship, Sim.Cast(reference));



         // Save system, x, y, z positions.
         Global.CreateString(String.FormatInt("g_epic_fleet_ship_system_%d",save_id),GA_Write, system);
         Global.CreateString(String.FormatInt("g_epic_fleet_ship_ref_%d",save_id),GA_Write, Sim.Name(reference));
         Global.CreateFloat(String.FormatInt("g_epic_fleet_ship_x_%d",save_id),GA_Write, Object.VectorPropertyX(ship,"EpicFleetLoc"));
         Global.CreateFloat(String.FormatInt("g_epic_fleet_ship_y_%d",save_id),GA_Write, Object.VectorPropertyY(ship,"EpicFleetLoc"));
         Global.CreateFloat(String.FormatInt("g_epic_fleet_ship_z_%d",save_id),GA_Write, Object.VectorPropertyZ(ship,"EpicFleetLoc"));



         // Save the damage state.

         // Save the loadout state.

         // Save order group.
         Global.CreateInt(String.FormatInt("g_epic_fleet_ship_group_%d",save_id),GA_Write, GroupNumber(ship));


         Global.CreateInt(String.FormatInt("g_epic_fleet_ship_ownership_%d",save_id),GA_Write, Ownership(ship));
         // Save orders.

         // Increment for next ship.
         ++save_id;
      }
   }

   Global.CreateInt("g_epic_fleet_total_save_num", GA_Write, save_id);


   // Save the loose cargo pods that are near player wingmen.
   save_pod_list(List.FromSet(locate_free_pods()));
}




//******************************************************************************************/
//   Restores the player fleet from global array. Then erase the global array.

//******************************************************************************************/

RestoreFleet()
{
   list fleet, empty_list;
   hship ship, player;
   int count, i, ship_id, group_num, ownership, marines;
   float fuel_used, max_fuel;
   string ship_template, ship_name, system, world;
   float x, y, z;
   hfaction player_faction = iFaction.Find("Player");
   bool docked;
   int linked;
   hsim reference, reference2, light;
   hgroup combat_group = Group.Create();

   debug Debug.PrintString("eFleet Restoring\n");

   // Save away the players combat ships
   Global.CreateHandle("gt_epic_fleet_combat_group",GA_Write|GA_NoSave, combat_group);
   

   reset_position();

   // Create all the player order groups.
   for (i=0;i<10;++i) {
      Global.CreateList(String.FormatInt("g_epic_fleet_group_%d",i),GA_Write|GA_NoSave, empty_list);
   }

   // Create the list player ships will be added to.
   Global.CreateList("g_epic_fleet_player_list", GA_Write, fleet);



   count = Global.Int("g_epic_fleet_total_save_num");
   Global.SetInt("g_epic_fleet_total_save_num",0);

   debug Debug.PrintString(String.FormatInt("Restoring %d ships\n",count));

   for (i=0;i<count;++i) {

      // Restore the ship sim
      ship_template = Global.String(String.FormatInt("g_epic_fleet_ship_template_%d",i));
      ship_name = Global.String(String.FormatInt("g_epic_fleet_ship_name_%d",i));

      Global.Destroy(String.FormatInt("g_epic_fleet_ship_template_%d",i));
      Global.Destroy(String.FormatInt("g_epic_fleet_ship_name_%d",i));

      ship = iShip.Create(ship_template, ship_name);

      iSim.SetFaction(ship,iFaction.Find("Player"));
      Sim.SetCullable(ship, false);

      // Restore the ships id number
      ship_id = Global.Int(String.FormatInt("g_epic_fleet_ship_id_%d",i));
      Global.Destroy(String.FormatInt("g_epic_fleet_ship_id_%d",i));

      ownership = Global.Int(String.FormatInt("g_epic_fleet_ship_ownership_%d",i));
      Global.Destroy(String.FormatInt("g_epic_fleet_ship_ownership_%d",i));

      group_num = Global.Int(String.FormatInt("g_epic_fleet_ship_group_%d",i));
      Global.Destroy(String.FormatInt("g_epic_fleet_ship_group_%d",i));

      marines = Global.Int(String.FormatInt("g_epic_fleet_ship_marines_%d",i));
      Global.Destroy(String.FormatInt("g_epic_fleet_ship_marines_%d",i));

      fuel_used = Global.Float(String.FormatInt("g_epic_fleet_ship_fuel_%d",i));
      Global.Destroy(String.FormatInt("g_epic_fleet_ship_fuel_%d",i));

      linked = Global.Int(String.FormatInt("g_epic_fleet_ship_linked_%d",i));
      Global.Destroy(String.FormatInt("g_epic_fleet_ship_linked_%d",i));


//    upkeep = Global.Int(String.FormatInt("g_epic_fleet_ship_upkeep_%d",i));
//    Global.Destroy(String.FormatInt("g_epic_fleet_ship_upkeep_%d",i));

//    fuel_per_jump = Global.Int(String.FormatInt("g_epic_fleet_ship_jump_%d",i));
//    Global.Destroy(String.FormatInt("g_epic_fleet_ship_jump_%d",i));


      world = Global.String(String.FormatInt("g_epic_fleet_ship_world_%d",i));
      Global.Destroy(String.FormatInt("g_epic_fleet_ship_world_%d",i));

      // Find the real player ship. Two are created if the player has exited the 
      // base.
      if (0 == i) {
         // First ship is always the player.
         player = iShip.FindPlayerShip();

         if (none == player) {
            iShip.InstallPlayerPilot(ship);
         }else {
            // Player already exists, he must have used the base
            // launch. Get rid of the template ship
            // and put the player in the correct location.
            Sim.Destroy(ship);
            remove_ship_from_list(ship);
            ship = player;
         }

         SetupPlayer(ship, ship_id);
         
         // The player always uses default values for the ship type.
         // This will be true until we replace the old loadout system
         // with a new loadout system.
         //read_ship_upkeep(ship);

         iUtilities.RenameSim(ship, "player_ship_name");

      } else {
         // This is a player wingman. set the properties
         //read_ini_file(ship);

         SetupPlayerWingman(ship, ship_id, group_num, ownership, world);

//         SetFuelPerJump(ship, fuel_per_jump);
//         SetDailyUpkeep(ship, upkeep);
      }

      Object.AddIntProperty(ship,"gt_ef_linked", linked);

      // Restore properties 
      SetMarines(ship, marines);

      max_fuel = FuelMax(ship);
      if (fuel_used > max_fuel)
      {
         fuel_used = max_fuel;
      }

      if (fuel_used < 0.0)
      {
         fuel_used = 0.0;
      }

      SetFuel(ship, fuel_used);


      // Restore cargo
      restore_cargo_pods(ship, i);

      // Restore ship to proper location
      system = Global.String(String.FormatInt("g_epic_fleet_ship_system_%d",i));
      reference = Sim.Cast(iSim.FindByNameInSystem(Global.String(String.FormatInt("g_epic_fleet_ship_ref_%d",i)),system));

      x = Global.Float(String.FormatInt("g_epic_fleet_ship_x_%d",i));
      y = Global.Float(String.FormatInt("g_epic_fleet_ship_y_%d",i));
      z = Global.Float(String.FormatInt("g_epic_fleet_ship_z_%d",i));

      debug {
         if (none == reference) {
            Debug.PrintString("EpicFleet: Station missing, ");
            Debug.PrintString(Global.String(String.FormatInt("g_epic_fleet_ship_ref_%d",i)));
            Debug.PrintString("\n");
            Debug.PrintString(system);
            Debug.PrintString("\n");
         }
      }

      Global.Destroy(String.FormatInt("g_epic_fleet_ship_system_%d",i));
      Global.Destroy(String.FormatInt("g_epic_fleet_ship_ref_%d",i));
      Global.Destroy(String.FormatInt("g_epic_fleet_ship_x_%d",i));      
      Global.Destroy(String.FormatInt("g_epic_fleet_ship_y_%d",i));
      Global.Destroy(String.FormatInt("g_epic_fleet_ship_z_%d",i));

      Sim.PlaceRelativeTo(ship, reference, x, y, z);

      // Check if the ship was docked and restore it to proper location.
      docked = Global.Bool(String.FormatInt("g_epic_fleet_ship_dock_%d",i));
      Global.Destroy(String.FormatInt("g_epic_fleet_ship_dock_%d",i));

      if (docked){
         iSim.Dock(ship, iSim.Cast(reference));

         // Lock down wingman only
         if (i != 0) {
            iSim.SetDockingLock(ship, iSim.Cast(reference), true);
         }
      }



      // Restore damage
      // Restore loadout

      debug{
          Debug.PrintString("Restoring ");
          Debug.PrintHandle(ship);
          Debug.PrintString("\n");

          Debug.PrintString(system);
          Debug.PrintString("\n");
          
          Debug.PrintHandle(reference);
          Debug.PrintString("\n");
      }
   }

   restore_docks();

   restore_pod_list();
}

// Returns the id number of the wingman to which this ship
// is docked, if this ship is docked.
int docked_ship(hship wingman)
{
   list fleet = PlayerFleet();
   int i, total;
   hship ship;

   List.Remove(fleet, wingman);
   total = List.ItemCount(fleet);

   for (i=0;i<total;++i) {
      ship = iShip.Cast(List.GetNth(fleet,i));

      if (iSim.IsDockedTo(wingman, ship)) {
         return IdNumber(ship);
      }
   }

   return 0;
}

// Runs through the list of player wingmen and relinks together those
// that were docked.
restore_docks()
{
   list fleet = PlayerFleet();
   int i,j, total, link_id;
   hship ship, ship2;

   total = List.ItemCount(fleet);

   for (i=0;i<total;++i) {
      ship = iShip.Cast(List.GetNth(fleet,i));

      link_id = Object.IntProperty(ship,"gt_ef_linked");

      if (link_id != 0) {
         // We are connected to a ship, find it.
         ship2 = find_ship(link_id);
         
         if (none != ship2) {
            iSim.Dock(ship, ship2);
         }
      }
   }
}



hship find_ship(int id_number)
{
   list fleet = PlayerFleet();
   int i, total;
   hship ship;

   total = List.ItemCount(fleet);

   for (i=0;i<total;++i) {
      ship = iShip.Cast(List.GetNth(fleet,i));

      if (IdNumber(ship) == id_number) {
         return ship;
      }
   }

   return none;
}



/*
read_ship_upkeep(hship ship)
{
   hinifile upkeep_file = INIFile.Create("ini:/upkeep");
   int daily_cost;
   float fuel_per_jump;
   string ship_type;

   if (none == upkeep_file) {
      debug Debug.PrintString("ERROR: tEpicFleet upkeep file missing\n");
      return;
   }

   ship_type = tEconUtil.ShipType2String(iSim.Type(ship));

   fuel_per_jump = INIFile.Int(upkeep_file,ship_type,"fuel_per_jump",0);
   daily_cost = INIFile.Int(upkeep_file,ship_type,"daily_upkeep",0);
   
   SetFuelPerJump(ship, fuel_per_jump);
   SetDailyUpkeep(ship, daily_cost);

   INIFile.Destroy(upkeep_file);
}
*/

//******************************************************************************************/

//******************************************************************************************/

RemoveShip(hship ship)
{
   hgroup combat_group;

   combat_group = Sim.Group(ship);
   if (none != combat_group) {
      Group.RemoveSim(combat_group, ship);
   }

   remove_ship_from_list(ship);
}


bool IsPlayerFleetShip(hsim ship)
{
   list fleet = Global.List("g_epic_fleet_player_list");

   if (List.Contains(fleet, ship)) {
      return true;
   }
   return false;
}

//******************************************************************************************/
// Remove the ship. Only use this command when removing a ship forever, such
// as selling a ship or destroying one. Otherwise move the ship to 
// group 0 using the move ship function.

//******************************************************************************************/

bool GroupRemoveShip(hsim ship)
{
   int group = GroupNumber(ship);

   if ((group > 9) || (group<0)) {
      debug Debug.PrintString("EpicFleet Move Ship bad group\n");
   }else {
      group_remove_ship(ship, group);
   }

   SetGroupNumber(ship, 0);

   return true;
}

// Use this function to 'remove a ship' from a group. This is the 
// default ship location. All player ships must be in a group.

bool GroupMoveShip(hsim ship, int group)
{
   int old_group = GroupNumber(ship);

   if ((group > 9) || (group<0)) {
      debug Debug.PrintString("EpicFleet Move Ship bad group\n");
      return false;
   }

   if (!IsPlayerFleetShip(ship)){
      debug Debug.PrintString("EpicFleet Move Ship not player ship\n");
      return false;
   }

   group_remove_ship(ship, old_group);

   group_add_ship(ship, group);

   SetGroupNumber(ship, group);

   return true;
}

int GroupNumber(hsim ship)
{
   if (Object.PropertyExists(ship, "EpicFleetOGroup")) {
      return Object.IntProperty(ship,"EpicFleetOGroup");
   }

   return 11;
}

SetGroupNumber(hsim ship, int group)
{
   if ((group > 9) || (group<0)) {
      debug Debug.PrintString("EpicFleet Set Ship bad group\n");
      group = 0;
   }

   if (Object.PropertyExists(ship,"EpicFleetOGroup")) {
      Object.SetIntProperty(ship,"EpicFleetOGroup", group);
   }else {
      Object.AddIntProperty(ship,"EpicFleetOGroup", group);
   }
}

group_remove_ship(hsim ship, int group)
{
   list fleet;
   string name;
    
   if ((group > 9) || (group<0)) {
      debug Debug.PrintString("EpicFleet Remove Ship bad group\n");
      return;
   }
   name = String.FormatInt("g_epic_fleet_group_%d",group);
    
   if (none == ship) {
      debug Debug.PrintString("EpicFleet Remove Ship is None\n");
      return;
   }

   debug {
      Debug.PrintHandle(ship);
      Debug.PrintString(String.FormatInt(" remove ship, group %d\n", group));
      Debug.PrintString(name);
      Debug.PrintString(" \n");
   }

   atomic {
      fleet = Global.List(name);
      List.Remove(fleet,ship);
      Global.SetList(name,fleet);
   }
}

group_add_ship(hsim ship, int group)
{
   list fleet;
   string name;
    
   if ((group > 9) || (group<0)) {
      debug Debug.PrintString("EpicFleet Add Ship bad group\n");
      return;
   }
   name = String.FormatInt("g_epic_fleet_group_%d",group);
    
   if (none == ship) {
      debug Debug.PrintString("EpicFleet Add Ship is None\n");
      return;
   }

   debug {
      Debug.PrintHandle(ship);
      Debug.PrintString(String.FormatInt(" add ship, group %d\n", group));
      Debug.PrintString(name);
      Debug.PrintString(" \n");
   }

   atomic {
      fleet = Global.List(name);
      List.AddTail(fleet,ship);
      Global.SetList(name,fleet);
   }
}

list ReturnGroup(int group)
{
   list fleet;
   string name;

   if ((group > 9) || (group<0)) {
      debug Debug.PrintString("EpicFleet Return group bad group\n");
      return fleet;
   }

   name = String.FormatInt("g_epic_fleet_group_%d",group);
   fleet = Global.List(name);

   debug {
      Debug.PrintString(String.FormatInt("Return Group %d \n",group));
      Debug.PrintString(String.FormatInt("Item Count %d\n",List.ItemCount(fleet)));
      Debug.PrintString(name);
      Debug.PrintString(" \n");
   }
   return fleet;
}


//******************************************************************************************/
// sim = sim to find coords of,  relsim = find coords reletive to;

//******************************************************************************************/
location_by_sim(hsim sim, hsim relsim)   
{
  hsim Pnt1 = Sim.Create("ini:/sims/nav/waypoint", "Triangulation Point 1");
  hsim Pnt2 = Sim.Create("ini:/sims/nav/waypoint", "Triangulation Point 2");
  hsim Pnt3 = Sim.Create("ini:/sims/nav/waypoint", "Triangulation Point 3");
  hsim marker;
  float PDist = Sim.DistanceBetweenCentres(sim, relsim);		//Distance away from center to place triangulation
  									//points.  Could be any number, but accuracy is proably
  									//best if it is similar to other distances
  float POrigDist;
  float Pnt1Dist;
  float Pnt2Dist;
  float Pnt3Dist;
  float temp;
  float simx;
  float simy;
  float simz;
  atomic					//Want to make sure that distances are calculated at the same time
  {
    Sim.PlaceRelativeTo(Pnt1, relsim, PDist, 0, 0);		//Place triangulation points
    Sim.PlaceRelativeTo(Pnt2, relsim, 0, PDist, 0);
    Sim.PlaceRelativeTo(Pnt3, relsim, 0, 0, PDist);
    POrigDist = Sim.DistanceBetweenCentres(sim, relsim);	//Find Distances
    Pnt1Dist = Sim.DistanceBetweenCentres(sim, Pnt1);
    Pnt2Dist = Sim.DistanceBetweenCentres(sim, Pnt2);
    Pnt3Dist = Sim.DistanceBetweenCentres(sim, Pnt3);
  }
  Sim.Destroy(Pnt1);			//Only needed points for distances
  Sim.Destroy(Pnt2);
  Sim.Destroy(Pnt3);

  //simx = (POrigDist * POrigDist - Pnt1Dist * Pnt1Dist + PDist * PDist) / (2 * PDist)	//Can't use because of expansion bug
  //simy = (POrigDist * POrigDist - Pnt2Dist * Pnt2Dist + PDist * PDist) / (2 * PDist)
  //simz = (POrigDist * POrigDist - Pnt2Dist * Pnt2Dist + PDist * PDist) / (2 * PDist)

  //Same as above, but separated out into multiple lines
  simx = POrigDist * POrigDist;

  temp = PDist * PDist;
  temp = temp + simx;

  simx = Pnt1Dist * Pnt1Dist;
  simx = temp - simx;
  simx = simx / 2;
  simx = simx / PDist;

  simy = Pnt2Dist * Pnt2Dist;
  simy = temp - simy;
  simy = simy / 2;
  simy = simy / PDist;

  simz = Pnt3Dist * Pnt3Dist;
  simz = temp - simz;
  simz = simz / 2;
  simz = simz / PDist;

  Object.AddVectorProperty(sim, "EpicFleetLoc", simx, simy, simz);
}


//******************************************************************************************/
// Find the nearest sim in the set of sims.

//******************************************************************************************/
/* 
Takes a list of sims, it returns the sim that is 
nearest to the location provided.

*/
hsim Nearest(hsim location, list items)
{
   float dist;
   hsim found, curr;
   int i, total;

   found = Sim.Cast(List.Head(items));
   dist = Sim.DistanceBetween( location, found);

   total = List.ItemCount(items);
   for (i=1;i<total;++i) {
      curr = Sim.Cast(List.GetNth(items, i));
      if (Sim.DistanceBetween( location, curr) < dist) {
         found = curr;
         dist = Sim.DistanceBetween( location, curr);
      }
   }
   return found;
}

// Returns all cargo pods docked to a ship.
list ShipPodList(hsim ship)
{
   set pods;
   list docked_pods;
   hsim child;

   // Search all subsims for cargo pods.
   
   pods = Sim.Children(ship);

   while (!Set.IsEmpty(pods)) {
      child = Sim.Cast(Set.FirstElement(pods));
      Set.Remove(pods, child);

      if (T_CargoPod == iSim.Type(child)) {
         List.AddTail(docked_pods, child);
      }
   }

   return docked_pods;
}


save_cargo_pods(hship ship, int ship_id)
{
   string faction, name;
   int pod_count, i, cargo_faction, cargo_type, hack_level;
   list pod_list;
   hsim pod;

   // Get a list of pods
   pod_list = ShipPodList(ship);

   // Save each pod with unique ship id
   pod_count = List.ItemCount(pod_list);
   for (i=0;i<pod_count;++i) {
      pod = Sim.Cast(List.GetNth(pod_list, i));

      cargo_type = Object.IntProperty(pod,"cargo");
      faction = iFaction.Name(iSim.Faction(iSim.Cast(pod)));
      cargo_faction = Object.IntProperty( pod, "cargo_faction" );   
      hack_level = Object.IntProperty( pod, "cargo_hack_level" );   

      // Save string looks like "name ship_id pod_num type_name"
      name = String.Join("g_epic_fleet_p",String.FormatInt("%d_",ship_id));
      name = String.Join(name, String.FormatInt("%d_",i));

      Global.CreateInt(String.Join(name,"cargo"),GA_Write, cargo_type);
      Global.CreateString(String.Join(name,"faction"),GA_Write, faction);
      Global.CreateInt(String.Join(name,"cargo_faction"),GA_Write, cargo_faction);
      Global.CreateInt(String.Join(name,"cargo_level"),GA_Write, hack_level);
   }

   Global.CreateInt(String.FormatInt("g_epic_fleet_%d_podtotal",ship_id),GA_Write, pod_count);
}


restore_cargo_pods(hship ship, int ship_id)
{

   string cargo_faction, name, faction;
   int pod_count, i, cargo_type, cargo_faction_id, hack_level;
   list pod_list;
   hisim pod;

   // restore each pod with unique ship id
   pod_count = Global.Int(String.FormatInt("g_epic_fleet_%d_podtotal",ship_id));
   Global.Destroy(String.FormatInt("g_epic_fleet_%d_podtotal",ship_id));

   for (i=0;i<pod_count;++i) {
      pod = iSim.Cast(List.GetNth(pod_list, i));

      // Save string looks like "name ship_id pod_num type_name"
      name = String.Join("g_epic_fleet_p",String.FormatInt("%d_",ship_id));
      name = String.Join(name, String.FormatInt("%d_",i));

      cargo_type = Global.Int(String.Join(name,"cargo"));
      Global.Destroy(String.Join(name,"cargo"));

      faction = Global.String(String.Join(name,"faction"));
      Global.Destroy(String.Join(name,"faction"));

      cargo_faction_id = Global.Int(String.Join(name,"cargo_faction"));
      Global.Destroy(String.Join(name,"cargo_faction"));

      hack_level = Global.Int(String.Join(name,"cargo_level"));
      Global.Destroy(String.Join(name,"cargo_level"));

      pod = iSim.Cast(tPodUtil.CreatePodShipper(cargo_type, faction, cargo_faction_id));
      Object.AddIntProperty(pod, "cargo_hack_level", hack_level);

      Sim.SetCullable(pod, false);
      iSim.Dock(ship, pod);
      iSim.SetDockingLock(pod, iSim.Cast(ship), true);      
      iRemotePilot.EnableRemoteConnection(iShip.Cast(pod), true);
   }
}






SetupPlayerWingman(hship ship, int id, int group, eefOwnership owner, string world)
{
   hfaction player_faction = iFaction.Find("Player");
   hgroup combat_group = Group.Cast(Global.Handle("gt_epic_fleet_combat_group"));

   set_id_number(ship, id);

   add_ship_to_list(ship);

   read_ini_file(ship);


   iShip.InstallAIPilot(ship, 4.0, 0.25, 0.5,"","","","");
   iSim.SetSensorVisibility(iSim.Cast(ship), true);

   iSim.SetFaction(ship, player_faction);

   Sim.SetCullable(ship, false);

   group_add_ship(ship,  group);
   SetGroupNumber(ship, group);

   SetOwnership(ship, owner);

   SetWorld(ship, world);

   tEpicComms.AddComms(ship, "tEpicFleet.WingmanComms");

   Object.SetStringProperty(ship, "death_script", "tEpicFleet.WingmanDeath");

   set_position(ship);

   Group.AddSim(combat_group, ship);

   // Start the watch task to track this ship.
   Task.Detach(start wingman_watch(ship));
}

// Used to purchase a new player ship. Properly sets the inventory and
// any needed fleet values.
NewPlayerShip(hship ship)
{
   int id = next_id_number();

   // We need to remove the players current ship from the hanger.
   // Just get rid of all the ships.
   iInventory.RemoveCommandSection();
   iInventory.RemoveTug();
   iInventory.RemoveFastAttackShip();
   iInventory.RemoveHeavyCorvette();
   iInventory.RemoveStormPetrel();


   // Now add back the ship the player has just added.
   if (iSim.Type(ship) == T_CommandSection) {
      iInventory.AddCommandSection();
   }if (iSim.Type(ship) == T_Tug) {
      iInventory.AddTug();
   }else if (iSim.Type(ship) == T_Patcom) {
      iInventory.AddFastAttackShip();
   }else if (iSim.Type(ship) == T_Corvette) {
      iInventory.AddHeavyCorvette();
   }else if (iSim.Type(ship) == T_Fighter) {
      iInventory.AddStormPetrel();
   }

   iShip.InstallPlayerPilot(ship);

   SetupPlayer(ship, id);
}

// Attaches any needed properties to the players current ship. The pilot should
// already be installed at this time.
SetupPlayer(hship ship, int id)
{
   hfaction player_faction = iFaction.Find("Player");
   hgroup combat_group = Group.Cast(Global.Handle("gt_epic_fleet_combat_group"));


   if (iSim.Type(ship) != T_CommandSection) {
      // If the ship is larger than a command section, then it gets a command
      // section for a life pod. otherwise, none.
      Object.SetStringProperty(ship, "death_script", "tEpicFleet.PlayerDeath");
   }else {
      Object.SetStringProperty(ship, "death_script", "iDeathScript.PlayerDeathScript");
   }

   set_id_number(ship, id);

   add_ship_to_list(ship);

   read_ini_file(ship);

   iSim.SetFaction(ship, player_faction);

   // Do not allow the player ship to be removed when player has
   // been moved away to a life pod or something.

   Sim.SetCullable(ship, false);

   Group.AddSim(combat_group, ship);

   debug {
       Debug.PrintString(":");
       Debug.PrintString(Sim.TemplateName(ship));
       Debug.PrintString(": player ship template\n");
   }
}

task final_view(hship escape_pod, hship ex_player)
{
   eCamera camera;

   iSim.SetIndestructable(escape_pod, true);
   iSim.StartExplosion(ex_player);
   
   // Give the player a few seconds to see they are toast.
   Task.Sleep(Task.Current(), 3.0);

   iSim.StopExplosion(ex_player, SE_Normal, false);
   iSim.Kill(ex_player);

   iComms.Shout(escape_pod, "name_az","Our ship is gone! We ejected just in time.");

   Task.Sleep(Task.Current(), 10.0);

   iSim.SetIndestructable(escape_pod, false);
}

// Our player has botched the job. Toss him in an escape pod.

task PlayerDeath( hship sim )
{
   hship escape_pod;

   // This ship has left the player fleet in a real way.
   RemoveShip(iShip.Cast(sim));

   escape_pod = iShip.Create("ini:/sims/ships/player/comsec_prefitted", "Escape Pod");

   NewPlayerShip(escape_pod);

   // Put 100 meters below, as though player detached.
   Sim.PlaceRelativeTo(escape_pod, sim, 0, 100, -200);
   Sim.PointAt(escape_pod, sim);

   // Jettison pretty hard to escape the blast radius.
   // We run reverse to allow the player to see what is happening.
   Sim.SetVelocityLocalToSim(escape_pod, 0, 0, -100);

   Task.Detach( start final_view(escape_pod, sim));
   //Task.Detach( start delayed_sim_destroy(iSim.Cast(sim)));
}




task delayed_sim_destroy(hisim ship)
{
   Task.Sleep(Task.Current(), 2.0);

   Sim.Destroy(ship);
}

// used to remove a ship from the player service.
release_wingman(hship ship)
{
   hfaction independent_faction = iFaction.Find("Independent");

   // remove from further commands.
   GroupRemoveShip(ship);

   // remove from save restore list.
   RemoveShip(ship);

   // return the ship to standard sensor visibility.
   iSim.SetSensorVisibility(iSim.Cast(ship), false);

   // 
   iSim.SetStandardSensorVisibility( iSim.Cast(ship), true );

   // change the faction to independent.
   iSim.SetFaction(ship, independent_faction);

   // allow the ship to be removed.
   Sim.SetCullable(ship, true);

   // remove the comms function.
   tEpicComms.AddComms(ship, "");
}



// Add this ship to the player fleet. Mark it as a hired ship.
HireShip(hship ship)
{
   int id = next_id_number();

   SetupPlayerWingman(ship, id, 0, efoHired, iSim.ActiveWorld());
}

// Add this ship to the player fleet as a captured vessel.
CaptureShip(hship ship)
{
   int id = next_id_number();

   SetupPlayerWingman(ship, id, 0, efoCaptured, iSim.ActiveWorld());
}

// Player releases a wingman from service. Send the ship toward the nearest lpoint.
// Also used when the player cannot pay the upkeep of a ship.

FireShip(hship ship)
{
   hlagrangepoint lpoint;

   release_wingman(ship);

   // Find the nearest lpoint.
   lpoint = iLagrangePoint.Nearest( iMapEntity.SystemLagrangePoints(),
                                    ship);

   // Give the ship orders to approach the lpoint, hopefully it will be culled in route.
   iAI.GiveApproachOrder( ship, lpoint );   

}

// Checks if a ship is owned by the player and if that ship
// was captured. Only captured ships may be sold to ship breakers.
bool IsCaptured(hship ship)
{
   if (efoCaptured == Ownership(ship)) {
      return true;
   }

   return false;
}

//******************************************************************************************/
// Communication Routines


task WingmanComms()
{
   hship ship;

   ship = iShip.Cast(tEpicComms.CommsSource());

        // Start the conversation.
    iConversation.Begin();


    
    // Response 1
    iConversation.AddResponse(
       "Nothing. Over and out.",
       "Nothing. Over and out.");

        // Response 2
    iConversation.AddResponse(
        "Wingman, you are released from service.",
        "Wingman, you are released from service.");

    // Ask the player a question and switch on their response.


    switch ( iConversation.Ask( ship, "", "Sir! How can we be of service?" ) )
    {
        case 1 :
           // Player said no.
            iConversation.Say(ship,"", "Out." );
            break;

        case 2 :
           // Player fired ship
            iConversation.Say(ship,"", "Yes Sir! It has been good serving with you." );
            FireShip(ship);
            break;

        default :
            // Player selected "Nothing"
            iConversation.Say(ship,"", "Out." );
    }

    // Finish the conversation.
    iConversation.End();
}


task WingmanDeath(hsim wingman)
{
   GroupRemoveShip(iSim.Cast(wingman));
   RemoveShip(iShip.Cast(wingman));

   iComms.Shout(none,"","Wingman has been destroyed");

   iSim.Kill(iSim.Cast(wingman));
}

// Wingman watch handles all polling operations that need to be done 
// to wingmen
task wingman_watch(hship wingman)
{
   hship player;

   bool locked = false;

   string prior_world, current_world;
   float fuel;
   int halt_timer;



   while (1) {
      Task.Sleep(Task.Current(), 5.0);

         //Our wingman bit the dust. Bail out.
         if (Sim.IsDead(wingman)) {
            GroupRemoveShip(wingman);
            RemoveShip(iShip.Cast(wingman));
            return;
         }

         player = iShip.FindPlayerShip();

         
         // Default orders are to follow the player
         // This should make it easier for players to 
         // keep track of wingmen.
         if (OT_None == iAI.CurrentOrderType(wingman)) {

            // If our prior order was an attack order, or nothing, we return to
            // the player.
            if (OT_None == Object.IntProperty(wingman, "gt_prior_order") || 
                OT_Attack == Object.IntProperty(wingman, "gt_prior_order") ){

               Object.SetBoolProperty(wingman, "gt_prior_order", OT_Formate);
               iAI.PurgeOrders(wingman);
               iAI.GiveEscortOrder(wingman, 
                                   player,
                                   tFormation.Xpos(wingman),
                                   tFormation.Ypos(wingman),
                                   tFormation.Zpos(wingman),
                                   50km);
            }
         }


         fuel = Fuel(wingman);

         if (!Object.BoolProperty(wingman,"fuel_locked"))
         {
            // Check if the ship is out of fuel.
            if (fuel < 1.0)
            {
               // Ship has run out of fuel. Lock the ship down.               
               Object.SetBoolProperty(wingman, "fuel_locked", true);
               iShip.SetFreeWithoutPilot(wingman, true);
            }
         }else {
            if (fuel > 1.0)
            {
               // Ship has had some fuel added. Unlock the ship.
               Object.SetBoolProperty(wingman, "fuel_locked", false);
               iShip.SetFreeWithoutPilot(wingman, false);
            }
         }


         
         if (Sim.DistanceBetween(player, wingman) > Global.Float("gt_distance_wakeup")) {

            if (false == locked) {
               debug {
                  Debug.PrintHandle(wingman);
                  Debug.PrintString(" locking down\n");
               }

               // Pull the ship out of the player combat group.
               Group.RemoveSim(Sim.Group(wingman), wingman);
            }

            // If the player is more than half culling distance away, lock down the weapons systems.
            iShip.LockDownWeapons(wingman);
            locked = true;

            if (OT_Approach == iAI.CurrentOrderType(wingman)) {
               halt_timer = halt_timer + 5;

               if (halt_timer > 30) {
                  // Stop the wingman, the timer is up so he must be outrunning
                  // the player.
                  iAI.PurgeOrders(wingman);
               }
            }



         }else{
            if (true == locked) {
               // if the wingmans weapons were locked down, unlock them.
               // Don't do this more than once.
               iShip.WeaponTargetsFromContactList(wingman);
               locked = false;

               // Add the wingman back into the players combat group.
               Group.AddSim(Sim.Group(player), wingman);
            }

            halt_timer = 0;


         }


         // Fuel is now deducted before the jump.

         // Check if this ship has capsule jumped.
         // Always wait until any capsule jump is completed.
         /*
         if (!iSim.IsCapsuleJumping(wingman)) {
            prior_world = World(wingman);
            current_world = iSim.WorldName(wingman);
            if (prior_world != current_world) {
               SetWorld(wingman, current_world);
               // Update fuel usage
               atomic {
                  fuel = Fuel(wingman);
                  fuel = fuel - FuelPerJump(wingman);
                  SetFuel(wingman,fuel);
               }

            }
         }
         */
   }
}




int save_cargo_pod(hship cargo_pod)
{
   string name, system;
   int cargo_faction_id, cargo_type, hack_level;
   int pod_id = Object.IDModulus(cargo_pod, 30000);
   hisim reference;

      
   cargo_type = Object.IntProperty( cargo_pod, "cargo" );   
   cargo_faction_id = Object.IntProperty( cargo_pod, "cargo_faction" );   
   hack_level = Object.IntProperty( cargo_pod, "cargo_hack_level" );   

   name = String.FormatInt("ts_ppod%d",pod_id);

   Global.CreateInt(String.Join(name,"cargo"),GA_Write, cargo_type);
   Global.CreateInt(String.Join(name,"cargo_faction"),GA_Write, cargo_faction_id);
   Global.CreateInt(String.Join(name,"cargo_level"),GA_Write, hack_level);

   system = iSim.WorldName(cargo_pod);
   reference = iSim.Cast(Nearest(cargo_pod, List.FromSet(iMapEntity.SystemHabitatsInSystem(system))));

   location_by_sim(cargo_pod, reference);

   Global.CreateFloat(String.Join(name,"x"),GA_Write, 
                      Object.VectorPropertyX(cargo_pod,"EpicFleetLoc"));
   Global.CreateFloat(String.Join(name,"y"),GA_Write, 
                      Object.VectorPropertyY(cargo_pod,"EpicFleetLoc"));
   Global.CreateFloat(String.Join(name,"z"),GA_Write, 
                      Object.VectorPropertyZ(cargo_pod,"EpicFleetLoc"));

   Global.CreateString(String.Join(name,"system"),GA_Write, system);
   Global.CreateString(String.Join(name,"reference"),GA_Write, Sim.Name(reference));


   debug {
      Debug.PrintHandle(cargo_pod);
      Debug.PrintString(" cargo pod saved\n");
      Debug.PrintString(String.FormatInt(" pod id %d",pod_id));
   }

   return pod_id;
}


save_pod_list(list cargo_pods)
{
   int i, total, id;
   hship pod;

   total = List.ItemCount(cargo_pods);
   for (i=0;i<total;++i) {
      pod = iShip.Cast(List.GetNth(cargo_pods, i));

      id = save_cargo_pod(pod);

      // Create a numbered sequence of strings, each one
      // pointing to a saved cargo pod.

      Global.CreateInt(String.FormatInt("ts_podlist%d", i), GA_Write, id);
   }

   Global.CreateInt("ts_podtotal", GA_Write, total);
}


hship restore_cargo_pod(int pod_id)
{
   string name, system, ref_name;
   hisim reference;
   float x,y,z;
   int cargo_type, cargo_faction_id, hack_level;
   hship pod;

   name = String.FormatInt("ts_ppod%d",pod_id);

   cargo_type = Global.Int(String.Join(name,"cargo"));
   Global.Destroy(String.Join(name,"cargo"));

   cargo_faction_id = Global.Int(String.Join(name,"cargo_faction"));
   Global.Destroy(String.Join(name,"cargo_faction"));

   hack_level = Global.Int(String.Join(name,"cargo_level"));
   Global.Destroy(String.Join(name,"cargo_level"));

   pod = iShip.Cast(tPodUtil.CreatePodShipper(cargo_type, "Player", cargo_faction_id));
      
   Object.AddIntProperty(pod,"cargo_hack_level", hack_level);

   // Place the pod
   x = Global.Float(String.Join(name,"x"));
   y = Global.Float(String.Join(name,"y"));
   z = Global.Float(String.Join(name,"z"));

   Global.Destroy(String.Join(name,"x"));      
   Global.Destroy(String.Join(name,"y"));
   Global.Destroy(String.Join(name,"z"));

   system = Global.String(String.Join(name,"system"));
   Global.Destroy(String.Join(name,"system"));

   ref_name = Global.String(String.Join(name,"reference"));
   Global.Destroy(String.Join(name,"reference"));

   reference = iSim.FindByNameInSystem(ref_name, system);

   Sim.SetCullable(pod, false);
   Sim.PlaceRelativeTo(pod, reference, x, y, z);

   debug {
      Debug.PrintHandle(pod);
      Debug.PrintString(" cargo pod restored\n");
      Debug.PrintString(String.FormatInt(" pod id %d",pod_id));
   }

   return pod;
}


restore_pod_list()
{
   int i, total, id;
   hship pod;

   total = Global.Int("ts_podtotal");
   Global.Destroy("ts_podtotal");

   for (i=0;i<total;++i) {
      id = Global.Int(String.FormatInt("ts_podlist%d", i));
      Global.Destroy(String.FormatInt("ts_podlist%d", i));

      restore_cargo_pod(id);
   }
}






set locate_free_pods()
{
   list player_fleet, pod_list;
   set pod_set, new_pods, final_set;
   hship wingman;
   hship pod;
   int i, total_wingmen, total_pods;
   hfaction player_faction = tEFaction.PlayerFaction();

   // for each wingman, gather a list of pods that are nearby that
   // belong to the player faction.

   player_fleet = PlayerFleet();

   // process the set of pods, and remove all the docked ones.
   total_wingmen = List.ItemCount(player_fleet);
   for (i=0;i<total_wingmen;++i) {
      wingman = iShip.Cast(List.GetNth(player_fleet,i));

      new_pods = iSim.SimsInRadiusFromSet(iSim.SimsInRadiusOfFaction( wingman,
                                                                      Global.Float("gt_distance_wakeup"),
                                                                      player_faction),
                                          wingman,
                                          Global.Float("gt_distance_wakeup"),
                                          T_CargoPod);

      Set.Union(pod_set, new_pods);
   }

   // Sift the pods removing the docked and destroyed ones.
   pod_list = List.FromSet(pod_set);
   total_pods = List.ItemCount(pod_list);
   for (i=0;i<total_pods;++i) {
      pod = iShip.Cast(List.GetNth(pod_list, i));

      if (!Sim.IsDead(pod)){
         if (!iSim.IsDocked(pod)) {
            Set.Add(final_set, pod);
         }
      }
   }

   return final_set;
}


// Read in the INI file, attach the properties to the ship.
read_ini_file(hship ship)
{

   hinifile ship_file;
   float max_fuel;
   float daily_fuel;
   float jump_fuel;
   int daily_cost;
   int ship_type;
   int tanker, miner, prospector, study_days, scan_range;
   float mining_efficiency;
   string template_name;

   template_name = Sim.TemplateName(ship);

   if (template_name == "") {
      // The player ship has no template. So we pick a new one based on ships class.
      switch (iSim.Type(ship)) {
      case T_CommandSection:
         template_name = "ini:/sims/ships/player/comsec";
         break;
      case T_Tug:
         template_name = "ini:/sims/ships/player/tug";
         break;
      case T_Patcom:
         template_name = "ini:/sims/ships/player/fast_attack";
         break;
      case T_Corvette:
         template_name = "ini:/sims/ships/player/heavy_corvette";
         break;
      case T_Fighter:
      case T_Interceptor:
         template_name = "ini:/sims/ships/player/storm_petrel";
         break;
      default:
         break;
      }
   }

   ship_file = INIFile.Create(template_name);
   ship_type = iSim.Type(ship);

   max_fuel = INIFile.Float(ship_file,"Properties","max_fuel", default_max_fuel(ship_type));
   daily_fuel = INIFile.Float(ship_file,"Properties","daily_fuel", default_daily_fuel(ship_type));
   jump_fuel = INIFile.Float(ship_file,"Properties","jump_fuel", default_jump_fuel(ship_type));
   daily_cost = INIFile.Int(ship_file,"Properties","daily_cost", default_daily_cost(ship_type));
   tanker = INIFile.Int(ship_file,"Properties","tanker", 0);
   miner = INIFile.Int(ship_file,"Properties","miner", 0);
   mining_efficiency = INIFile.Float(ship_file,"Properties","mining_efficiency", 0);
   prospector = INIFile.Int(ship_file,"Properties","prospector", 0);
   study_days = INIFile.Int(ship_file,"Properties","study_days", 0);
   scan_range = INIFile.Int(ship_file,"Properties","scan_range", 0);

   INIFile.Destroy(ship_file);

   // Attach the properties to the ship.
   Object.AddFloatProperty(ship, "fuel", max_fuel);
   Object.AddFloatProperty(ship, "max_fuel", max_fuel);
   Object.AddFloatProperty(ship, "daily_fuel", daily_fuel);
   Object.AddFloatProperty(ship, "jump_fuel", jump_fuel);
   Object.AddIntProperty(ship, "daily_cost", daily_cost);

   Object.AddIntProperty(ship, "tanker", tanker);
   Object.AddIntProperty(ship, "miner", miner);
   Object.AddFloatProperty(ship, "mining_efficiency", mining_efficiency);
   Object.AddIntProperty(ship, "prospector", prospector);
   Object.AddIntProperty(ship, "study_days", study_days);
   Object.AddIntProperty(ship, "scan_range", scan_range);

   Object.AddBoolProperty(ship, "fuel_locked", false);
}


float default_max_fuel(int ship_type)
{

    debug Debug.PrintString("tEpicFleet.using default max fuel\n");

   switch (ship_type)
   {

   case 	T_Drone	: return 500.0; 
      break;
   case 	T_Waldo	: return 500.0; 
      break;
   case 	T_CommandSection: return 500.0; 
      break;
   case 	T_Utility			: return 500.0; 
      break;
   case 	T_Passenger			: return 500.0; 
      break;
   case 	T_Fighter			: return 500.0; 
      break;
   case 	T_Tug				: return 500.0; 
      break;
   case 	T_Patcom			: return 500.0; 
      break;
   case 	T_Interceptor	: return 500.0; 
      break;
   case 	T_Corvette		: return 500.0; 
      break;
   case 	T_Freighter		: return 500.0; 
      break;
   case 	T_Destroyer		: return 500.0; 
      break;
   case 	T_Cruiser		: return 500.0; 
      break;
   case 	T_Carrier		: return 500.0; 
      break;
   default: 
      break;
   }

   return 500.0;
}


float default_daily_fuel(int ship_type)
{
   
   switch (ship_type)
   {

   case 	T_Drone	: return 10.0; 
      break;
   case 	T_Waldo	: return 10.0; 
      break;
   case 	T_CommandSection: return 10.0; 
      break;
   case 	T_Utility			: return 10.0; 
      break;
   case 	T_Passenger			: return 10.0; 
      break;
   case 	T_Fighter			: return 10.0; 
      break;
   case 	T_Tug				: return 10.0; 
      break;
   case 	T_Patcom			: return 10.0; 
      break;
   case 	T_Interceptor	: return 10.0; 
      break;
   case 	T_Corvette		: return 10.0; 
      break;
   case 	T_Freighter		: return 10.0; 
      break;
   case 	T_Destroyer		: return 10.0; 
      break;
   case 	T_Cruiser		: return 10.0; 
      break;
   case 	T_Carrier		: return 10.0; 
      break;
   default: 
      break;
   }

   return 10.0;

}


float default_jump_fuel(int ship_type)
{
   switch (ship_type)
   {

   case 	T_Drone	: return 100.0; 
      break;
   case 	T_Waldo	: return 100.0; 
      break;
   case 	T_CommandSection: return 100.0; 
      break;
   case 	T_Utility			: return 100.0; 
      break;
   case 	T_Passenger			: return 100.0; 
      break;
   case 	T_Fighter			: return 100.0; 
      break;
   case 	T_Tug				: return 100.0; 
      break;
   case 	T_Patcom			: return 100.0; 
      break;
   case 	T_Interceptor	: return 100.0; 
      break;
   case 	T_Corvette		: return 100.0; 
      break;
   case 	T_Freighter		: return 100.0; 
      break;
   case 	T_Destroyer		: return 100.0; 
      break;
   case 	T_Cruiser		: return 100.0; 
      break;
   case 	T_Carrier		: return 100.0; 
      break;
   default: 
      break;
   }

   return 100.0;
}


int default_daily_cost(int ship_type)
{
   switch (ship_type)
   {

   case 	T_Drone	: return 10; 
      break;
   case 	T_Waldo	: return 10; 
      break;
   case 	T_CommandSection: return 10; 
      break;
   case 	T_Utility			: return 10; 
      break;
   case 	T_Passenger			: return 10; 
      break;
   case 	T_Fighter			: return 10; 
      break;
   case 	T_Tug				: return 10; 
      break;
   case 	T_Patcom			: return 10; 
      break;
   case 	T_Interceptor	: return 10; 
      break;
   case 	T_Corvette		: return 10; 
      break;
   case 	T_Freighter		: return 10; 
      break;
   case 	T_Destroyer		: return 10; 
      break;
   case 	T_Cruiser		: return 10; 
      break;
   case 	T_Carrier		: return 10; 
      break;
   default: 
      break;
   }

   return 10;
}


//******************************************************************************************/



//******************************************************************************************/

CreateTestShip()
{
   hship ship, player;
   hisim pod;
   hsim waypoint;
   hfaction faction;
   int i, total, item_count;
   list all_factions;
   string cargo_name;

   player = iShip.FindPlayerShip();

   ship = iShip.Create("ini:/sims/ships/utility/freighter","CargoTest");

   HireShip(ship);

   Sim.PlaceRelativeTo(ship, player, 10km, 5km, 5km);

   pod = iSim.Cast (tPodUtil.CreateCargoPod(CT_Fruit ,"Police","Player"));
   Sim.SetCullable(pod, false);
   iSim.Dock(ship, pod);
   

   pod = iSim.Cast (tPodUtil.CreateCargoPod(CT_Wire ,"Player","MAAS Corporation"));
   Sim.SetCullable(pod, false);
   iSim.Dock(ship, pod);

   // Create a wingman that can be used for attacking targets.
   ship = iShip.Create("ini:/sims/ships/navy/patcom","AttackTest");
   HireShip(ship);
   Sim.PlaceRelativeTo(ship, player, 2km, 5km, 5km);

   // Create a wingman that can be used for testing
   // capture attacks.
   ship = iShip.Create("ini:/sims/ships/utility/interfacer","MarinesTest");
   HireShip(ship);
   SetMarines(ship, 100);
   Sim.PlaceRelativeTo(ship, player, 1km, 5km, 5km);


   ship = iShip.Create("ini:/sims/ships/utility/prospector_ship","ScienceTest");
   HireShip(ship);
   Sim.PlaceRelativeTo(ship, player, 1km, 5km, 5km);

   ship = iShip.Create("ini:/sims/ships/utility/mining_rig","MinerTest");
   HireShip(ship);
   Sim.PlaceRelativeTo(ship, player, 1km, 5km, 5km);

   ship = iShip.Create("ini:/sims/ships/utility/fueltransporter_mid_p","FuelTanker");
   HireShip(ship);
   Sim.PlaceRelativeTo(ship, player, 1km, 5km, 5km);
}



CreateTargets()
{
   hship ship, player;
   hisim pod;
   hsim waypoint;
   hfaction faction;
   int i, total, item_count;
   list all_factions;
   string cargo_name;

   player = iShip.FindPlayerShip();   
   
   
      // Create a pod the player can pirate or destroy.
   pod = iSim.Cast (tPodUtil.CreateCargoPod(CT_Fruit ,"Military","Player"));
   Sim.SetCullable(pod, false);
   Sim.PlaceRelativeTo(pod, ship, 5km, 5km, 5km);

   // Create player owned pod
   pod = iSim.Cast (tPodUtil.CreateCargoPod(CT_Soya ,"Player","Underworld"));
   Sim.SetCullable(pod, false);
   Sim.PlaceRelativeTo(pod, ship, 5km, 5km, 5km);


   ship = iShip.Create("ini:/sims/ships/utility/supply_ship","Capture Target");
   Sim.PlaceRelativeTo(ship, player, 5km, 1km, 5km);

   ship = iShip.Create("ini:/sims/ships/navy/patcom","Capture Invalid");
   Sim.PlaceRelativeTo(ship, player, 5km, 2km, 5km);

}


// Shuts down targeted ship for 60 seconds. Good for testing capture or docking items.
DisruptShip()
{
   hship player = iShip.FindPlayerShip();
   hship target;

   target = iShip.Cast(iShip.CurrentTarget(player));

   iShip.Disrupt(target, 60, false);
}


/*  
THIS MOD IS NOT MADE, DISTRIBUTED, OR SUPPORTED BY INFOGRAMES
OR PARTICLE SYSTEMS LTD. 

ELEMENTS TM & (C) INFOGRAMES AND PARTICLE SYSTEMS LTD.
*/
