//*******************************************************************************************/
//
// tStationEnv.pog
//
// This package adds environmental objects around stations. Objects are created when a player
// gets near the station. The item locations are specified.
// 
//
// July 2003, Jon Freise
//******************************************************************************************/

package tStationEnv;

uses    Sim,
        iShip,
        iSim,
        Debug,
        Global,
        GUI,
        iGUI,
        iHUD,
        INIFile,
        Input,
        List,
        Object,
        String,
        Task,
        Text,
        iMod,
        iMapEntity,
        tPogClass,
        tPcOwner,
        tsCull;



provides CallMods,
         ReadFile,
         SetupEnv,
         SystemSetup,
         GetFileList,
         AttachFile,
         SetupObjects,
         LeaveStation,
         EnterBase;





prototype CallMods();
prototype ReadFile(hisim station, string filename);
prototype SetupEnv(hisim station);
prototype list GetFileList(hisim station);
prototype AttachFile(string station_name, string system, string filename);

/*
Station Environment File structure

[Files]
file_name[0]=
location[0]=


[Items]
item[0]=
name[0]=
location[0]= 
effect[0]=


[Inert]
item[0]=
location[0]=
angle[0]=
rotation[0]=

[Nebula]
item[0]=
name[0]=
location[0]=
effect[0]=


[Fields]
item[0]=
location[0]=
effect[0]=

*/

/*

Station Setups: Add this header to any mod file to add the station
environment. When the player gets close to the station, the objects will
be created.

[StationEnviron]
station[0]=
system[0]=
file[0]=

*/

/*

   Hard work done here. Read the environment file. Create all the sims 
   requested and place them. Start any effect tasks requested.
   
*/

SetupObjects(hmapentity station, hisim owner, string filename, float center_x, float center_y, float center_z)
{
   hinifile env_file = INIFile.Create(filename);
   int count;
   string object_type, name, effect, nebula, view, field, new_file;
   float xpos, ypos, zpos;
   float yaw, pitch, roll;
   float yaw_vel, pitch_vel, roll_vel;
   hsim item, culled_marker;
   htask effect_task;
   int place_close, random;

   /*
   debug Debug.PrintString("StationEnv.SetupObjects:");
   debug Debug.PrintString(filename);
   debug Debug.PrintString("\n");
*/
   if (none == env_file) {
      // No file specified. Bail.
      debug {
         Debug.PrintString("StationEnv.SetupObjects Error INI file missing:");
         Debug.PrintString(filename);
         Debug.PrintString(":\n");
      }
      return;
   }

   if (none == station) {
      // No valid station. Bail.
      debug {
         Debug.PrintString("StationEnv.SetupObjects Error station missing:");
         Debug.PrintString("\n");
      }
      return;
   }


   // Read the file list, recursivly call self.
   count = 0;
   while (INIFile.NumberedExists(env_file,"Files","file_name",count)){
      new_file = INIFile.NumberedString(env_file,"Files","file_name",count,"none");
      xpos = INIFile.NumberedVectorX(env_file,"Files","location",count);
      ypos = INIFile.NumberedVectorY(env_file,"Files","location",count);
      zpos = INIFile.NumberedVectorZ(env_file,"Files","location",count);

      SetupObjects(station, 
                   owner, 
                   new_file, 
                   xpos+center_x, 
                   ypos+center_y, 
                   zpos+center_z);
      ++count;
   }



   // Inert items have no code or name. They are just large asteroids and other
   // objects that are scattered near the station. They don't have to be inert
   // sims, but they tend to be.
   count = 0;
   while (INIFile.NumberedExists(env_file,"Inert","item",count)){

      object_type = INIFile.NumberedString(env_file,"Inert","item",count,"none");
      name = INIFile.NumberedString(env_file,"Inert","name",count,"unnamed");
      effect = INIFile.NumberedString(env_file,"Inert","effect",count,"none");

      xpos = INIFile.NumberedVectorX(env_file,"Inert","location",count);
      ypos = INIFile.NumberedVectorY(env_file,"Inert","location",count);
      zpos = INIFile.NumberedVectorZ(env_file,"Inert","location",count);

      yaw = INIFile.NumberedVectorX(env_file,"Inert","angle",count);
      pitch = INIFile.NumberedVectorY(env_file,"Inert","angle",count);
      roll = INIFile.NumberedVectorZ(env_file,"Inert","angle",count);

      yaw_vel = INIFile.NumberedVectorX(env_file,"Inert","rotation",count);
      pitch_vel = INIFile.NumberedVectorY(env_file,"Inert","rotation",count);
      roll_vel = INIFile.NumberedVectorZ(env_file,"Inert","rotation",count);

      random = INIFile.NumberedInt(env_file,"Inert","random",count, 0);
      place_close = INIFile.NumberedInt(env_file,"Inert","place_close",count, 0);

      ++count;



      item = Sim.Create(object_type,name);

      if (none == item) {
          debug Debug.PrintString("StationEnv: Inert ");
          debug Debug.PrintString(object_type);
          debug Debug.PrintString("\n");
          debug Debug.PrintString("Error failed to create\n");
      }

      if (none != item) {
         if (0 == random) {
            if (0 == place_close) {
               // Standard placement will move colliding objects to safe distances.
               Sim.PlaceRelativeTo(item, station, xpos +center_x, ypos+center_y, zpos+center_z);
            }else {
               // place_close allows placement inside of collision boundries, something
               // normally not allowed.
               Sim.PlaceRelativeToInside(item, station, xpos +center_x, ypos+center_y, zpos+center_z);
            }
         }else {
            // Uses the Xpos value as a distance.
            Sim.PlaceNear(item, station, xpos);
         }

         iShip.SetFreeWithoutPilot(iShip.Cast(item), true);

         Sim.SetOrientationEuler( item, yaw, pitch, roll );

         Sim.SetAngularVelocityEuler( item, yaw_vel, pitch_vel, roll_vel );

         Sim.SetCullable(item, false);

         tsCull.AddSim(station, item);
      }
   }


   // Read the item list, create. These are pog objects.
   count = 0;
   while (INIFile.NumberedExists(env_file,"Items","item",count)){

      object_type = INIFile.NumberedString(env_file,"Items","item",count,"none");
      name = INIFile.NumberedString(env_file,"Items","name",count,"unnamed");
      effect = INIFile.NumberedString(env_file,"Items","effect",count,"none");

      xpos = INIFile.NumberedVectorX(env_file,"Items","location",count);
      ypos = INIFile.NumberedVectorY(env_file,"Items","location",count);
      zpos = INIFile.NumberedVectorZ(env_file,"Items","location",count);

      /*
      yaw = INIFile.NumberedVectorX(env_file,"Items","angle",count);
      pitch = INIFile.NumberedVectorY(env_file,"Items","angle",count);
      roll = INIFile.NumberedVectorZ(env_file,"Items","angle",count);
*/
      yaw_vel = INIFile.NumberedVectorX(env_file,"Items","rotation",count);
      pitch_vel = INIFile.NumberedVectorY(env_file,"Items","rotation",count);
      roll_vel = INIFile.NumberedVectorZ(env_file,"Items","rotation",count);

      random = INIFile.NumberedInt(env_file,"Items","random",count, 0);
      place_close = INIFile.NumberedInt(env_file,"Items","place_close",count, 0);

      ++count;

 

      item = tPogClass.Create(object_type, name);

      if (none == item) {
          debug Debug.PrintString("StationEnv: Item ");
          debug Debug.PrintString(object_type);
          debug Debug.PrintString("\n");
          debug Debug.PrintString("Error failed to create\n");
      }
      
      if (none != item) {

         if (0 == random) {
            if (0 == place_close) {
               // Standard placement will move colliding objects to safe distances.
               Sim.PlaceRelativeTo(item, station, xpos +center_x, ypos+center_y, zpos+center_z);
            }else {
               // place_close allows placement inside of collision boundries, something
               // normally not allowed.
               Sim.PlaceRelativeToInside(item, station, xpos +center_x, ypos+center_y, zpos+center_z);
            }
         }else {
            // Uses the Xpos value as a distance.
            Sim.PlaceNear(item, station, xpos);
         }

         // Sim.SetOrientationEuler( item, yaw, pitch, roll );
         Sim.SetAngularVelocityEuler( item, yaw_vel, pitch_vel, roll_vel );

         // Set any customized properties here. They just have to match name from
         // the environment file and the pog object.
         tPcOwner.SetOwner(item, owner);
         tPogClass.Start(item);
      }
   }


   INIFile.Destroy(env_file);
}

/*
   Called at system startup to establish fields and nebula
   around the stations. Fields and Nebula are permanant while the
   player is in the system. So we only want to create them once on entry.
   
*/
SetupNebulaAndFields(hisim station, string filename, float center_x, float center_y, float center_z)
{
   hinifile env_file = INIFile.Create(filename);
   int count;
   string object_type, name, effect, nebula, view, field;
   float xpos, ypos, zpos;
   float yaw, pitch, roll;
   hsim item;
   htask effect_task;
   string new_file;

/*
   debug Debug.PrintString("StationEnv: NebulaFields ");
   debug Debug.PrintString(filename);
   debug Debug.PrintString("\n");
*/

   if (none == env_file) {
      // No file specified. Bail.
      debug {
         Debug.PrintString("StationEnv: INI file missing:");
         Debug.PrintString(filename);
         Debug.PrintString("\n");
      }
      return;
   }

   if (none == station) {
      // No valid station. Bail.
      debug {
         Debug.PrintString("StationEnv: station missing:");
         Debug.PrintString("\n");
      }
      return;
   }

   if (true == Object.PropertyExists(station,"gt_station_env_started")) {
      // Already setup, so don't 
      return;
   }

   // Read the file list, recursivly call self.
   count = 0;
   while (INIFile.NumberedExists(env_file,"Files","file_name",count)){
      new_file = INIFile.NumberedString(env_file,"Files","file_name",count,"none");
      xpos = INIFile.NumberedVectorX(env_file,"Files","location",count);
      ypos = INIFile.NumberedVectorY(env_file,"Files","location",count);
      zpos = INIFile.NumberedVectorZ(env_file,"Files","location",count);
      SetupNebulaAndFields(station, new_file, xpos+center_x, ypos+center_y, zpos+center_z);
      ++count;
   }


   // Read the nebula list, create
   // Nebula have an extra sim for outside view
   count = 0;
   while (INIFile.NumberedExists(env_file,"Nebula","nebula_file",count)){
      nebula = INIFile.NumberedString(env_file,"Nebula","nebula_file",count,"none");
      name = INIFile.NumberedString(env_file,"Nebula","name",count,"unnamed");
      effect = INIFile.NumberedString(env_file,"Nebula","effect",count,"none");
      xpos = INIFile.NumberedVectorX(env_file,"Nebula","location",count);
      ypos = INIFile.NumberedVectorY(env_file,"Nebula","location",count);
      zpos = INIFile.NumberedVectorZ(env_file,"Nebula","location",count);

      item = Sim.Create(nebula,name);
      if (none != item) {
         // Place the nebula, and make it sensor invisible.
         Sim.PlaceRelativeToInside(item, station, xpos +center_x, ypos+center_y, zpos+center_z);
//         Sim.PlaceRelativeToInside(item, station, xpos, ypos, zpos);
         iSim.SetStandardSensorVisibility(iSim.Cast(item), false);
      }
      ++count;
   }


   // Read the field list, create
   // Fields have no name.
   count = 0;
   while (INIFile.NumberedExists(env_file,"Fields","item",count)){
      field = INIFile.NumberedString(env_file,"Fields","item",count,"none");
      effect = INIFile.NumberedString(env_file,"Fields","effect",count,"none");
      xpos = INIFile.NumberedVectorX(env_file,"Fields","location",count);
      ypos = INIFile.NumberedVectorY(env_file,"Fields","location",count);
      zpos = INIFile.NumberedVectorZ(env_file,"Fields","location",count);

      item = Sim.Create(field,"sta_env_field");

/*
      debug Debug.PrintString("StationEnv: Field ");
      debug Debug.PrintString(object_type);
      debug Debug.PrintString("\n");
      debug Debug.PrintHandle(item);
      debug Debug.PrintString("\n");
*/
      if (none != item) {
         Sim.PlaceRelativeToInside(item, station, xpos +center_x, ypos+center_y, zpos+center_z);
//         Sim.PlaceRelativeToInside(item, station, xpos, ypos, zpos);
      }
      ++count;
   }

   INIFile.Destroy(env_file);
}






// Called by player watch task once the player is close to the station.
SetupEnv(hisim station)
{
   list file_list = GetFileList(station);
   string file_name;
   hsim culled_marker;
   hsim file_mark;
   int i, total;

   /*
   debug {
      Debug.PrintString("StationEnv: SetupEnv ");
      Debug.PrintHandle(station);
      Debug.PrintString("\n");
   }
   */

   total = List.ItemCount(file_list);
   for (i=0;i<total;++i) {
      file_mark = Sim.Cast(List.GetNth(file_list, i));
      file_name = Sim.Name(file_mark);
      if ("" != file_name) {
         SetupObjects(iMapEntity.Cast(station), station, file_name, 0, 0, 0);
      }
   }
}




// Pull the player
list GetFileList(hisim station)
{
   list empty_list;

   if (Object.PropertyExists(station,"StationEnvList")) {
      return Object.ListProperty(station,"StationEnvList");
   }
   return empty_list;
}



AttachFile(string station_name, string system, string filename)
{
   hisim station;
   hsim file_mark;
   list file_list;

   station = iSim.FindByNameInSystem(station_name, system);

   if (none == station) {
       debug Debug.PrintString("StationEnv Attach File Error");
       debug Debug.PrintString(station_name);
       debug Debug.PrintString("\n");
       debug Debug.PrintString(system);
       debug Debug.PrintString("\n");

   }

   if (none != station) {
      file_mark = Sim.Create("ini:/sims/nav/waypoint", filename);


      if (!Object.PropertyExists(station,"StationEnvList")) {
         List.AddTail(file_list, file_mark);
         Object.AddListProperty(station,"StationEnvList",file_list);
      }else {
         file_list = Object.ListProperty(station,"StationEnvList");
         List.AddTail(file_list, file_mark);
         Object.SetListProperty(station,"StationEnvList",file_list);
      }
   }

}



// Starts fields and nebula when a player jumps into a new system.
SystemSetup()
{
   list stations = List.FromSet(iMapEntity.SystemHabitats());
   list file_list;
   int total, i, total_files, file;
   hisim station;
   hsim file_mark;
   string file_name;
   string global_name;

   // Player has already visited this system, so don't recreate
   // the fields and nebula.

   // If the player just exited the base, set everything back up.
   if (Global.String("t_station_env_sys") != iSim.ActiveWorld()){
      Global.CreateString("t_station_env_sys",GA_Write|GA_NoSave,iSim.ActiveWorld());

      total = List.ItemCount(stations);
      for (i=0;i<total;++i) {
         station = iSim.Cast(List.GetNth(stations, i));

         file_list = GetFileList(station);
         total_files = List.ItemCount(file_list);
         for (file=0;file<total_files;++file) {
            file_mark = Sim.Cast(List.GetNth(file_list, file));
            file_name = Sim.Name(file_mark);

            if ("" != file_name) {
               SetupNebulaAndFields(station, file_name, 0, 0, 0);
            }
         }
      }
   }
}

EnterBase()
{
   // Clear the active world string to make sure we recreate the nebula.
   Global.CreateString("t_station_env_sys",GA_Write|GA_NoSave,"");
   Global.CreateBool("t_station_env_mods_checked",GA_Write|GA_NoSave,false);
}

//*******************************************************************************************/
//
// CallMods looks in mod files for new station environments. It attaches the environment file
// names to the stations so the player watch task can find them.
//
// Call this function after all stations are created on enter space.
//******************************************************************************************/

CallMods()
{
   int i,j, mod_count, station_count;
   string name;
   hinifile modini;
   string station_name, system, file_name;

   if (Global.Bool("t_station_env_mods_checked")) {
      return;
   }

   Global.CreateBool("t_station_env_mods_checked",GA_Write|GA_NoSave,true);

   mod_count = iMod.Count();

   for (i=0;i<mod_count;++i) {
      name = iMod.Name(i);
      modini = INIFile.Create(String.Join("ini:/",name));

      /*
          debug Debug.PrintHandle(modini);
          debug Debug.PrintString(String.FormatStrStr("StationEnv Seeking %s %s \n",name,""));
          */

      if (none != modini) {
         station_count = 0;
         while (INIFile.NumberedExists(modini,"StationEnviron","station",station_count)){

            station_name = INIFile.NumberedString(modini,"StationEnviron","station",station_count,"no station!");
            system = INIFile.NumberedString(modini,"StationEnviron","system",station_count,"no system!");
            file_name = INIFile.NumberedString(modini,"StationEnviron","file_name",station_count,"missing!");

            AttachFile(station_name, system, file_name);
            station_count=station_count+1;

         }
      }

      INIFile.Destroy(modini);
   }
}



LeaveStation(hisim station)
{
   hgroup station_objects;
   int i, total;
   hsim item;

   debug Debug.PrintString("tStationEnv.LeaveStation\n");

//   Global.CreateBool("t_station_env_mods_checked",GA_Write|GA_NoSave,false);

   // Mark all objects cullable.
   tsCull.CullAll(station);
}


/*  
THIS MOD IS NOT MADE, DISTRIBUTED, OR SUPPORTED BY INFOGRAMES
OR PARTICLE SYSTEMS LTD. 

ELEMENTS TM & (C) INFOGRAMES AND PARTICLE SYSTEMS LTD.
*/
