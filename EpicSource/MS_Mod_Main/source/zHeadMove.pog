/**************************************************************************************/

// zHeadMove
// 
// This program will do a shout from the talking head of AZ.
// 


/*  
THIS MOD IS NOT MADE, DISTRIBUTED, OR SUPPORTED BY INFOGRAMES
OR PARTICLE SYSTEMS LTD. 

ELEMENTS TM & (C) INFOGRAMES AND PARTICLE SYSTEMS LTD.
*/

/**************************************************************************************/

package zHeadMove;


uses    Sim,
        iShip,
        iSim,
        iAi,
        iPilotSetup,
        Debug,
        Global,
        GUI,
        iDirector,
        iGUI,
        iHUD,
        iHabitat,
        iFaction,
        iMapEntity,
      	iGame,
        INIFile,
        Input,
        List,
        Object,
        String,
        Task,
        Text,
        iUtilities,
        iCargo,
        iInventory,
        iComms,
        iConversation,
        Math,
        iMod,
        CargoTypes,
        tEconUtil,
        tEpicMoney;


provides FinalSetup,
         ButtonPress;



task head_move()
{
   int response;

   bool finished = false;

   iConversation.Begin();

   do {

   iConversation.AddResponse(
      "Az",
      "Az");

   iConversation.AddResponse(
      "Smith",
      "Smith");

   iConversation.AddResponse(
      "Lori",
      "Lori");

   iConversation.AddResponse(
      "Cal",
      "Cal");

   iConversation.AddResponse(
      "Jaffs",
      "Jaffs");

   iConversation.AddResponse(
      "Maas",
      "Maas");

   iConversation.AddResponse(
      "Young Cal",
      "Young Cal");

   iConversation.AddResponse(
      "Clay",
      "Clay");

   iConversation.AddResponse(
      "Play All",
      "Play All");

   iConversation.AddResponse(
      "Exit Menu",
      "Exit Menu");


   response = iConversation.Ask(none,"","Which talking head?");

   switch (response) {
   case 1:
      iConversation.Say(none,"name_az", "This string should be long so the movie stays active for a second or two");
      break;
   case 2:
      iConversation.Say(none,"name_smith", "This string should be long so the movie stays active for a second or two");
      break;
   case 3:
      iConversation.Say(none,"name_lori", "This string should be long so the movie stays active for a second or two");
      break;
   case 4:
      iConversation.Say(none,"name_cal", "This string should be long so the movie stays active for a second or two");
      break;
   case 5:
      iConversation.Say(none,"name_jafs", "This string should be long so the movie stays active for a second or two");
      break;
   case 6:
      iConversation.Say(none,"name_caleb_maas", "This string should be long so the movie stays active for a second or two");
      break;
   case 7:
      iConversation.Say(none,"name_young_cal", "This string should be long so the movie stays active for a second or two");
      break;
   case 8:
      iConversation.Say(none,"name_clay", "This string should be long so the movie stays active for a second or two");
      break;
   case 9:
      iConversation.Say(none,"name_jafs", "This string should be long so the movie stays active for a second or two");
      iConversation.Say(none,"name_lori", "This string should be long so the movie stays active for a second or two");
      iConversation.Say(none,"name_az", "This string should be long so the movie stays active for a second or two");
      iConversation.Say(none,"name_cal", "This string should be long so the movie stays active for a second or two");
      iConversation.Say(none,"name_smith", "This string should be long so the movie stays active for a second or two");
      iConversation.Say(none,"name_caleb_maas", "This string should be long so the movie stays active for a second or two");
      iConversation.Say(none,"name_clay", "This string should be long so the movie stays active for a second or two");
      break;
   case 10:
   default:
      finished = true;
      break;
   }

   }while (!finished);


   iConversation.End();

   // Now allow another button press.
   Global.SetBool("zheadmove_started", false);
}


FinalSetup()
{
   Input.BindKey( "zHeadMove.ButtonPress","HeadMove.Talk" );
   Global.CreateBool("zheadmove_started",GA_Write|GA_NoSave,false);
}

ButtonPress()
{
   // Block multiple keypresses from overlapping.
   if (Global.Bool("zheadmove_started")) {
      return;
   }
   Global.SetBool("zheadmove_started", true);

   // Button presses are atomic and speech has delays, needs a task.
   Task.Detach(start head_move());
}
