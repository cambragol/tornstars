//*******************************************************************************************/
//
// tETradeSell.pog
//
// This module allows the player to sell cargo pods to stations. It uses pricing and 
// station production from the economy sim.
// 
// 
//
// May 2005, jon freise
//******************************************************************************************/

package tETradeSell;

uses	Sim,
		iShip,
		iSim,
		Debug,
		Global,
		GUI,
		iDirector,
		iGame,
		iGUI,
		iHUD,
		iHabitat,
		iMapEntity,
		INIFile,
		Input,
		List,
		Object,
		String,
		Task,
		Text,
		iUtilities,
		iCargo,
		iInventory,
		iComms,
		Math,
      iDockPort,                
      CargoTypes,

		UniGUI,
      tSpewerOps,
      tMegaTrucking,
      tStationEnum,
      tStation,
      tEpicGuiEnum,
      tEpicGui,
      tsFaction,
      tLProduction,
      tEconSmall,
      tEconUtil,
      tEpicMoney,
      tPodUtil,
      tLTrade,
      uString;




provides TradeWindow,
         RunCheck,
         TradeObjectStart,
         StartScreen,
         OnStationPress,
         OnOfferPress,
         OnOfferAllPress,
         OnRemovePress,
         OnRemoveAllPress,
         OnOfferedItemPress,
         OnSellPress,
         OnBuyScreen,
         SessionStart,
         SessionEnd,
         ExitScreen;


prototype create_ordered_inventory_list();

prototype create_player_pod_list();

prototype int index_from_name(list item_list, string property, string name);

prototype task screen_refresh();

prototype list player_pod_list();
prototype int player_pod_count(int cargo_type);

prototype select_ordered_inventory(hcargo cargo);


RunCheck()
{
   // Only allow when the player is docked to a valid station
   // or trade ship.
   hmapentity station;
   hship player = iShip.FindPlayerShip();
   hfaction station_faction;

   bool allow_trade = true;

   station = iHabitat.Nearest(iMapEntity.SystemHabitats(), player);
   
   if (Sim.DistanceBetween(player, station) > 20km) {
      allow_trade = false;
   }

   // Don't allow the player to trade when the station is not
   // operating (destroyed or under construction). 
   if (tStation.Status(iHabitat.Cast(station)) != ESS_Normal) {
      allow_trade = false;
   }

   // If the player owns this station, do not allow trade.
   if (station_faction == tsFaction.PlayerFaction()){
      allow_trade = false;
   }

   // If no one owns this station (it was abandond) do not allow trade.
   if (station_faction == tsFaction.EmptyFaction()){
      allow_trade = false;
   }

   Global.SetBool("g_zz_ug_passme", allow_trade);
}


// Load the text files we wil need.
SessionStart()
{
   Text.Add("csv:/text/gt_etrade_sell");
}


// Unload any text files.
SessionEnd()
{
   Text.Remove("csv:/text/gt_etrade_sell");
}


float int2float(int value)
{
   return value;
}


int float2int(float value)
{
   return value;
}


float price_adjust()
{
   return Global.Float("gt_etradesell_price_adjust");
}


set_price_adjust(float adjust)
{
   Global.CreateFloat("gt_etradesell_price_adjust", GA_Write|GA_NoSave, adjust);
}




ordered_set_add(hcargo cargo)
{
   set order_set;

   atomic {
      if (Global.Exists("gt_etradesell_ordered_items")){
         order_set = Global.Set("gt_etradesell_ordered_items");
         Set.Add(order_set, cargo);
         Global.SetSet("gt_etradesell_ordered_items", order_set);
      }else {
         Set.Add(order_set, cargo);
         Global.CreateSet("gt_etradesell_ordered_items",GA_Write|GA_NoSave, order_set);
      }
   }
}


ordered_set_remove(hcargo cargo)
{
   set order_set;
   int count;

   atomic {
      count = Object.IntProperty(cargo,"gt_etrade_amount");
      if (count <= 0) {
         order_set = Global.Set("gt_etradesell_ordered_items");
         Set.Remove(order_set, cargo);
         Global.SetSet("gt_etradesell_ordered_items", order_set);
      }
   }
}



set ordered_set()
{
   return Global.Set("gt_etradesell_ordered_items");
}

clear_set()
{
   Global.Destroy("gt_etradesell_ordered_items");
}



hwindow create_border_button(int x, int y, int width, int height, hwindow parent, string name, string function)
{
   hwindow button, border;
   int button_x, button_y, button_width, button_height;

   // We need to change the button size to make room for the border.
   button_x = x + 8;
   button_y = y + 8;

   button_width = width - 16;
   button_height = height - 16;

   button = GUI.CreateButton( button_x,
                              button_y,
                              button_width,
                              button_height,
                              parent);


   GUI.SetWindowTitle(button, name);

   GUI.SetWindowFont(button, Global.String("GUI_title_font"));

   GUI.SetButtonFunctionPog(button, function);

//   tEpicGui.SetStandardWindowColours(button);

   // Add the border
   border = GUI.CreateBorder(button);

   // we still return the button, because the function might need to change
   // or something. This is one of those no good choice decisions.

   tEpicGui.SetStandardStateColours(button);

   return button;
}


TradeObjectStart(hisim trade_object)
{

   if (tLTrade.IsTradeCenter(trade_object)) {
      Global.CreateHandle("g_epic_trade_start_object", GA_Write|GA_NoSave, trade_object);

      GUI.PopScreensTo("icSpaceFlightScreen");
      GUI.OverlayScreen("icPDAOverlayManager");
      iGUI.OverlayCustomScreen( "tETradeSell.TradeWindow" );
   }
}



StartScreen()
{
   hmapentity station;
   hship player = iShip.FindPlayerShip();

   station = iHabitat.Nearest(iMapEntity.SystemHabitats(), player);
   
   //if (iSim.IsDockedToStructure(player, station)) {

      Global.CreateHandle("g_epic_trade_start_object",GA_Write|GA_NoSave, station);

      GUI.PopScreensTo("icSpaceFlightScreen");
      GUI.OverlayScreen("icPDAOverlayManager");
      iGUI.OverlayCustomScreen( "tETradeSell.TradeWindow" );
//   }
}

ExitScreen()
{
   UniGUI.UniGUIRemoveScreen();
}

// This function builds a list of all the cargo items in the player
// inventory that are ship systems.
set systems_inventory()
{
   int total = CT_AdvancedHullMaterialRefit;
   int i, number, cargo_type;
   hcargo cargo;
   set all_cargo;

   for (i=CT_WasteBlocks;i<total;++i) {
      cargo = iCargo.Find(i);
      number = iInventory.NumberOfCargoType(i);

      if (number > 0) {
         if (iCargo.PlayerSystem(cargo)) {
            Set.Add(all_cargo, cargo);
         }
      }
   }
   return all_cargo;
}

clear_inventory()
{
   int total = CT_AdvancedHullMaterialRefit;
   int i;
   hcargo cargo;
   set all_cargo;

   for (i=CT_Invalid;i<total;++i) {
      cargo = iCargo.Find(i);

      Object.AddIntProperty(cargo,"gt_etrade_amount",0);
      Object.SetIntProperty(cargo,"gt_etrade_amount",0);
   }
}

update_cargo_info(hcargo cargo)
{
   hwindow cargo_info = GUI.Cast(Global.Handle("gt_etradesell_cargo_info"));
   string text;
   int price;

   // Price minus sellers hauling fee discount.
   price = float2int(price_adjust() * int2float(tEconSmall.CargoPrice(cargo)));

   text = String.Join(iCargo.Name(cargo),"<p>");

   text = String.Join(text,Text.Field("gt_etradesell_price",FT_Text));
   text = String.Join(text,String.FormatInt(" %d<p>",price));

   text = uString.Htmlize(text);

   GUI.SetTextWindowString( cargo_info, text);
}


// Should display the total price
update_order_info()
{
   hwindow order_info = GUI.Cast(Global.Handle("gt_etradesell_order_info"));
   list player_order = List.FromSet(ordered_set());
   string text, price_string, funds_string;
   int total,i, price, pods, number, funds, value, pod_price;
   hcargo cargo;


   // Sum up total price of cargo purchased.
   price = 0;
   pods = 0;
   total = List.ItemCount(player_order);
   for (i=0;i<total;++i) {
      cargo = iCargo.Cast(List.GetNth(player_order,i));
      number = Object.IntProperty(cargo,"gt_etrade_amount");
      pods += number;
      pod_price = float2int(price_adjust()* int2float(tEconSmall.CargoPrice(cargo)));
      value = number * pod_price;
      price += value;
   }

   price_string = "";
   price_string = String.Join(price_string, Text.Field("gt_etradesell_total_price",FT_Text));
   price_string = String.Join(price_string, String.FormatInt(" %d<p> ",price));

   funds = tEpicMoney.ShipAccount();
   funds_string = "";
   funds_string = String.Join(funds_string,Text.Field("gt_etradesell_funds", FT_Text));
   funds_string = String.Join(funds_string, String.FormatInt(" %d", funds));


   text = "";
   text = String.Join(text, Text.Field("gt_etradesell_current_order", FT_Text));
   text = String.Join(text, "<p>");
   text = String.Join(text, Text.Field("gt_etradesell_total_pods",FT_Text));
   text = String.Join(text, String.FormatInt(" %d<p> ",pods));
   text = String.Join(text, price_string);
   text = String.Join(text, funds_string);

   text = uString.Htmlize(text);

   GUI.SetTextWindowString( order_info, text);
}


order_item(hcargo cargo, bool order_all)
{
   int count, pod_count, cargo_type;
   set wanted_set = Global.Set("gt_etradesell_station_set");
   hship player = iShip.FindPlayerShip();
   bool legal = Global.Bool("gt_etradesell_legal");

   hhabitat trade_center = iHabitat.Cast(Global.Handle("g_epic_trade_start_object"));
   hship docked_ship;
   list docked_pods;

   if (!Set.Contains(wanted_set, cargo)){
      iHUD.PlayAudioCue(AC_InvalidInput);
      return;
   }


   cargo_type = Object.IntProperty(cargo,"type");

   if(iHabitat.HasSpewer(trade_center))
   {
	   docked_ship = tSpewerOps.ShipDocked(trade_center, false);
	   docked_pods = tSpewerOps.PodsOfTypeOnShip(Object.IntProperty(cargo,"type"), docked_ship, legal, -1);
   }
   else
	   docked_ship = none;

   pod_count = tPodUtil.NumberOfCargoType(player, 50km, cargo_type, legal);

   if (order_all)
   {
	   if(docked_ship != none)					// Hidden feature: order all with a ship docked orders all
		   count = List.ItemCount(docked_pods);	// that are only on the docked ship
	   else
		   count = pod_count;
   }
   else
   {
      count = Object.IntProperty(cargo,"gt_etrade_amount");
      ++count;
   }

   // The player does not have any more pods. Block the offer.
   if (count > pod_count) {
      iHUD.PlayAudioCue(AC_InvalidInput);
      return;
   }

   Object.SetIntProperty(cargo,"gt_etrade_amount",count);

   ordered_set_add(cargo);

   create_ordered_inventory_list();

   update_order_info();

   create_player_pod_list();
}


// When a new item is selected, update the cargo info box.
// Set the item as a global for the order button to find.
select_station_inventory(hcargo cargo)
{
   update_cargo_info(cargo);

   Global.CreateHandle("gt_etradesell_station_select",GA_Write|GA_NoSave, cargo);
}

// Translates a selection press into an update call.
OnStationPress()
{
   hwindow button = GUI.FocusedWindow();
   hcargo cargo = iCargo.Cast(Object.HandleProperty(button,"gt_etradesell_cargo"));

   select_station_inventory(cargo);
}


OnOfferPress()
{
   hcargo cargo = iCargo.Cast(Global.Handle("gt_etradesell_station_select"));

   // Pressed before a cargo item was selected.
   if (none == cargo) {
      return;
   }

   select_ordered_inventory(cargo);

   order_item(cargo, false);
}

OnOfferAllPress()
{
   hcargo cargo = iCargo.Cast(Global.Handle("gt_etradesell_station_select"));

   // Pressed before a cargo item was selected.
   if (none == cargo) {
      return;
   }

   select_ordered_inventory(cargo);

   order_item(cargo, true);
}



remove_item(hcargo cargo, bool remove_all)
{
   int count;

   if (remove_all) {
      count =0;
   }else{ 
      count = Object.IntProperty(cargo,"gt_etrade_amount");
      --count;
      if (count < 0) {
         count = 0;
      }
   }

   Object.SetIntProperty(cargo,"gt_etrade_amount",count);

   ordered_set_remove(cargo);

   create_ordered_inventory_list();

   create_player_pod_list();
}


select_ordered_inventory(hcargo cargo)
{


   update_cargo_info(cargo);

   Global.CreateHandle("gt_etradesell_ordered_select",GA_Write|GA_NoSave, cargo);
}

OnOfferedItemPress()
{
   hwindow button = GUI.FocusedWindow();
   hcargo cargo = iCargo.Cast(Object.HandleProperty(button,"gt_etradesell_cargo"));

   select_ordered_inventory(cargo);
}

OnRemovePress()
{
   hcargo cargo = iCargo.Cast(Global.Handle("gt_etradesell_ordered_select"));

   // Nothing selected yet.
   if (none == cargo) {
      return;
   }

   remove_item(cargo, false);

   update_order_info();
}


OnRemoveAllPress()
{
   hcargo cargo = iCargo.Cast(Global.Handle("gt_etradesell_ordered_select"));

   // Nothing selected yet.
   if (none == cargo) {
      return;
   }

   remove_item(cargo, true);

   update_order_info();
}



OnSellPress()
{
   hship player = iShip.FindPlayerShip();
   hsim waypoint;
   hship current_pod;
   list player_order = List.FromSet(ordered_set());
   string text, price_string, funds_string;
   int total,i, j, price, pods, number, funds, value;
   int cargo_type, pods_removed;
   hcargo cargo;
   hisim trade_center = iSim.Cast(Global.Handle("g_epic_trade_start_object"));
   bool legal = Global.Bool("gt_etradesell_legal");

   bool spewer = iHabitat.HasSpewer(iHabitat.Cast(trade_center));
   hship docked_ship;
   set sold_pods, cleared_pods;
   int order_size;
   hfaction station_faction = iSim.Faction(trade_center);

   if (List.IsEmpty(player_order)) {
      return;
   }

   // If the player is too far, refuse sale.
   if (20km < Sim.DistanceBetween(player, trade_center)){
      iHUD.PlayAudioCue(AC_InvalidInput);
      return;
   }

   if(spewer)
   {
   docked_ship = tSpewerOps.ShipDocked(iHabitat.Cast(trade_center), true);	// Find the docked ship and lock it down
   if(docked_ship == none)
   {
	   iHUD.Print("YOU MUST DOCK THE SHIP YOU WILL SELL PODS FROM");
	   iHUD.PlayAudioCue(AC_InvalidInput);
	   return;
   }	// end if(docked_ship...)

   // Verify offered pods are on ship

   total = List.ItemCount(player_order);
   for(i=0;i<total;++i)
   {
	   cargo = iCargo.Cast(List.GetNth(player_order,i));
	   pods = Object.IntProperty(cargo,"gt_etrade_amount");
	   if(pods > List.ItemCount(tSpewerOps.PodsOfTypeOnShip(Object.IntProperty(cargo,"type"), docked_ship, legal, -1)))	// Make sure we're not selling more of a type than are on the one ship
	   {
		   iHUD.Print("ALL OFFERED PODS MUST BE ON DOCKED SHIP");
		   iHUD.PlayAudioCue(AC_InvalidInput);
		   if(Object.IntProperty(docked_ship, "md_epic_podstogo") < 1)	// Make sure the spewer isn't already running from something else
		   {
			   iSim.SetDockingLock(docked_ship, trade_center, false);
			   iHUD.Print("VESSEL UNLOCKED");
		   }
		   return;
	   }
   }

   tSpewerOps.Initialize(docked_ship, iHabitat.Cast(trade_center));

   }	// end if(spewer)

   atomic{

      // Pay the player for each pod that was actually removed.
      total = List.ItemCount(player_order);
      for (i=0;i<total;++i) {
         cargo = iCargo.Cast(List.GetNth(player_order,i));
         pods = Object.IntProperty(cargo,"gt_etrade_amount");

         if(spewer)
         {
            Set.Union(sold_pods, Set.FromList(tSpewerOps.PodsOfTypeOnShip(Object.IntProperty(cargo,"type"), docked_ship, legal, pods)));
            pods_removed = List.ItemCount(tSpewerOps.PodsOfTypeOnShip(Object.IntProperty(cargo, "type"), docked_ship, legal, pods));
         }
         else
         {
            cargo_type = Object.IntProperty(cargo,"type");
            pods_removed = tPodUtil.RemoveType(player, 50km, cargo_type, pods, legal);
         }
		 
         price = float2int(price_adjust()* int2float(tEconSmall.CargoPrice(cargo)));
         tEpicMoney.ChangeShipAccount(price*pods_removed);         

         // Clear the amount for next purchase.
         Object.SetIntProperty(cargo,"gt_etrade_amount",0);
      }


      cleared_pods = sold_pods;
      while(!Set.IsEmpty(cleared_pods)){
         current_pod = iShip.Cast(Set.FirstElement(cleared_pods));
         Set.Remove(cleared_pods, current_pod);
         // Change the owner, so the player cannot give this pod orders.
         // and the pod is no longer counted in the player inventory.
         iSim.SetFaction(current_pod, station_faction);

         // Remove the hack, so the player cannot steal back this pod.
         tPodUtil.RemoveHack(current_pod);
      }
   }

   // And unload
   if(spewer)
	   tSpewerOps.UnloadShip(docked_ship, iHabitat.Cast(trade_center), sold_pods);

   // clear_set();

   // create_ordered_inventory_list();

   // update_order_info();

   // We might have a problem, because it takes time for the pods to exist.
   // create_player_pod_list();

   // The screen is refreshing faster than the pods are deleted.
   // I need a way to delay the restart of the screen.

   // Now the screen refreshes MUCH faster than the pods vanish. But the md_epic_podsold
   // flag makes sure we don't get bonus pods.

   Task.Detach(start screen_refresh());
}

task screen_refresh()
{
   // Just a quick pause while the pods get zapped.
   Task.Sleep(Task.Current(), 0.1);

   GUI.PopScreensTo("icSpaceFlightScreen");
   GUI.OverlayScreen("icPDAOverlayManager");
   iGUI.OverlayCustomScreen( "tETradeSell.TradeWindow" );
}


OnBuyScreen()
{

   GUI.RemoveOverlaysAfter("icSpaceFlightScreenOverlay");
   GUI.PopScreensTo("icSpaceFlightScreen");
   GUI.OverlayScreen("icPDAOverlayManager");
   iGUI.OverlayCustomScreen( "tETradeBuy.TradeWindow" );

//   Task.Detach(Task.Start("tETradeBuy.StartScreen"));

}



create_ordered_inventory_list()
{
   hwindow list_parent = GUI.Cast(Global.Handle("gt_etradesell_ordered_inv_parent"));
   hwindow list_base = GUI.Cast(Global.Handle("gt_etradesell_ordered_inv_base"));
   hwindow list_box;
   hwindow button;

   hcargo cargo;
   hcargo selected_cargo;
   int i, count, selected_index;
	int scrollbar_width = Global.Int( "GUI_scrollbar_width" );	// Scrollbar width

   int button_width, height, list_x, list_y;

   string name;
   list cargo_list = List.FromSet(ordered_set());


   // Remove the prior inventory list.
   if (none != list_base) {
      GUI.DeleteWindow(list_base);
   }

   list_base = GUI.CreateWindow(0, 
                                0,
                                GUI.WindowCanvasWidth( list_parent),
                                GUI.WindowCanvasHeight( list_parent),
                                list_parent);

   Global.CreateHandle("gt_etradesell_ordered_inv_base",GA_Write|GA_NoSave, list_base);


   // Set up the button and list sizes now.
   button_width = GUI.WindowCanvasWidth( list_base) - scrollbar_width;
   button_width -= 4;


   list_box = GUI.CreateListBox( 0, 
                                 0,
                                 button_width,
                                 GUI.WindowCanvasHeight( list_base),
                                 list_base,
                                 true,
                                 false);

	// Attach a scrollbar to the list box. from LFPlus.
	GUI.CreateVerticalScrollbar( 
		GUI.WindowCanvasWidth( list_base ) - scrollbar_width, 
		0,
		scrollbar_width, 
		GUI.WindowCanvasHeight( list_base ),
		list_base,
		list_box,
		Global.Float( "GUI_scrollbar_buttonratio" ),
		"" );


   cargo_list = List.SortByStringProperty(cargo_list, "name");

   selected_cargo = iCargo.Cast(Global.Handle("gt_etradebuy_ordered_select"));
   selected_index = 0;

   count = List.ItemCount(cargo_list);
   for (i=0;i<count;++i) {
      cargo = iCargo.Cast(List.GetNth(cargo_list,i));

      name = String.Join(iCargo.Name(cargo),
                         String.FormatInt(" %d",Object.IntProperty(cargo,"gt_etrade_amount")));

      button = iGUI.CreateAndInitialiseRectangularInverseRadioButton( none, 0, 0, 
                                                                      button_width, 
                                                                      name,
                                                                      false );
      // We will need to be able to look up the cargo 
      // for buying and selling later.
      Object.AddHandleProperty(button,"gt_etradesell_cargo",cargo);

      GUI.SetInputOverrideFunctions( button,
											"", 
											"",
											"", 
											"", 
											"", 
											"",
											"tETradeSell.OnOfferedItemPress",
											"",
											"" );

      GUI.AddListBoxEntry(list_box, button);

      if (selected_cargo == cargo) {
         selected_index = i;
      }
   }   


   GUI.SelectListBoxEntry(list_box, selected_index);
}


// Create a list of player pods that the player can offer for sale.
create_player_pod_list()
{
   hwindow list_parent = GUI.Cast(Global.Handle("gt_etradesell_ppods_inv_parent"));
   hwindow list_base = GUI.Cast(Global.Handle("gt_etradesell_ppods_inv_base"));
   hwindow list_box;
   hwindow button;

   hcargo cargo;
   int i, count, index;
	int scrollbar_width = Global.Int( "GUI_scrollbar_width" );	// Scrollbar width

   int button_width, height, list_x, list_y;
   int pod_count, cargo_type;
   string name;
   list cargo_list;
   set wanted_set = Global.Set("gt_etradesell_station_set");
   hship player = iShip.FindPlayerShip();
   bool legal = Global.Bool("gt_etradesell_legal");


   // Remove the prior inventory list.
   if (none != list_base) {
      GUI.DeleteWindow(list_base);
   }

   list_base = GUI.CreateWindow(0, 
                                0,
                                GUI.WindowCanvasWidth( list_parent),
                                GUI.WindowCanvasHeight( list_parent),
                                list_parent);


   Global.CreateHandle("gt_etradesell_ppods_inv_base",GA_Write|GA_NoSave, list_base);

   // Set up the button and list sizes now.
   button_width = GUI.WindowCanvasWidth( list_base) - scrollbar_width;
   button_width -= 4;


   list_box = GUI.CreateListBox( 0, 
                                 0,
                                 button_width,
                                 GUI.WindowCanvasHeight( list_base),
                                 list_base,
                                 true,
                                 false);

	// Attach a scrollbar to the list box. from LFPlus.
	GUI.CreateVerticalScrollbar( 
		GUI.WindowCanvasWidth( list_base ) - scrollbar_width, 
		0,
		scrollbar_width, 
		GUI.WindowCanvasHeight( list_base ),
		list_base,
		list_box,
		Global.Float( "GUI_scrollbar_buttonratio" ),
		"" );

   cargo_list = player_pod_list();
   //cargo_list = List.FromSet(tPodUtil.PlayerPodCargoSet(player, 50km));
   //cargo_list = List.FromSet(Global.Set("gt_etradesell_station_set"));

   cargo_list = List.SortByStringProperty(cargo_list, "name");

   count = List.ItemCount(cargo_list);
   for (i=0;i<count;++i) {
      cargo = iCargo.Cast(List.GetNth(cargo_list,i));

      name = iCargo.Name(cargo);

      if (!Set.Contains(wanted_set, cargo)) {
         name = String.Join(name,"  ");
         name = String.Join(name,Text.Field("gt_etradesell_unwanted",FT_Text));
      }else {
         cargo_type = Object.IntProperty(cargo,"type");

//         pod_count = tPodUtil.NumberOfCargoType(player, 50km, cargo_type, false);

         pod_count = player_pod_count(cargo_type);

         // remove those pods that have already been offered.
         pod_count = pod_count - Object.IntProperty(cargo,"gt_etrade_amount");
         
         name = String.Join(name, String.FormatInt(" %d", pod_count));
      }

      button = iGUI.CreateAndInitialiseRectangularInverseRadioButton( none, 0, 0, 
                                                                      button_width, 
                                                                      name,
                                                                      false );
      // We will need to be able to look up the cargo 
      // for buying and selling later.
      Object.AddHandleProperty(button,"gt_etradesell_cargo",cargo);

      GUI.SetInputOverrideFunctions( button,
											"", 
											"",
											"", 
											"", 
											"", 
											"",
											"tETradeSell.OnStationPress",
											"",
											"" );

      GUI.AddListBoxEntry(list_box, button);
   }   

   // We need to pick an entry to highlight. 

   cargo = iCargo.Cast(Global.Handle("gt_etradesell_station_select"));
   if (none == cargo) {
      // If this is the very first time this list is created, we just choose the first item.
      // Then we update the cargo info to match.
      index = 0;
      cargo = iCargo.Cast(List.Head(cargo_list));
      select_station_inventory(cargo);
   }else {
      index = index_from_name(cargo_list, "name", iCargo.Name(cargo));
   }

          GUI.SelectListBoxEntry(list_box, index);

}


list player_pod_list()
{
   hisim trade_center = iSim.Cast(Global.Handle("g_epic_trade_start_object"));
   list cargo_list;
   hship player = iShip.FindPlayerShip();
   hship docked_ship;

   if (T_Station == iSim.Type(trade_center)) {
      if (iHabitat.HasSpewer(iHabitat.Cast(trade_center))) {
         // Return only those pods on a ship docked to the station.
         docked_ship = tSpewerOps.ShipDocked(iHabitat.Cast(trade_center), false);
         return List.FromSet(tPodUtil.PlayerPodCargoSet(docked_ship, 1km));
      }
   }

   // Allow sale of any pods nearby.
   return List.FromSet(tPodUtil.PlayerPodCargoSet(player, 50km));
}

int player_pod_count(int cargo_type) 
{
   hisim trade_center = iSim.Cast(Global.Handle("g_epic_trade_start_object"));
   list cargo_list;
   hship player = iShip.FindPlayerShip();
   hship docked_ship;

   if (T_Station == iSim.Type(trade_center)) {
      if (iHabitat.HasSpewer(iHabitat.Cast(trade_center))) {
         // Return only those pods on a ship docked to the station.
         docked_ship = tSpewerOps.ShipDocked(iHabitat.Cast(trade_center), false);
         return List.ItemCount(tSpewerOps.PodsOfTypeOnShip(cargo_type, docked_ship, false, -1));
      }
   }

   return tPodUtil.NumberOfCargoType(player, 50km, cargo_type, false);
}



create_player_systems_list()
{
   hwindow list_parent = GUI.Cast(Global.Handle("gt_etradesell_psystems_inv_parent"));
   hwindow list_base = GUI.Cast(Global.Handle("gt_etradesell_psystems_inv_base"));
   hwindow list_box;
   hwindow button;

   hcargo cargo;
   int i, count;
	int scrollbar_width = Global.Int( "GUI_scrollbar_width" );	// Scrollbar width

   int button_width, height, list_x, list_y;

   string name;
   list cargo_list;

   // Remove the prior inventory list.
   if (none != list_base) {
      GUI.DeleteWindow(list_base);
   }

   list_base = GUI.CreateWindow(0, 
                                0,
                                GUI.WindowCanvasWidth( list_parent),
                                GUI.WindowCanvasHeight( list_parent),
                                list_parent);


   Global.CreateHandle("gt_etradesell_psystems_inv_base",GA_Write|GA_NoSave, list_base);

   // Set up the button and list sizes now.
   button_width = GUI.WindowCanvasWidth( list_base) - scrollbar_width;
   button_width -= 4;


   list_box = GUI.CreateListBox( 0, 
                                 0,
                                 button_width,
                                 GUI.WindowCanvasHeight( list_base),
                                 list_base,
                                 true,
                                 false);

	// Attach a scrollbar to the list box. from LFPlus.
	GUI.CreateVerticalScrollbar( 
		GUI.WindowCanvasWidth( list_base ) - scrollbar_width, 
		0,
		scrollbar_width, 
		GUI.WindowCanvasHeight( list_base ),
		list_base,
		list_box,
		Global.Float( "GUI_scrollbar_buttonratio" ),
		"" );


   cargo_list = List.FromSet(systems_inventory());

   cargo_list = List.SortByStringProperty(cargo_list, "name");

   count = List.ItemCount(cargo_list);
   for (i=0;i<count;++i) {
      cargo = iCargo.Cast(List.GetNth(cargo_list,i));

      name = String.Join(iCargo.Name(cargo),
                         String.FormatInt(" %d",
                                          iInventory.NumberOfCargoType(Object.IntProperty(cargo,"type"))));

      button = iGUI.CreateAndInitialiseRectangularInverseRadioButton( none, 0, 0, 
                                                                      button_width, 
                                                                      name,
                                                                      false );
      GUI.AddListBoxEntry(list_box, button);
   }   

}
      

// Display those items that the station is willing to purchase. This is for refrerence
// information only.
create_station_inventory_list()
{
   hwindow list_parent = GUI.Cast(Global.Handle("gt_etradesell_station_inv_parent"));
   hwindow list_base = GUI.Cast(Global.Handle("gt_etradesell_station_inv_base"));
   hwindow list_box;
   hwindow button;

   hcargo cargo;
   int i, count;
	int scrollbar_width = Global.Int( "GUI_scrollbar_width" );	// Scrollbar width

   int button_width, height, list_x, list_y;
   int pod_count, cargo_type;
   string name;
   list cargo_list;

   hship player = iShip.FindPlayerShip();

   // Remove the prior inventory list.
   if (none != list_base) {
      GUI.DeleteWindow(list_base);
   }

   list_base = GUI.CreateWindow(0, 
                                0,
                                GUI.WindowCanvasWidth( list_parent),
                                GUI.WindowCanvasHeight( list_parent),
                                list_parent);


   Global.CreateHandle("gt_etradesell_station_inv_base",GA_Write|GA_NoSave, list_base);

   // Set up the button and list sizes now.
   button_width = GUI.WindowCanvasWidth( list_base) - scrollbar_width;
   button_width -= 4;


   list_box = GUI.CreateListBox( 0, 
                                 0,
                                 button_width,
                                 GUI.WindowCanvasHeight( list_base),
                                 list_base,
                                 true,
                                 false);

	// Attach a scrollbar to the list box. from LFPlus.
	GUI.CreateVerticalScrollbar( 
		GUI.WindowCanvasWidth( list_base ) - scrollbar_width, 
		0,
		scrollbar_width, 
		GUI.WindowCanvasHeight( list_base ),
		list_base,
		list_box,
		Global.Float( "GUI_scrollbar_buttonratio" ),
		"" );

   
   cargo_list = List.FromSet(Global.Set("gt_etradesell_station_set"));
   //cargo_list = List.FromSet(tPodUtil.PlayerPodCargoSet(player, 50km));

   cargo_list = List.SortByStringProperty(cargo_list, "name");

   count = List.ItemCount(cargo_list);
   for (i=0;i<count;++i) {
      cargo = iCargo.Cast(List.GetNth(cargo_list,i));

      name = iCargo.Name(cargo);

      button = iGUI.CreateAndInitialiseRectangularInverseRadioButton( none, 0, 0, 
                                                                      button_width, 
                                                                      name,
                                                                      false );
      GUI.AddListBoxEntry(list_box, button);
   }   
}

set generate_trade_set(hisim trade_center)
{
   set cargo_set;

   cargo_set = tEconSmall.StationUsedCargo(trade_center);
   Set.Union(cargo_set, tEconSmall.StationSupplyCargo(trade_center));

   return cargo_set;
}

int index_from_name(list item_list, string property, string name)
{
   int total, i;
   hobject item;

   total = List.ItemCount(item_list);
   for (i=0;i<total;++i) {
      item = List.GetNth(item_list,i);
      if (name == Object.StringProperty(item,property)) {
         return i;
      }
   }

   return 0;
}


TradeWindow()
{
   hwindow lh_shady, rh_shady;
   hwindow trade_list_box;
   hwindow station_title;
   hwindow fac_title;

   hwindow splitter;
   hwindow top_splitter;
   hwindow bottom_splitter;
   hwindow button;
   hwindow list_parent;
   hwindow cargo_info;
   hwindow order_info;
   hwindow trade_center_info;

   set trade_set;
   hisim trade_center = iSim.Cast(Global.Handle("g_epic_trade_start_object"));
   hsim waypoint;
   string trade_center_string, trade_faction_name;
   hfaction faction;
   string title_font = Global.String( "GUI_subtitle_font" );

   int rwidth, rheight, rx, ry;

   int lwidth, lheight, mid_width;

   int lshady_width = 525;

   hfaction player_faction = iFaction.Find("Player");
   hfaction trade_faction = iSim.Faction(trade_center);
   float player_standing;



   debug Debug.PrintString("Purchase Window\n");


   ///***********************************
   // Non GUI interfacing and preperation here.

   // Clear prior purchase amounts from cargo objects.
   clear_inventory();

   clear_set();

   Global.Destroy("gt_etradesell_ordered_select");
   Global.Destroy("gt_etradesell_station_select");

   Global.CreateSet("gt_etradesell_station_set", GA_Write|GA_NoSave, generate_trade_set(trade_center));

   player_standing = iFaction.Feeling(trade_faction, player_faction);

   Global.CreateFloat("gt_etradesell_standing",GA_Write|GA_NoSave, player_standing);

   Global.CreateBool("gt_etradesell_legal",GA_Write|GA_NoSave, tsFaction.IsCriminal(trade_faction));

   set_price_adjust(tEconSmall.SellAdjustment(trade_center));
   ///***********************************
   // GUI setup here.


   // Set right hand shady bar width.
   lh_shady = iGUI.CreateWideShadyBar();


   // The right hand area is split into two halfs.
   // The inventory half, and the info half
   GUI.SetShadyBarWidth(lshady_width);
   



   rh_shady = iGUI.CreateShadyBarRight();
   
   tEpicGui.CreateTitle(lh_shady,Text.Field("gt_etradesell_title",FT_Text));
   tEpicGui.CreateSubtitle(lh_shady,Text.Field("gt_etradesell_subtitle",FT_Text));

   tEpicGui.CreateExitButton(lh_shady, 
                             Text.Field("gt_etradesell_exit",FT_Text), 
                             "tETradeSell.ExitScreen" );   


   //************ 
   //Setup the inventory half of the right hand side.

   lheight = GUI.WindowCanvasHeight(lh_shady);
   lheight = lheight - Global.Int("EpicGui_content_drop");
   lheight = lheight - Global.Int("EpicGui_content_footer");

   lwidth = lshady_width - 200;

   mid_width = lshady_width - lwidth;



     //**************
   // Create the second column of the left side window.
   // This column contains all the info screens and purchase buttons.

   splitter = GUI.CreateSplitterWindow( Global.Int("EpicGui_content_indent") + lwidth, 
                                        Global.Int("EpicGui_content_drop"),
                                        mid_width - Global.Int("EpicGui_content_indent"), 
                                        lheight,
                                        lh_shady,
                                        lheight/2,
                                        false);


   // This is the station and cargo info windows.
   top_splitter = GUI.SplitterWindowTopWindow(splitter);

   // Create the Trade Center Info Box, with name and faction information.

   trade_center_string = Text.Field(Sim.Name(trade_center), FT_Text);
   trade_center_string = String.Join(trade_center_string,"<p>");
   trade_center_string = String.Join(trade_center_string, 
                                     Text.Field(iFaction.Name(trade_faction), FT_Text));
   trade_center_string = String.Join(trade_center_string,"<p>");
   trade_center_string = String.Join(trade_center_string,
                                     Text.Field(tsFaction.Feeling2String(player_standing), FT_Text));
   trade_center_string = uString.Htmlize(trade_center_string);

   trade_center_info = GUI.CreateTextWindow( 0,
                                             0,
                                             GUI.WindowCanvasWidth( top_splitter),
                                             GUI.WindowCanvasHeight( top_splitter)/2,
                                             top_splitter ); 

   GUI.SetTextWindowString(trade_center_info, trade_center_string);

   // Create the Cargo Info Box, name and price of item.
   cargo_info = GUI.CreateTextWindow( 0,
                                      GUI.WindowCanvasHeight( top_splitter)/2,
                                      GUI.WindowCanvasWidth( top_splitter),
                                      GUI.WindowCanvasHeight( top_splitter)/2,
                                      top_splitter );   

   GUI.SetWindowFont( cargo_info, Global.String( "GUI_detail_font" ) );

   Global.CreateHandle("gt_etradesell_cargo_info",GA_Write|GA_NoSave, cargo_info);

   // Create the Offer Info Box, total order information.
   bottom_splitter = GUI.SplitterWindowBottomWindow(splitter);

   order_info = GUI.CreateTextWindow( 0,
                                      0,
                                      GUI.WindowCanvasWidth( bottom_splitter),
                                      GUI.WindowCanvasHeight( bottom_splitter)/2,
                                      bottom_splitter );   

   GUI.SetWindowFont( order_info, Global.String( "GUI_detail_font" ) );

   Global.CreateHandle("gt_etradesell_order_info",GA_Write|GA_NoSave, order_info);

   // Put up the order info area.
   update_order_info();


   button = create_border_button(0, 
                                 GUI.WindowCanvasHeight( bottom_splitter)-30,
                                 GUI.WindowCanvasWidth( bottom_splitter),
                                 30,
                                 bottom_splitter, 
                                 Text.Field("gt_etradesell_purchase_all",FT_Text), 
                                 "tETradeSell.OnSellPress");




   //*******************
   // Setup the cargo list boxes in the far left column.




   splitter = GUI.CreateSplitterWindow( Global.Int("EpicGui_content_indent"), 
                                        Global.Int("EpicGui_content_drop"),
                                        lwidth - Global.Int("EpicGui_content_indent"), 
                                        lheight,
                                        lh_shady,
                                        lheight/2,
                                        false);


   // This area is the station inventory for sale. 

   top_splitter = GUI.SplitterWindowTopWindow(splitter);

   
   // Set the list box title.
   station_title = iGUI.CreateAndInitialiseStaticWindow(0,
                                                        0,
                                                        GUI.WindowCanvasWidth( top_splitter),
                                                        20,
                                                        top_splitter,
                                                        title_font,
                                                        Text.Field("gt_etradesell_your_cargo_pods",FT_Text));

   // Remove text centering.
   GUI.SetWindowTextFormatting( station_title, false, 0);


   button = create_border_button(0, 
                                 GUI.WindowCanvasHeight( top_splitter) - 60,
                                 GUI.WindowCanvasWidth( top_splitter),
                                 30,
                                 top_splitter, 
                                 Text.Field("gt_etradesell_offer_item",FT_Text),
                                  "tETradeSell.OnOfferPress");

   button = create_border_button(0, 
                                 GUI.WindowCanvasHeight( top_splitter) - 30,
                                 GUI.WindowCanvasWidth( top_splitter),
                                 30,
                                 top_splitter, 
                                 Text.Field("gt_etradesell_offer_all_item",FT_Text),
                                  "tETradeSell.OnOfferAllPress");


   // The player pods that can be offered for sale.
   list_parent = GUI.CreateWindow(0,
                                  20,
                                  GUI.WindowCanvasWidth( top_splitter),
                                  GUI.WindowCanvasHeight( top_splitter) - 100,
                                  top_splitter);


   Global.CreateHandle("gt_etradesell_ppods_inv_parent",GA_Write|GA_NoSave, list_parent);


   create_player_pod_list();




   // This area is the items the player has ordered, but not yet purchased.
   bottom_splitter = GUI.SplitterWindowBottomWindow(splitter);

   
   // Set the list box title.
   station_title = iGUI.CreateAndInitialiseStaticWindow(0,
                                                        0,
                                                        GUI.WindowCanvasWidth( bottom_splitter),
                                                        20,
                                                        bottom_splitter,
                                                        title_font,
                                                        Text.Field("gt_etradesell_your_order",FT_Text));

   // Remove text centering.
   GUI.SetWindowTextFormatting( station_title, false, 0);


   button = create_border_button(0, 
                                 GUI.WindowCanvasHeight( bottom_splitter) - 60,
                                 GUI.WindowCanvasWidth( bottom_splitter),
                                 30,
                                 bottom_splitter, 
                                 Text.Field("gt_etradesell_remove_item",FT_Text),
                                 "tETradeSell.OnRemovePress");

   button = create_border_button(0, 
                                 GUI.WindowCanvasHeight( bottom_splitter) - 30,
                                 GUI.WindowCanvasWidth( bottom_splitter),
                                 30,
                                 bottom_splitter, 
                                 Text.Field("gt_etradesell_remove_all_item",FT_Text),
                                 "tETradeSell.OnRemoveAllPress");


   list_parent = GUI.CreateWindow(0,
                                  20,
                                  GUI.WindowCanvasWidth( bottom_splitter),
                                  GUI.WindowCanvasHeight( bottom_splitter) - 100,
                                  bottom_splitter);


   Global.CreateHandle("gt_etradesell_ordered_inv_parent",GA_Write|GA_NoSave, list_parent);








   ///****************************************
   // Create the player inventory information in the far right column.


   rheight = GUI.WindowCanvasHeight(rh_shady);
   rheight = rheight - Global.Int("EpicGui_content_drop");
   rheight = rheight - Global.Int("EpicGui_content_footer");
   rwidth = GUI.WindowCanvasWidth(rh_shady);


   button = create_border_button(Global.Int("EpicGui_content_indent"), 
                                 GUI.WindowCanvasHeight(rh_shady) - Global.Int("EpicGui_content_footer"),
                                 rwidth - Global.Int("EpicGui_content_indent"),
                                 30,
                                 rh_shady, 
                                 Text.Field("gt_etradesell_buy_screen",FT_Text),
                                 "tETradeSell.OnBuyScreen");
   

   splitter = GUI.CreateSplitterWindow( Global.Int("EpicGui_content_indent"), 
                                        Global.Int("EpicGui_content_drop"),
                                        rwidth - Global.Int("EpicGui_content_indent"), 
                                        rheight - 40,
                                        rh_shady,
                                        rheight/2,
                                        false);


   // This area is the players ship systems inventory
   top_splitter = GUI.SplitterWindowTopWindow(splitter);

   
   // Set the list box title.
   station_title = iGUI.CreateAndInitialiseStaticWindow(0,
                                                        0,
                                                        GUI.WindowCanvasWidth( top_splitter),
                                                        20,
                                                        top_splitter,
                                                        title_font,
                                                        Text.Field("gt_etradesell_your_equipment",FT_Text));


   // Create the base window for the player systems inventory box
   list_parent = GUI.CreateWindow(0,
                                  20,
                                  GUI.WindowCanvasWidth( top_splitter),
                                  GUI.WindowCanvasHeight( top_splitter) - 20,
                                  top_splitter);


   Global.CreateHandle("gt_etradesell_psystems_inv_parent",GA_Write|GA_NoSave, list_parent);
   
   create_player_systems_list();
   


   // This section is for the player owned cargo pods near the current station.
   // This area is unused for purchase, but is very important for the sales screen
   // later.
   bottom_splitter = GUI.SplitterWindowBottomWindow(splitter);

         // Set the list box title.
   station_title = iGUI.CreateAndInitialiseStaticWindow(0,
                                                        0,
                                                        GUI.WindowCanvasWidth( bottom_splitter),
                                                        20,
                                                        bottom_splitter,
                                                        title_font,
                                                        Text.Field("gt_etradesell_station_inventory",FT_Text));

   // Create the base window for the station inventory list box.
   list_parent = GUI.CreateWindow(0,
                                  20,
                                  GUI.WindowCanvasWidth( bottom_splitter),
                                  GUI.WindowCanvasHeight( bottom_splitter) - 20,
                                  bottom_splitter);


   Global.CreateHandle("gt_etradesell_station_inv_parent",GA_Write|GA_NoSave, list_parent);


   create_station_inventory_list();   

   /*
   // Place the station name

   station_title = iGUI.CreateAndInitialiseStaticWindow(Global.Int("EpicGui_content_indent"), 
                                                        Global.Int("EpicGui_content_drop"),
                                                        GUI.WindowCanvasWidth( lh_shady ) - Global.Int("EpicGui_content_indent"), 
                                                        20,
                                                        lh_shady,
                                                        title_font,
                                                        "Station Inventory");

   // Remove text centering.
   GUI.SetWindowTextFormatting( station_title, false, 0);


   // Place the faction name and standing
   faction = iSim.Faction(iSim.Cast(trade_center));
   fac_string = String.Join(iFaction.Name(faction),": ");
   fac_string = String.Join(fac_string,String.FromFloat(iFaction.Feeling(faction,iFaction.Find("Player"))));

   station_title = iGUI.CreateAndInitialiseStaticWindow(Global.Int("EpicGui_content_indent"), 
                                                        Global.Int("EpicGui_content_drop")+20,
                                                        GUI.WindowCanvasWidth( lh_shady )- 2*Global.Int("EpicGui_content_indent"), 
                                                        20,
                                                        lh_shady,
                                                        title_font,
                                                        fac_string );

   GUI.SetWindowTextFormatting( station_title, false, 0);
*/

}






/* 
THIS MOD IS NOT MADE, DISTRIBUTED, OR SUPPORTED BY INFOGRAMES
OR PARTICLE SYSTEMS LTD. 

ELEMENTS TM & (C) INFOGRAMES AND PARTICLE SYSTEMS LTD.
*/
