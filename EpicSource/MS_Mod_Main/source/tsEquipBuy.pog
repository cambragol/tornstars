//*******************************************************************************************/
//
// tsEquipBuy.pog
//
// This module allows the player to purchase equipment from stations and trade ships.
// 
// 
// 
//
// Dec 2007, jon freise
//******************************************************************************************/

package tsEquipBuy;

uses	Sim,
		iShip,
		iSim,
		Debug,
		Global,
		GUI,
		iDirector,
		iGame,
		iGUI,
		iHUD,
		iHabitat,
		iMapEntity,
		INIFile,
		Input,
		List,
		Object,
		String,
		Task,
		Text,
		iUtilities,
		iCargo,
		iInventory,
		iComms,
		Math,
      iDockPort,                
      CargoTypes,
		UniGUI,
      tStationEnum,
      tStation,
      tEpicGuiEnum,
      tEpicGui,
      tsFaction,
      tLProduction,
      tLInventory,
      tLTrade,
      tEconSmall,
      tEconUtil,
      tEpicMoney,
      tPodUtil,
      uString,
	  tSpewerOps;




provides TradeWindow,
         RunCheck,
         TradeObjectStart,
         StartScreen,
         OnStationPress,
         OnOrderPress,
         OnOrderAllPress,
         OnRemovePress,
         OnRemoveAllPress,
         OnOrderedItemPress,
         OnPurchasePress,
         OnSellScreen,
         SessionStart,
         SessionEnd,
         ExitScreen;


prototype create_ordered_inventory_list();

prototype create_station_inventory_list();

prototype create_player_systems_list();

prototype int index_from_name(list item_list, string property, string name);

prototype select_ordered_inventory(hcargo cargo);


RunCheck()
{
   // Only allow when the player is docked to a valid station
   // or trade ship.
   hmapentity station;
   hship player = iShip.FindPlayerShip();
   hfaction station_faction;

   bool allow_trade = true;

   station = iHabitat.Nearest(iMapEntity.SystemHabitats(), player);
   
   if (Sim.DistanceBetween(player, station) > 20km) {
      allow_trade = false;
   }

   // Don't allow the player to trade when the station is not
   // operating (destroyed or under construction). 
   if (tStation.Status(iHabitat.Cast(station)) != ESS_Normal) {
      allow_trade = false;
   }

   // If the player owns this station, do not allow trade.
   if (station_faction == tsFaction.PlayerFaction()){
      allow_trade = false;
   }

   // If no one owns this station (it was abandond) do not allow trade.
   if (station_faction == tsFaction.EmptyFaction()){
      allow_trade = false;
   }

   Global.SetBool("g_zz_ug_passme", allow_trade);
}

// Load the text files we wil need.
SessionStart()
{
   Text.Add("csv:/text/gt_equip_buy");
}


// Unload any text files.
SessionEnd()
{
   Text.Remove("csv:/text/gt_equip_buy");
}

//*******************************************************************************
// 

//*******************************************************************************


float int2float(int value)
{
   return value;
}


int float2int(float value)
{
   return value;
}




float price_adjust()
{
   return Global.Float("gt_equipbuy_price_adjust");
}


set_price_adjust(float adjust)
{
   Global.CreateFloat("gt_equipbuy_price_adjust", GA_Write|GA_NoSave, adjust);
}



ordered_set_add(hcargo cargo)
{
   set order_set;

   atomic {
      if (Global.Exists("gt_equipbuy_ordered_items")){
         order_set = Global.Set("gt_equipbuy_ordered_items");
         Set.Add(order_set, cargo);
         Global.SetSet("gt_equipbuy_ordered_items", order_set);
      }else {
         Set.Add(order_set, cargo);
         Global.CreateSet("gt_equipbuy_ordered_items",GA_Write|GA_NoSave, order_set);
      }
   }
}


ordered_set_remove(hcargo cargo)
{
   set order_set;
   int count;

   atomic {
      count = Object.IntProperty(cargo,"gt_etrade_amount");
      if (count <= 0) {
         order_set = Global.Set("gt_equipbuy_ordered_items");
         Set.Remove(order_set, cargo);
         Global.SetSet("gt_equipbuy_ordered_items", order_set);
      }
   }
}



set ordered_set()
{
   return Global.Set("gt_equipbuy_ordered_items");
}

clear_set()
{
   Global.Destroy("gt_equipbuy_ordered_items");
}



hwindow create_border_button(int x, int y, int width, int height, hwindow parent, string name, string function)
{
   hwindow button, border;
   int button_x, button_y, button_width, button_height;

   // We need to change the button size to make room for the border.
   button_x = x + 8;
   button_y = y + 8;

   button_width = width - 16;
   button_height = height - 16;

   button = GUI.CreateButton( button_x,
                              button_y,
                              button_width,
                              button_height,
                              parent);


   GUI.SetWindowTitle(button, name);

   GUI.SetWindowFont(button, Global.String("GUI_title_font"));

   GUI.SetButtonFunctionPog(button, function);

//   tEpicGui.SetStandardWindowColours(button);

   // Add the border
   border = GUI.CreateBorder(button);

   // we still return the button, because the function might need to change
   // or something. This is one of those no good choice decisions.

   tEpicGui.SetStandardStateColours(button);

   return button;
}


TradeObjectStart(hisim trade_object)
{

   if (tLTrade.IsTradeCenter(trade_object)) {
      Global.CreateHandle("g_epic_trade_start_object", GA_Write|GA_NoSave, trade_object);

      GUI.PopScreensTo("icSpaceFlightScreen");
      GUI.OverlayScreen("icPDAOverlayManager");
      iGUI.OverlayCustomScreen( "tsEquipBuy.TradeWindow" );
   }
}



StartScreen()
{
   hmapentity station;
   hship player = iShip.FindPlayerShip();

   station = iHabitat.Nearest(iMapEntity.SystemHabitats(), player);
   
   // We don't enforce this to allow the debug code to start when near a station.

//   if (iSim.IsDockedToStructure(player, station)) {

      Global.CreateHandle("g_epic_trade_start_object",GA_Write|GA_NoSave, station);

      GUI.PopScreensTo("icSpaceFlightScreen");
      GUI.OverlayScreen("icPDAOverlayManager");
      iGUI.OverlayCustomScreen( "tsEquipBuy.TradeWindow" );
//   }
}


ExitScreen()
{
   UniGUI.UniGUIRemoveScreen();
}


// This function builds a list of all the cargo items in the player
// inventory that are ship systems.
set systems_inventory()
{
   int total = CT_AdvancedHullMaterialRefit;
   int i, number, cargo_type;
   hcargo cargo;
   set all_cargo;

   for (i=CT_WasteBlocks;i<total;++i) {
      cargo = iCargo.Find(i);
      number = iInventory.NumberOfCargoType(i);

      if (number > 0) {
         if (iCargo.PlayerSystem(cargo)) {
            Set.Add(all_cargo, cargo);
         }
      }
   }
   return all_cargo;
}


clear_inventory()
{
   int total = CT_AdvancedHullMaterialRefit;
   int i;
   hcargo cargo;
   set all_cargo;

   for (i=CT_Invalid;i<total;++i) {
      cargo = iCargo.Find(i);

      Object.AddIntProperty(cargo,"gt_etrade_amount",0);
      Object.SetIntProperty(cargo,"gt_etrade_amount",0);
   }
}


update_cargo_info(hcargo cargo)
{
   hwindow cargo_info = GUI.Cast(Global.Handle("gt_equipbuy_cargo_info"));
   string text;
   int price, discount;

   // Price minus sellers hauling fee discount.
   price = float2int(price_adjust() * int2float(tEconSmall.CargoPrice(cargo)));

   if (tEconSmall.TradedItem(cargo)) {
      price -= tEconSmall.HaulFee(cargo);
   }

   if (price < 0) {
      price = 0;
   }

   text = String.Join(iCargo.Name(cargo),"<p>");


   text = String.Join(text,Text.Field("gt_equipbuy_price",FT_Text));
   text = String.Join(text,String.FormatInt(" %d<p>",price));

   text = String.Join(text,"Required Standing: ");
   text = String.Join(text, Text.Field( tsFaction.Level2String(tEconSmall.CargoStanding(cargo)),
                                        FT_Text));

   text = uString.Htmlize(text);

   GUI.SetTextWindowString( cargo_info, text);
}


// Should display the total price
update_order_info()
{
   hwindow order_info = GUI.Cast(Global.Handle("gt_equipbuy_order_info"));
   list player_order = List.FromSet(ordered_set());
   string text, price_string, funds_string;
   int total,i, price, pods, number, funds, value, pod_price;
   hcargo cargo;


   // Sum up total price of cargo purchased.
   price = 0;
   pods = 0;
   total = List.ItemCount(player_order);
   for (i=0;i<total;++i) {
      cargo = iCargo.Cast(List.GetNth(player_order,i));
      number = Object.IntProperty(cargo,"gt_etrade_amount");
      pods += number;
      pod_price = float2int(price_adjust()* int2float(tEconSmall.CargoPrice(cargo)));
      value = number * pod_price;
      // Sellers discount a local system hauling fee.
      if (tEconSmall.TradedItem(cargo)) {
         value = value - (number * tEconSmall.HaulFee(cargo));
      }

      if (value < 0) {
         value = 0;
      }

      price += value;
   }

   price_string = "";
   price_string = String.Join(price_string, Text.Field("gt_equipbuy_total_price",FT_Text));
   price_string = String.Join(price_string, String.FormatInt(" %d<p> ",price));

   funds = tEpicMoney.ShipAccount();
   funds_string = "";
   funds_string = String.Join(funds_string,Text.Field("gt_equipbuy_funds", FT_Text));
   funds_string = String.Join(funds_string, String.FormatInt(" %d", funds));


   text = "";
   text = String.Join(text, Text.Field("gt_equipbuy_current_order", FT_Text));
   text = String.Join(text, "<p>");
   text = String.Join(text, Text.Field("gt_equipbuy_total_pods",FT_Text));
   text = String.Join(text, String.FormatInt(" %d<p> ",pods));
   text = String.Join(text, price_string);
   text = String.Join(text, funds_string);

   text = uString.Htmlize(text);

   GUI.SetTextWindowString( order_info, text);
}


order_item(hcargo cargo, int amount)
{
   int count, pods_remaining;
   hisim trade_center = iSim.Cast(Global.Handle("g_epic_trade_start_object"));
   float player_standing = Global.Float("gt_equipbuy_standing");   
   float min_standing;

   // The player must meet the minimum standing requirements
   // to order a piece of cargo.
   min_standing = tEconSmall.CargoMinStanding(cargo);

   if (player_standing < min_standing) {
      iHUD.PlayAudioCue(AC_InvalidInput);
      return;
   }

   count = Object.IntProperty(cargo,"gt_etrade_amount");
   Object.SetIntProperty(cargo,"gt_etrade_amount", amount + count);

   ordered_set_add(cargo);

   create_ordered_inventory_list();

   create_station_inventory_list();

   update_order_info();
}


// When a new item is selected, update the cargo info box.
// Set the item as a global for the order button to find.
select_station_inventory(hcargo cargo)
{
   update_cargo_info(cargo);

   Global.CreateHandle("gt_equipbuy_station_select",GA_Write|GA_NoSave, cargo);
}

// Translates a selection press into an update call.
OnStationPress()
{
   hwindow button = GUI.FocusedWindow();
   hcargo cargo = iCargo.Cast(Object.HandleProperty(button,"gt_equipbuy_cargo"));

   select_station_inventory(cargo);
}


OnOrderPress()
{
   hcargo cargo = iCargo.Cast(Global.Handle("gt_equipbuy_station_select"));

   // Pressed before a cargo item was selected.
   if (none == cargo) {
      return;
   }

   // Select the last ordered item in the order list
   select_ordered_inventory(cargo);

   order_item(cargo, 1);
}

OnOrderAllPress()
{
   hcargo cargo = iCargo.Cast(Global.Handle("gt_equipbuy_station_select"));

   // Pressed before a cargo item was selected.
   if (none == cargo) {
      return;
   }

   // Select the last ordered item in the order list
   select_ordered_inventory(cargo);

   order_item(cargo, 10);
}



remove_item(hcargo cargo, bool remove_all)
{
   int count;

   if (remove_all) {
      count = 0;
   }else {
      count = Object.IntProperty(cargo,"gt_etrade_amount");
      --count;
      if (count < 0) {
         count = 0;
      }
   }

   Object.SetIntProperty(cargo,"gt_etrade_amount",count);

   ordered_set_remove(cargo);

   create_ordered_inventory_list();

   create_station_inventory_list();
}


select_ordered_inventory(hcargo cargo)
{

   update_cargo_info(cargo);

   Global.SetHandle("gt_equipbuy_ordered_select", cargo);
}


OnOrderedItemPress()
{
   hwindow button = GUI.FocusedWindow();
   hcargo cargo = iCargo.Cast(Object.HandleProperty(button,"gt_equipbuy_cargo"));


   select_ordered_inventory(cargo);
}


OnRemovePress()
{
   hcargo cargo = iCargo.Cast(Global.Handle("gt_equipbuy_ordered_select"));

   // Nothing selected yet.
   if (none == cargo) {
      return;
   }

   remove_item(cargo, false);

   update_order_info();
}


OnRemoveAllPress()
{
   hcargo cargo = iCargo.Cast(Global.Handle("gt_equipbuy_ordered_select"));

   // Nothing selected yet.
   if (none == cargo) {
      return;
   }

   remove_item(cargo, true);

   update_order_info();
}


OnPurchasePress()
{
   hship player = iShip.FindPlayerShip();
   hsim waypoint;
   hisim pod;
   list player_order = List.FromSet(ordered_set());
   string text, price_string, funds_string;
   int total,i, j, price, pods, number, funds, value, pod_price;
   hcargo cargo;
   hisim trade_center = iSim.Cast(Global.Handle("g_epic_trade_start_object"));

   bool spewer = iHabitat.HasSpewer(iHabitat.Cast(trade_center));
   hship docked_ship;
   int pod_order_size = 0;
   set pods_to_spew;

   // Original (non-spewer) checks

   if (List.IsEmpty(player_order)) {
      return;
   }

   // If the player is too far, refuse sale.
   if (20km < Sim.DistanceBetween(player, trade_center)){
      iHUD.PlayAudioCue(AC_InvalidInput);
      return;
   }


   // Sum up total price of cargo purchased.
   price = 0;
   pods = 0;
   total = List.ItemCount(player_order);
   for (i=0;i<total;++i) {
      cargo = iCargo.Cast(List.GetNth(player_order,i));
      number = Object.IntProperty(cargo,"gt_etrade_amount");
      pods += number;
      pod_price = float2int(price_adjust()* int2float(tEconSmall.CargoPrice(cargo)));
      value = number * pod_price;
      if (tEconSmall.TradedItem(cargo)) {
         value = value - (number * tEconSmall.HaulFee(cargo));
      }

      if (value < 0) {
         value = 0;
      }

      price += value;
   }

   // Check player has the funds. If not, beep and leave this screen up.
   if (price > tEpicMoney.ShipAccount()) {
      iHUD.PlayAudioCue(AC_InvalidInput);
      return;
   }

   // If the player has the money:
   // Deduct the purchase price.
   tEpicMoney.ChangeShipAccount(price*-1);

   total = List.ItemCount(player_order);

   for (i=0;i<total;++i) {
      cargo = iCargo.Cast(List.GetNth(player_order,i));
      pods = Object.IntProperty(cargo,"gt_etrade_amount");
      
      iInventory.Add(Object.IntProperty(cargo,"type"), pods);

      // Clear the amount for next purchase.
      Object.SetIntProperty(cargo,"gt_etrade_amount",0);
   }

   Sim.Destroy(waypoint);

   clear_set();

   create_ordered_inventory_list();

   update_order_info();

   create_station_inventory_list();

   create_player_systems_list();

}



OnSellScreen()
{
   GUI.RemoveOverlaysAfter("icSpaceFlightScreenOverlay");
   GUI.PopScreensTo("icSpaceFlightScreen");
   GUI.OverlayScreen("icPDAOverlayManager");
   iGUI.OverlayCustomScreen( "tsEquipSell.TradeWindow" );
}



create_ordered_inventory_list()
{
   hwindow list_parent = GUI.Cast(Global.Handle("gt_equipbuy_ordered_inv_parent"));
   hwindow list_base = GUI.Cast(Global.Handle("gt_equipbuy_ordered_inv_base"));
   hwindow list_box;
   hwindow button;


   hcargo cargo;
   hcargo selected_cargo;
   int i, count;
   int selected_button;

	int scrollbar_width = Global.Int( "GUI_scrollbar_width" );	// Scrollbar width

   int button_width, height, list_x, list_y;

   string name;
   list cargo_list = List.FromSet(ordered_set());


   // Remove the prior inventory list.
   if (none != list_base) {
      GUI.DeleteWindow(list_base);
   }

   list_base = GUI.CreateWindow(0, 
                                0,
                                GUI.WindowCanvasWidth( list_parent),
                                GUI.WindowCanvasHeight( list_parent),
                                list_parent);

   Global.CreateHandle("gt_equipbuy_ordered_inv_base",GA_Write|GA_NoSave, list_base);


   // Set up the button and list sizes now.
   button_width = GUI.WindowCanvasWidth( list_base) - scrollbar_width;
   button_width -= 4;


   list_box = GUI.CreateListBox( 0, 
                                 0,
                                 button_width,
                                 GUI.WindowCanvasHeight( list_base),
                                 list_base,
                                 true,
                                 false);

	// Attach a scrollbar to the list box. from LFPlus.
	GUI.CreateVerticalScrollbar( 
		GUI.WindowCanvasWidth( list_base ) - scrollbar_width, 
		0,
		scrollbar_width, 
		GUI.WindowCanvasHeight( list_base ),
		list_base,
		list_box,
		Global.Float( "GUI_scrollbar_buttonratio" ),
		"" );


   cargo_list = List.SortByStringProperty(cargo_list, "name");

   
   // Find the button that is going to match the selected inventory item.
   selected_cargo = iCargo.Cast(Global.Handle("gt_equipbuy_ordered_select"));
   selected_button = 0;

   count = List.ItemCount(cargo_list);
   for (i=0;i<count;++i) {
      cargo = iCargo.Cast(List.GetNth(cargo_list,i));

      name = String.Join(iCargo.Name(cargo),
                         String.FormatInt(" %d",Object.IntProperty(cargo,"gt_etrade_amount")));

      button = iGUI.CreateAndInitialiseRectangularInverseRadioButton( none, 0, 0, 
                                                                      button_width, 
                                                                      name,
                                                                      false );



      // We will need to be able to look up the cargo 
      // for buying and selling later.
      Object.AddHandleProperty(button,"gt_equipbuy_cargo",cargo);

      GUI.SetInputOverrideFunctions( button,
											"", 
											"",
											"", 
											"", 
											"", 
											"",
											"tsEquipBuy.OnOrderedItemPress",
											"",
											"" );

      GUI.AddListBoxEntry(list_box, button);

      if (cargo == selected_cargo) {
         selected_button = i;
      }
   }   

   GUI.SelectListBoxEntry(list_box, selected_button);
}


create_station_inventory_list()
{
   hwindow list_parent = GUI.Cast(Global.Handle("gt_equipbuy_station_inv_parent"));
   hwindow list_base = GUI.Cast(Global.Handle("gt_equipbuy_station_inv_base"));
   hwindow list_box;
   hwindow button;

   hcargo cargo;
   int i, count, index;
	int scrollbar_width = Global.Int( "GUI_scrollbar_width" );	// Scrollbar width
   int pods_remaining;
   int button_width, height, list_x, list_y;

   string name;
   list cargo_list;

   hisim trade_center = iSim.Cast(Global.Handle("g_epic_trade_start_object"));
   float player_standing = Global.Float("gt_equipbuy_standing");
   float min_standing;


   // Remove the prior inventory list.
   if (none != list_base) {
      GUI.DeleteWindow(list_base);
   }

   list_base = GUI.CreateWindow(0, 
                                0,
                                GUI.WindowCanvasWidth( list_parent),
                                GUI.WindowCanvasHeight( list_parent),
                                list_parent);


   Global.CreateHandle("gt_equipbuy_station_inv_base",GA_Write|GA_NoSave, list_base);

   // Set up the button and list sizes now.
   button_width = GUI.WindowCanvasWidth( list_base) - scrollbar_width;
   button_width -= 4;


   list_box = GUI.CreateListBox( 0, 
                                 0,
                                 button_width,
                                 GUI.WindowCanvasHeight( list_base),
                                 list_base,
                                 true,
                                 false);

	// Attach a scrollbar to the list box. from LFPlus.
	GUI.CreateVerticalScrollbar( 
		GUI.WindowCanvasWidth( list_base ) - scrollbar_width, 
		0,
		scrollbar_width, 
		GUI.WindowCanvasHeight( list_base ),
		list_base,
		list_box,
		Global.Float( "GUI_scrollbar_buttonratio" ),
		"" );


   cargo_list = List.FromSet(Global.Set("gt_equipbuy_station_set"));

   cargo_list = List.SortByStringProperty(cargo_list, "name");

   count = List.ItemCount(cargo_list);
   for (i=0;i<count;++i) {
      cargo = iCargo.Cast(List.GetNth(cargo_list,i));

      min_standing = tEconSmall.CargoMinStanding(cargo);

      name = iCargo.Name(cargo);
      name = String.Join(name,"  ");

      if (player_standing < min_standing) {
         name = String.Join(name,Text.Field("gt_equipbuy_deny",FT_Text));
      }

      button = iGUI.CreateAndInitialiseRectangularInverseRadioButton( none, 0, 0, 
                                                                      button_width, 
                                                                      name,
                                                                      false );
      // We will need to be able to look up the cargo 
      // for buying and selling later.
      Object.AddHandleProperty(button,"gt_equipbuy_cargo",cargo);

      GUI.SetInputOverrideFunctions( button,
											"", 
											"",
											"", 
											"", 
											"", 
											"",
											"tsEquipBuy.OnStationPress",
											"",
											"" );

      GUI.AddListBoxEntry(list_box, button);
   }   

   // We need to pick an entry to highlight. 

   cargo = iCargo.Cast(Global.Handle("gt_equipbuy_station_select"));
   if (none == cargo) {
      // If this is the very first time this list is created, we just choose the first item.
      // Then we update the cargo info to match.
      index = 0;
      cargo = iCargo.Cast(List.Head(cargo_list));
      select_station_inventory(cargo);
   }else {
      index = index_from_name(cargo_list, "name", iCargo.Name(cargo));
   }

   GUI.SelectListBoxEntry(list_box, index);

}


create_player_systems_list()
{
   hwindow list_parent = GUI.Cast(Global.Handle("gt_equipbuy_psystems_inv_parent"));
   hwindow list_base = GUI.Cast(Global.Handle("gt_equipbuy_psystems_inv_base"));
   hwindow list_box;
   hwindow button;

   hcargo cargo;
   int i, count;
	int scrollbar_width = Global.Int( "GUI_scrollbar_width" );	// Scrollbar width

   int button_width, height, list_x, list_y;

   string name;
   list cargo_list;

   // Remove the prior inventory list.
   if (none != list_base) {
      GUI.DeleteWindow(list_base);
   }

   list_base = GUI.CreateWindow(0, 
                                0,
                                GUI.WindowCanvasWidth( list_parent),
                                GUI.WindowCanvasHeight( list_parent),
                                list_parent);


   Global.CreateHandle("gt_equipbuy_psystems_inv_base",GA_Write|GA_NoSave, list_base);

   // Set up the button and list sizes now.
   button_width = GUI.WindowCanvasWidth( list_base) - scrollbar_width;
   button_width -= 4;


   list_box = GUI.CreateListBox( 0, 
                                 0,
                                 button_width,
                                 GUI.WindowCanvasHeight( list_base),
                                 list_base,
                                 true,
                                 false);

	// Attach a scrollbar to the list box. from LFPlus.
	GUI.CreateVerticalScrollbar( 
		GUI.WindowCanvasWidth( list_base ) - scrollbar_width, 
		0,
		scrollbar_width, 
		GUI.WindowCanvasHeight( list_base ),
		list_base,
		list_box,
		Global.Float( "GUI_scrollbar_buttonratio" ),
		"" );


   cargo_list = List.FromSet(systems_inventory());

   cargo_list = List.SortByStringProperty(cargo_list, "name");

   count = List.ItemCount(cargo_list);
   for (i=0;i<count;++i) {
      cargo = iCargo.Cast(List.GetNth(cargo_list,i));

      name = String.Join(iCargo.Name(cargo),
                         String.FormatInt(" %d",
                                          iInventory.NumberOfCargoType(Object.IntProperty(cargo,"type"))));

      button = iGUI.CreateAndInitialiseRectangularInverseRadioButton( none, 0, 0, 
                                                                      button_width, 
                                                                      name,
                                                                      false );
      GUI.AddListBoxEntry(list_box, button);
   }   

}
      


set generate_trade_set(hisim trade_center)
{
   int count, i;
   set cargo_set;
   list cargo_list;
   hcargo cargo;

   cargo_list = List.FromSet(tEconSmall.StationProducedCargo(trade_center));

   // Filter out the non-equipment and non-ammo.
   count = List.ItemCount(cargo_list);
   for (i=0;i<count;++i) {
      cargo = iCargo.Cast(List.GetNth(cargo_list,i));

      if (iCargo.PlayerSystem(cargo)) {
         Set.Add(cargo_set, cargo);
      }
   }

   return cargo_set;
}

int index_from_name(list item_list, string property, string name)
{
   int total, i;
   hobject item;

   total = List.ItemCount(item_list);
   for (i=0;i<total;++i) {
      item = List.GetNth(item_list,i);
      if (name == Object.StringProperty(item,property)) {
         return i;
      }
   }

   return 0;
}


TradeWindow()
{
   hwindow lh_shady, rh_shady;
   hwindow trade_list_box;
   hwindow station_title;
   hwindow fac_title;

   hwindow splitter;
   hwindow top_splitter;
   hwindow bottom_splitter;
   hwindow button;
   hwindow list_parent;
   hwindow cargo_info;
   hwindow order_info;
   hwindow trade_center_info;

   set trade_set;
   hisim trade_center = iSim.Cast(Global.Handle("g_epic_trade_start_object"));
   hsim waypoint;
   string trade_center_string;

   string title_font = Global.String( "GUI_subtitle_font" );

   int rwidth, rheight, rx, ry;

   int lwidth, lheight, mid_width;

   int lshady_width = 525;

   hfaction player_faction = iFaction.Find("Player");
   hfaction trade_faction = iSim.Faction(trade_center);
   float player_standing;



   debug Debug.PrintString("Purchase Window\n");


   ///***********************************
   // Non GUI interfacing and preperation here.

   // Clear prior purchase amounts from cargo objects.
   clear_inventory();

   clear_set();

   Global.Destroy("gt_equipbuy_ordered_select");
   Global.Destroy("gt_equipbuy_station_select");

   Global.CreateSet("gt_equipbuy_station_set", GA_Write|GA_NoSave, generate_trade_set(trade_center));

   player_standing = iFaction.Feeling(trade_faction, player_faction);

   Global.CreateFloat("gt_equipbuy_standing",GA_Write|GA_NoSave, player_standing);

   set_price_adjust(tEconSmall.PurchaseAdjustment(trade_center));


   Global.CreateHandle("gt_equipbuy_ordered_select",GA_Write|GA_NoSave, none);

   ///***********************************
   // GUI setup here.


   // Set right hand shady bar width.
   lh_shady = iGUI.CreateWideShadyBar();


   // The right hand area is split into two halfs.
   // The inventory half, and the info half
   GUI.SetShadyBarWidth(lshady_width);
   



   rh_shady = iGUI.CreateShadyBarRight();
   
   tEpicGui.CreateTitle(lh_shady,Text.Field("gt_equipbuy_title",FT_Text));
   tEpicGui.CreateSubtitle(lh_shady,Text.Field("gt_equipbuy_subtitle",FT_Text));

   tEpicGui.CreateExitButton(lh_shady, 
                             Text.Field("gt_equipbuy_exit",FT_Text), 
                             "tsEquipBuy.ExitScreen" );   


   //************ 
   //Setup the inventory half of the right hand side.

   lheight = GUI.WindowCanvasHeight(lh_shady);
   lheight = lheight - Global.Int("EpicGui_content_drop");
   lheight = lheight - Global.Int("EpicGui_content_footer");

   lwidth = lshady_width - 200;
   
   mid_width = lshady_width - lwidth;




     //**************
   // Create the second column of the left side window.
   // This column contains all the info screens and purchase buttons.

   splitter = GUI.CreateSplitterWindow( Global.Int("EpicGui_content_indent") + lwidth, 
                                        Global.Int("EpicGui_content_drop"),
                                        mid_width - Global.Int("EpicGui_content_indent"), 
                                        lheight,
                                        lh_shady,
                                        lheight/2,
                                        false);


   // This is the station and cargo info windows.
   top_splitter = GUI.SplitterWindowTopWindow(splitter);


   // Create the Trade Center Info Box, with name and faction information.

   trade_center_string = Text.Field(Sim.Name(trade_center), FT_Text);
   trade_center_string = String.Join(trade_center_string,"<p>");
   trade_center_string = String.Join(trade_center_string, 
                                     Text.Field(iFaction.Name(trade_faction), FT_Text));
   trade_center_string = String.Join(trade_center_string,"<p>");
   trade_center_string = String.Join(trade_center_string, 
                                     Text.Field(tsFaction.Feeling2String(player_standing), FT_Text));
   trade_center_string = uString.Htmlize(trade_center_string);

   trade_center_info = GUI.CreateTextWindow( 0,
                                             0,
                                             GUI.WindowCanvasWidth( top_splitter),
                                             GUI.WindowCanvasHeight( top_splitter)/2,
                                             top_splitter ); 

   GUI.SetTextWindowString(trade_center_info, trade_center_string);


   // Create the Cargo Info Box, name and price of item.
   cargo_info = GUI.CreateTextWindow( 0,
                                      GUI.WindowCanvasHeight( top_splitter)/2,
                                      GUI.WindowCanvasWidth( top_splitter),
                                      GUI.WindowCanvasHeight( top_splitter)/2,
                                      top_splitter );   

   GUI.SetWindowFont( cargo_info, Global.String( "GUI_detail_font" ) );

   Global.CreateHandle("gt_equipbuy_cargo_info",GA_Write|GA_NoSave, cargo_info);

   // Create the Order Info Box, total order information.
   bottom_splitter = GUI.SplitterWindowBottomWindow(splitter);

   order_info = GUI.CreateTextWindow( 0,
                                      0,
                                      GUI.WindowCanvasWidth( bottom_splitter),
                                      GUI.WindowCanvasHeight( bottom_splitter)/2,
                                      bottom_splitter );   

   GUI.SetWindowFont( order_info, Global.String( "GUI_detail_font" ) );

   Global.CreateHandle("gt_equipbuy_order_info",GA_Write|GA_NoSave, order_info);

   // Put up the order info area.
   update_order_info();


   button = create_border_button(0, 
                                 GUI.WindowCanvasHeight( bottom_splitter)-30,
                                 GUI.WindowCanvasWidth( bottom_splitter),
                                 30,
                                 bottom_splitter, 
                                 Text.Field("gt_equipbuy_purchase_all",FT_Text), 
                                 "tsEquipBuy.OnPurchasePress");

   //*******************
   // Setup the cargo list boxes in the far left column.

   splitter = GUI.CreateSplitterWindow( Global.Int("EpicGui_content_indent"), 
                                        Global.Int("EpicGui_content_drop"),
                                        lwidth - Global.Int("EpicGui_content_indent"), 
                                        lheight,
                                        lh_shady,
                                        lheight/2,
                                        false);


   // This area is the station inventory for sale. 

   top_splitter = GUI.SplitterWindowTopWindow(splitter);

   
   // Set the list box title.
   station_title = iGUI.CreateAndInitialiseStaticWindow(0,
                                                        0,
                                                        GUI.WindowCanvasWidth( top_splitter),
                                                        20,
                                                        top_splitter,
                                                        title_font,
                                                        Text.Field("gt_equipbuy_station_inventory",FT_Text));

   // Remove text centering.
   GUI.SetWindowTextFormatting( station_title, false, 0);


   button = create_border_button(0, 
                                 GUI.WindowCanvasHeight( top_splitter) - 60,
                                 GUI.WindowCanvasWidth( top_splitter),
                                 30,
                                 top_splitter, 
                                 Text.Field("gt_equipbuy_order_item",FT_Text),
                                  "tsEquipBuy.OnOrderPress");

   button = create_border_button(0, 
                                 GUI.WindowCanvasHeight( top_splitter) - 30,
                                 GUI.WindowCanvasWidth( top_splitter),
                                 30,
                                 top_splitter, 
                                 Text.Field("gt_equipbuy_order_all_item",FT_Text),
                                  "tsEquipBuy.OnOrderAllPress");

   // Create the base window for the station inventory list box.
   list_parent = GUI.CreateWindow(0,
                                  20,
                                  GUI.WindowCanvasWidth( top_splitter),
                                  GUI.WindowCanvasHeight( top_splitter) - 100,
                                  top_splitter);


   Global.CreateHandle("gt_equipbuy_station_inv_parent",GA_Write|GA_NoSave, list_parent);


   create_station_inventory_list();


   // This area is the items the player has ordered, but not yet purchased.
   bottom_splitter = GUI.SplitterWindowBottomWindow(splitter);

   
   // Set the list box title.
   station_title = iGUI.CreateAndInitialiseStaticWindow(0,
                                                        0,
                                                        GUI.WindowCanvasWidth( bottom_splitter),
                                                        20,
                                                        bottom_splitter,
                                                        title_font,
                                                        Text.Field("gt_equipbuy_your_order",FT_Text));

   // Remove text centering.
   GUI.SetWindowTextFormatting( station_title, false, 0);


   button = create_border_button(0, 
                                 GUI.WindowCanvasHeight( bottom_splitter) - 60,
                                 GUI.WindowCanvasWidth( bottom_splitter),
                                 30,
                                 bottom_splitter, 
                                 Text.Field("gt_equipbuy_remove_item",FT_Text),
                                 "tsEquipBuy.OnRemovePress");

   button = create_border_button(0, 
                                 GUI.WindowCanvasHeight( bottom_splitter) - 30,
                                 GUI.WindowCanvasWidth( bottom_splitter),
                                 30,
                                 bottom_splitter, 
                                 Text.Field("gt_equipbuy_all_remove",FT_Text),
                                 "tsEquipBuy.OnRemoveAllPress");

   // Create the base window for the station inventory list box.
   list_parent = GUI.CreateWindow(0,
                                  20,
                                  GUI.WindowCanvasWidth( bottom_splitter),
                                  GUI.WindowCanvasHeight( bottom_splitter) - 100,
                                  bottom_splitter);


   Global.CreateHandle("gt_equipbuy_ordered_inv_parent",GA_Write|GA_NoSave, list_parent);


   ///****************************************
   // Create the player inventory information in the far right column.


   rheight = GUI.WindowCanvasHeight(rh_shady);
   rheight = rheight - Global.Int("EpicGui_content_drop");
   rheight = rheight - Global.Int("EpicGui_content_footer");
   rwidth = GUI.WindowCanvasWidth(rh_shady);

   // This button acts to replace the "back" button on the 

   button = create_border_button(Global.Int("EpicGui_content_indent"), 
                                 GUI.WindowCanvasHeight(rh_shady) - Global.Int("EpicGui_content_footer"),
                                 rwidth - Global.Int("EpicGui_content_indent"),
                                 30,
                                 rh_shady, 
                                 Text.Field("gt_equipbuy_sell_screen",FT_Text),
                                 "tsEquipBuy.OnSellScreen");
   

   splitter = GUI.CreateSplitterWindow( Global.Int("EpicGui_content_indent"), 
                                        Global.Int("EpicGui_content_drop"),
                                        rwidth - Global.Int("EpicGui_content_indent"), 
                                        rheight - 40,
                                        rh_shady,
                                        rheight/2,
                                        false);


   // This area is the players ship systems inventory
   top_splitter = GUI.SplitterWindowTopWindow(splitter);

   
   // Set the list box title.
   station_title = iGUI.CreateAndInitialiseStaticWindow(0,
                                                        0,
                                                        GUI.WindowCanvasWidth( top_splitter),
                                                        20,
                                                        top_splitter,
                                                        title_font,
                                                        Text.Field("gt_equipbuy_your_equipment",FT_Text));


   // Create the base window for the player systems inventory box
   list_parent = GUI.CreateWindow(0,
                                  20,
                                  GUI.WindowCanvasWidth( top_splitter),
                                  GUI.WindowCanvasHeight( top_splitter) - 20,
                                  top_splitter);


   Global.CreateHandle("gt_equipbuy_psystems_inv_parent",GA_Write|GA_NoSave, list_parent);
   
   create_player_systems_list();
   
}


/* 
THIS MOD IS NOT MADE, DISTRIBUTED, OR SUPPORTED BY INFOGRAMES
OR PARTICLE SYSTEMS LTD. 

ELEMENTS TM & (C) INFOGRAMES AND PARTICLE SYSTEMS LTD.
*/
