//*******************************************************************************************/
//
// tsFaction
//
// This code modifies the games basic factions to support a little extra information
// such as fleet style, known to player, and an html description. 
// 
// The code is trimmed down from the much larger tEpicFaction.pog
//
// May 2005, Jon Freise
//******************************************************************************************/

package tsFaction;

uses iShip, Global, Object, Sim, Input, iMapEntity, Math, iAI, Task, Debug, iFaction, iSim, iFactionScript, iComms, INIFile, iUtilities, iPilotSetup,
iConversation, iFormation, Group, Text, iEmail, State, iTrafficCreation, iRangeCheck,iRemotePilot, iRegion, iMissionTracker, iWingmen,
iCargoScript, iShipCreation, iHUD, iScriptedOrders, iStation, iStartSystem, iObjectives, iMultiplay, iCutsceneUtilities,
iDirector, iEscort, iLagrangePoint, iMusic, iGame, Stream, iBackToBase, iDeathScript,
   tsFactionEnum;




provides Init,
         NewGame,
         SessionStart,
         SaveGame,

         SetDescription,
         Description,

         SetFleetStyle,
         FleetStyle,

         SetSpeechStyle,
         SpeechStyle,

         SetKnown,
         IsKnown,

         Type,
         SetType,

         SetEName,
         EName,
         EFind,

         CurrentAction,
         SetCurrentAction,
         AdjustCurrentAction,

         PastAction,
         SetPastAction,
         
         DefaultFeeling,
         SetDefaultFeeling,

         IsPublic,
         IsGovernment,
         IsCriminal,
         IsIndependent,
    
         PlayerFaction,
         EmptyFaction,

         CopyFeelings,

         Reset,
   
         String2Type,
         String2Level,
         String2LowerLevel,
         Level2String,
         Feeling2String,
         Type2String,
         Type2LowerLevel,

         AddStation,
         Stations;
         




prototype save_properties();
prototype restore_properties(bool read_file);
prototype read_factions(string file_name);

prototype string EName(hfaction faction);

prototype restore_feelings();
prototype save_feelings();



eFeelingType String2Type(string level)
{
   if ("FT_Hate" == level){
      return FT_Hate;
   }else if ("FT_Dislike" == level){ 
      return FT_Dislike;
   }else if ("FT_Neutral" == level){
      return FT_Neutral;
   }else if ("FT_Like" == level){
      return FT_Like;
   }else if ("FT_Love" == level){
      return FT_Love;
   }

   debug{
       Debug.PrintString("Error: tsFaction.String2Type invalid string ");
       Debug.PrintString(level);
       Debug.PrintString("\n");
   }
   return FT_Neutral;
}

float String2Level(string level)
{
   if ("FT_Hate" == level){
      return iFaction.FeelingLevel(FT_Hate);
   }else if ("FT_Dislike" == level){ 
      return iFaction.FeelingLevel(FT_Dislike);
   }else if ("FT_Neutral" == level){
      return iFaction.FeelingLevel(FT_Neutral);
   }else if ("FT_Like" == level){
      return iFaction.FeelingLevel(FT_Like);
   }else if ("FT_Love" == level){
      return iFaction.FeelingLevel(FT_Love);
   }

   debug{
       Debug.PrintString("Error: tsFaction.String2Level invalid string ");
       Debug.PrintString(level);
       Debug.PrintString("\n");
   }
   return iFaction.FeelingLevel(FT_Neutral);
}


float String2LowerLevel(string level)
{
   if ("FT_Hate" == level){
      return -1.0;
   }else if ("FT_Dislike" == level){ 
      return -0.6;
   }else if ("FT_Neutral" == level){
      return -0.2;
   }else if ("FT_Like" == level){
      return 0.2;
   }else if ("FT_Love" == level){
      return 0.6;
   }

   debug{
       Debug.PrintString("Error: tsFaction.String2LowerLevel invalid string ");
       Debug.PrintString(level);
       Debug.PrintString("\n");
   }
   return iFaction.FeelingLevel(FT_Neutral);
}


string Type2String(int faction_type)
{

   if (FCT_Navy & faction_type ) {
      return "FCT_Navy";
   }else if (FCT_Pirate & faction_type) {
      return "FCT_Pirate";
   }else if (FCT_Mercenary & faction_type) {
      return "FCT_Mercenary";
   }else if (FCT_Rebel & faction_type) {
      return "FCT_Rebel";
   }else if (FCT_MegaCorp & faction_type) {
      return "FCT_MegaCorp";
   }else if (FCT_BaseCulture & faction_type) {
      return "FCT_BaseCulture";
   }else if (FCT_Independent & faction_type) {
      return "FCT_Independent";
   }

   return "FCT_Invalid";
}



float Type2LowerLevel(eFeelingType feeling_type)
{
   switch (feeling_type) {
   case FT_Hate:
      return -1.0;
      break;
   case FT_Dislike:
      return -0.6;
      break;
   case FT_Neutral:
      return -0.2;
      break;
   case FT_Like:
      return 0.2;
      break;
   case FT_Love:
      return 0.6;
      break;
   default:
      return 0.0;
      break;
   }
   return 0.0;
}


// Call this on enter space. The first time, it will create the factions
// and setup the parameters.
Init()
{
   list empty_list;

   debug Debug.PrintString("tsFaction.Init\n");


   if (!Global.Bool("tsfaction_restore_done") || !Global.Bool("tsfaction_new_game_done")) {

      restore_properties(!Global.Bool("tsfaction_new_game_done"));

      Global.CreateBool("tsfaction_restore_done",GA_Write|GA_NoSave, true);      
      Global.CreateBool("tsfaction_new_game_done", GA_Write, true);
   }

   // Create short cut to player faction handle.
   Global.CreateHandle("g_epic_faction_player_faction",GA_Write|GA_NoSave, 
                       iFaction.Find("Player"));

   // Create a short cut to the empty faction. It gets used almost
   // as much as the player faction.
   Global.CreateHandle("g_epic_faction_empty_faction",GA_Write|GA_NoSave, 
                       iFaction.Find("Neutral"));
}

NewGame()
{
      Global.CreateBool("tsfaction_new_game", GA_Write, false);
}

SessionStart()
{
   Global.CreateBool("tsfaction_restore_done", GA_Write|GA_NoSave, false);
}
 
SaveGame()
{
   debug Debug.PrintString("tsFaction.SaveGame\n");

   save_properties();

}


/*
   Stations get special handling. The meta game make use of the
   lists of all stations belonging to a faction. So we track
   when stations are added or removed from a faction.

*/

AddStation(hhabitat station, hfaction faction)
{
   list station_list;
   hfaction prior_faction;

   // Pull the station out of the prior factions list.
   prior_faction = iSim.Faction(iSim.Cast(station));

   if (prior_faction != none) {
      if (Object.PropertyExists(prior_faction,"station_list")) {
         atomic {
            station_list = Object.ListProperty(prior_faction, "station_list");
            List.Remove(station_list, station);
            Object.SetListProperty(prior_faction,"station_list",station_list);
         }
      }
   }

   iSim.SetFaction(iSim.Cast(station), faction);

   // Add it to the new factions list.
   if (Object.PropertyExists(faction,"station_list")) {
      atomic {
         station_list = Object.ListProperty(faction, "station_list");
         List.AddTail(station_list, station);
         Object.SetListProperty(faction,"station_list",station_list);
      }
   }else {
      List.RemoveAll(station_list);
      List.AddTail(station_list, station);
      Object.AddListProperty(faction,"station_list",station_list);
   }
}



list Stations(hfaction faction)
{
   return Object.ListProperty(faction, "station_list");
}


// Return the short cut to the player faction. Speeds code all over.
hfaction PlayerFaction()
{
   return iFaction.Cast(Global.Handle("g_epic_faction_player_faction"));
}

hfaction EmptyFaction()
{
   return iFaction.Cast(Global.Handle("g_epic_faction_empty_faction"));
}


string Level2String(eFeelingType feeling_type)
{
   switch (feeling_type) {
   case FT_Love:
      return "FT_Love";
      break;
   case FT_Like:
      return "FT_Like";
      break;

   case FT_Neutral:
      return "FT_Neutral";
      break;
   
   case FT_Dislike:
      return "FT_Dislike";
      break;

   case FT_Hate:
      return "FT_Hate";
      break;

   default:
      break;
   }

   return "FT_Neutral";
}

string Feeling2String(float feeling)
{
   eFeelingType level;

   level = iFaction.FeelingType(feeling);

   return Level2String(level);
}

// returns the faction with a matching epic name
hfaction EFind (string epic_name)
{
   list factions = iFaction.All();
   int total, i;
   hfaction faction;

   total = List.ItemCount(factions);
   for (i=0;i<total;++i) {
      faction = iFaction.Cast(List.GetNth(factions, i));

      if (EName(faction) == epic_name) {
         return faction;
      }
   }

   debug {
      Debug.PrintString("tsFaction.EFind error missing faction ");
      Debug.PrintString(epic_name);
      Debug.PrintString("\n");
   }

   return none;
}

// Returns the factions Epic Name key.
string EName(hfaction faction)
{
   return Object.StringProperty(faction, "gt_epic_fac_name");
}

SetEName(hfaction faction, string name)
{
   Object.AddStringProperty(faction, "gt_epic_fac_name", name);
}


// Returns the link to a factions html description file.
string Description(hfaction faction)
{
   return Object.StringProperty(faction, "gt_epic_fac_html");
}

SetDescription(hfaction faction, string html_file)
{
   Object.AddStringProperty(faction, "gt_epic_fac_html", html_file);
}

// Returns the faction type (corporate, gov) of this faction.
int Type(hfaction faction)
{
   return Object.IntProperty(faction, "gt_epic_fac_type");
}

SetType(hfaction faction, int type)
{
   Object.AddIntProperty(faction, "gt_epic_fac_type", type);
}



// Set true if the player knows this faction exists and can read the 
// description.
SetKnown(hfaction faction, bool known)
{
   if (Object.PropertyExists(faction, "gt_epic_fac_known")){
      Object.SetBoolProperty(faction, "gt_epic_fac_known", known);
   }else {
      Object.AddBoolProperty(faction, "gt_epic_fac_known", known);
   }
}


bool IsKnown(hfaction faction)
{
   return Object.BoolProperty(faction, "gt_epic_fac_known");
}


SetFleetStyle(hfaction faction, string fleet_style)
{
   if (Object.PropertyExists(faction, "gt_epic_fac_fleet_style")){
      Object.SetStringProperty(faction, "gt_epic_fac_fleet_style", fleet_style);
   }else {
      Object.AddStringProperty(faction, "gt_epic_fac_fleet_style", fleet_style);
   }
}

string FleetStyle(hfaction faction)
{
   return Object.StringProperty(faction,"gt_epic_fac_fleet_style");
}


SetSpeechStyle(hfaction faction, string speech_style)
{
   if (Object.PropertyExists(faction, "gt_epic_fac_speech_style")){
      Object.SetStringProperty(faction, "gt_epic_fac_speech_style", speech_style);
   }else {
      Object.AddStringProperty(faction, "gt_epic_fac_speech_style", speech_style);
   }
}

string SpeechStyle(hfaction faction)
{
   return Object.StringProperty(faction,"gt_epic_fac_speech_style");
}


// Returns the amount of harm or good the player has caused
// this day. Cleared at
float CurrentAction(hfaction faction)
{
   return Object.FloatProperty(faction, "fac_caction");
}

SetCurrentAction(hfaction faction, float event_value)
{
   atomic {
      if (Object.PropertyExists(faction, "fac_caction")){
         Object.SetFloatProperty(faction, "fac_caction", event_value);
      }else {
         Object.AddFloatProperty(faction, "fac_caction", event_value);
      }
   }
}

// Used in the ship watch functions to change the player
// Action value in a fast and atomic manner.
// Negative actions should have a negative value.
AdjustCurrentAction(hfaction faction, float event_value)
{
   float events;

   atomic {
      if (Object.PropertyExists(faction, "fac_caction")){
         events = Object.FloatProperty(faction, "fac_caction");
         events = events + event_value;
         Object.SetFloatProperty(faction, "fac_caction", events);
      }else {
         Object.AddFloatProperty(faction, "fac_caction", event_value);
      }
   }
}

float PastAction(hfaction faction)
{
   return Object.FloatProperty(faction, "fac_paction");
}

SetPastAction(hfaction faction, float event_value)
{
   if (Object.PropertyExists(faction, "fac_paction")){
      Object.SetFloatProperty(faction, "fac_paction", event_value);
   }else {
      Object.AddFloatProperty(faction, "fac_paction", event_value);
   }
}

float DefaultFeeling(hfaction faction)
{
   return Object.FloatProperty(faction, "fac_default");
}

SetDefaultFeeling(hfaction faction, float feeling)
{
   if (Object.PropertyExists(faction, "fac_default")){
      Object.SetFloatProperty(faction, "fac_default", feeling);
   }else {
      Object.AddFloatProperty(faction, "fac_default", feeling);
   }
}


// Returns true if anyone can know about this faction.
// All public corporations and governments fall into this group.
bool IsPublic(hfaction faction)
{
   int fac_type;
   fac_type = Type(faction);
   if (FCT_Public&fac_type) {
      return true;
   }
   return false;
}


// Is this faction type a government faction?
bool IsGovernment(hfaction faction)
{
   int fac_type;
   fac_type = Type(faction);
   if (FCT_Authority&fac_type) {
      return true;
   }
   return false;
}

// Is this faction type a criminal organization
bool IsCriminal(hfaction faction)
{
   int fac_type;
   fac_type = Type(faction);
   if (FCT_Pirate&fac_type) {
      return true;
   }
   return false;
}

// Does this faction represent a very lose collection
// of people that share very little knowledge.
// Typically reputation changes are slower with
// this kind of group.
bool IsIndependent(hfaction faction)
{
   int fac_type;
   fac_type = Type(faction);
   if (FCT_Independent&fac_type) {
      return true;
   }
   return false;
}

// Copies the feelings of factions toward the source 
// onto the new_faction, so that all factions will treat
// the new faction exactly as they treated the source faction.
CopyFeelings(hfaction source, hfaction new_faction)
{
   int total, i;
   list faction_list;
   hfaction faction;
   float feeling;

   faction_list = iFaction.All();
   List.Remove(faction_list, source);
   List.Remove(faction_list, new_faction);

   total = List.ItemCount(faction_list);
   for (i=0;i<total;++i) {
      faction = iFaction.Cast(List.GetNth(faction_list, i));

      // Change the views of the new faction to match
      feeling = iFaction.Feeling(source, faction);
      iFaction.SetFeeling(new_faction, faction, feeling);

      // Change the views of the target faction to match
      feeling = iFaction.Feeling(faction, source);
      iFaction.SetFeeling(faction, new_faction, feeling);
   }
   
   // Relations between the two are an odd case, because
   // it cannot be the normal ally that we expect.
   // So instead they are set to neutral. And if another
   // behavior is needed, it can be done out of this function.
   iFaction.SetFeeling(source, new_faction, 0.0);
   iFaction.SetFeeling(new_faction, source, 0.0);

}

/*
 * reset our standings to what they where at the start.
 */
Reset()
{
   set factions;
   hfaction faction;
   hfaction player = iFaction.Find("Player");

   float default_level;

   factions = Set.FromList(iFaction.All());

   while (!Set.IsEmpty(factions)) {
      faction = iFaction.Cast(Set.FirstElement(factions));
      Set.Remove(factions, faction);

        if (faction == player)
        {
            debug Debug.PrintString("tsFaction.Reset: skipping player faction\n");
            continue;
        }

        if (Object.PropertyExists(faction, "jgw_sf_level"))
        {
         debug {
            Debug.PrintString("found starting faction: ");
            Debug.PrintString(EName(faction));
            Debug.PrintString(" : ");
            Debug.PrintString(Object.StringProperty(faction, "jgw_sf_level"));
            Debug.PrintString("\n");
         }
         default_level = String2Level(Object.StringProperty(faction, "jgw_sf_level"));
      } else {
         default_level = DefaultFeeling(faction);
      }

      if (iFaction.Feeling(faction, player) != default_level)
      {
         debug {
            Debug.PrintString("tsFaction.Reset: resetting "); 
            Debug.PrintString(EName(faction));
            Debug.PrintString(" from ");
            Debug.PrintString(String.FromFloat(iFaction.Feeling(faction, player)));
            Debug.PrintString(" to ");
            Debug.PrintString(String.FromFloat(default_level));
            Debug.PrintString("\n");
         }
         iFaction.SetFeeling(faction, player, default_level);
         iFaction.SetFeeling(player, faction, default_level);         
      } else {
         debug {
            Debug.PrintString("tsFaction.Reset: skipping "); 
            Debug.PrintString(EName(faction));
            Debug.PrintString("\n");
         }        
      }
      
   }   
}

save_properties()
{
   int total, i;
   list faction_list;
   string start_string, feeling_string, jgw_sf_start_string;
   hfaction faction, player_faction;

   player_faction = iFaction.Find("Player");

   faction_list = iFaction.All();
   atomic{

      total = List.ItemCount(faction_list);
      for (i=0;i<total;++i) {
         faction = iFaction.Cast(List.GetNth(faction_list, i));
         start_string = String.FormatInt("gt_ef%d",iFaction.Allegiance(faction));
         jgw_sf_start_string = String.FormatInt("jgw_sf%d", iFaction.Allegiance(faction));

         Global.CreateInt(String.Join(start_string,"type"),GA_Write, 
                          Type(faction));

         Global.CreateBool(String.Join(start_string,"known"),GA_Write, 
                           IsKnown(faction));

         Global.CreateString(String.Join(start_string,"html"),GA_Write, 
                             Description(faction));

         Global.CreateString(String.Join(start_string,"fleet"),GA_Write, 
                             FleetStyle(faction));

         Global.CreateString(String.Join(start_string,"speech"),GA_Write, 
                             SpeechStyle(faction));


         Global.CreateString(String.Join(start_string,"name"),GA_Write, 
                             EName(faction));

         Global.CreateFloat(String.Join(start_string,"caction"),GA_Write, 
                            CurrentAction(faction));

         Global.CreateFloat(String.Join(start_string,"paction"),GA_Write, 
                            PastAction(faction));

         Global.CreateFloat(String.Join(start_string,"default"),GA_Write, 
                            DefaultFeeling(faction));

         if (Object.PropertyExists(faction, "jgw_sf_level"))
         {
            debug Debug.PrintString("tsFaction.save_properties: saveing start faction: ");
            debug Debug.PrintString(iFaction.Name(faction));
            debug Debug.PrintString("\n");
            Global.CreateString(String.Join(jgw_sf_start_string, "sf_level"), GA_Write, 
                            Object.StringProperty(faction, "jgw_sf_level"));
         }


//      debug Debug.PrintString(iFaction.Name(faction));
//      debug Debug.PrintString(" faction\n");
      }
   } 
   save_feelings();
}



 
restore_properties(bool read_file)
{
   int total, i;
   list faction_list;
   string start_string, jgw_sf_start_string;
   hfaction faction, player_faction;



   if (read_file) {

      debug Debug.PrintString("tsFaction.restore_properties: calling read_faction with the faction_info ini\n");

      read_factions("ini:/faction_info");

      // Force an intial write now, because we will never get into this area
      // again.
      save_properties();
   }else {
      player_faction = iFaction.Find("Player");

      faction_list = iFaction.All();
      total = List.ItemCount(faction_list);
      for (i=0;i<total;++i) {
         faction = iFaction.Cast(List.GetNth(faction_list, i));
         start_string = String.FormatInt("gt_ef%d",iFaction.Allegiance(faction));
         jgw_sf_start_string = String.FormatInt("jgw_sf%d", iFaction.Allegiance(faction));

         // Need to save, the faction name, for later lookup.
         SetType(faction, Global.Int(String.Join(start_string,"type")));
         SetKnown(faction, Global.Bool(String.Join(start_string,"known")));
         SetDescription(faction, Global.String(String.Join(start_string,"html")));
         SetFleetStyle(faction, Global.String(String.Join(start_string,"fleet")));
         SetSpeechStyle(faction, Global.String(String.Join(start_string,"speech")));
         SetEName(faction, Global.String(String.Join(start_string,"name")));

         SetCurrentAction(faction, Global.Float(String.Join(start_string,"caction")));
         SetPastAction(faction, Global.Float(String.Join(start_string,"paction")));

         SetDefaultFeeling(faction, Global.Float(String.Join(start_string,"default")));

         if (Global.Exists(String.Join(jgw_sf_start_string, "sf_level")))
         {
            Object.AddStringProperty(faction, "jgw_sf_level", 
               Global.String(String.Join(jgw_sf_start_string, "sf_level"))
               );
            
            Global.Destroy(String.Join(jgw_sf_start_string, "sf_level"));
         }
         
         Global.Destroy(String.Join(start_string,"type"));
         Global.Destroy(String.Join(start_string,"known"));
         Global.Destroy(String.Join(start_string,"html"));
         Global.Destroy(String.Join(start_string,"fleet"));
         Global.Destroy(String.Join(start_string,"speech"));
         Global.Destroy(String.Join(start_string,"name"));
         Global.Destroy(String.Join(start_string,"caction"));
         Global.Destroy(String.Join(start_string,"paction"));

         Global.Destroy(String.Join(start_string,"default"));
      }      

      restore_feelings();
   }
}




read_factions(string file_name)
{
   hinifile faction_file = INIFile.Create(file_name);
   int faction_total, i, known_int, type, alignment;
   string key_name, html_file, epic_name, eoc_name, fleet_style, speech_style;
   string level_string, feelee_name;
   float level_value;
   bool known, secret;
   hfaction faction, feelee;
   hfaction empty;
   list faction_list;
   int total, j, adjust_count;

   hsim converter = Sim.Create("ini:/sims/nav/waypoint", "name_converter");
   
   if (none == faction_file) {
      debug Debug.PrintString("EpicFaction.read_factions error cannot open ini file\n");
      return;
   }else {
      debug Debug.PrintString("Read_factions\n");
   }


   // Read the faction property changes.
   faction_total = INIFile.Int(faction_file, "Properties", "faction_number",0);
   
   for (i=0;i<=faction_total;++i) {
      key_name = String.FormatInt("Faction%d",i);

      epic_name = INIFile.String(faction_file, key_name, "name","none");
      eoc_name = INIFile.String(faction_file, key_name, "eoc_name","none");   

      faction = iFaction.Find(eoc_name);
/*
      debug Debug.PrintString("Epic Faction ");
      debug Debug.PrintHandle(faction);
      debug Debug.PrintString("\n");
  */    
      if (none != faction){
         Object.AddHandleProperty(converter,epic_name,faction);

         // This faction entry does exist, fill the rest of the properties.
         html_file = INIFile.String(faction_file, key_name, "desc","none");
         fleet_style = INIFile.String(faction_file, key_name, "fleet_style","");
         speech_style = INIFile.String(faction_file, key_name, "speech_style","");
         type = INIFile.Int(faction_file, key_name, "type", 0);
         known = INIFile.Int(faction_file, key_name, "known", 0);

         SetType(faction, type);
         SetDescription(faction, html_file);
         SetFleetStyle(faction, fleet_style);
         SetSpeechStyle(faction, speech_style);
         SetEName(faction, epic_name);

         SetCurrentAction(faction, 0.0);
         SetPastAction(faction, 0.0);

         SetKnown(faction, known);

         level_string = INIFile.String(faction_file, key_name, "default_standing","FT_Neutral");
         level_value = String2Level(level_string);

         SetDefaultFeeling(faction, level_value);
      }
   }

   // Now we are ready to revisit the factions and read in the relationships between 
   // those factions.

   empty = iFaction.Find("Neutral");

   for (i=0;i<=faction_total;++i) {
      key_name = String.FormatInt("Faction%d",i);

      epic_name = INIFile.String(faction_file, key_name, "name","none");
      eoc_name = INIFile.String(faction_file, key_name, "eoc_name","none");   

      faction = iFaction.Find(eoc_name);

      /*
      debug Debug.PrintString("Set Levels ");
      debug Debug.PrintHandle(faction);
      debug Debug.PrintString("\n");
*/
      if (none != faction){
         // Make sure we are allied with ourselves.
         iFaction.SetFeeling(faction, faction, 1.0);

         // Read in the default setting, and change all relations to the default.
         //level_string = INIFile.String(faction_file, key_name, "default_standing","none");
         //level_value = String2Level(level_string);

         level_value = DefaultFeeling(faction);

         faction_list = iFaction.All();

         List.Remove(faction_list, faction);

         // Never adjust the faction standing versus neutral.
         List.Remove(faction_list, empty);

         total = List.ItemCount(faction_list);
         for (j=0;j<total;++j) {
            feelee = iFaction.Cast(List.GetNth(faction_list, j));
            iFaction.SetFeeling(faction, feelee, level_value);
         }


         // Defaults are done, read in the specific set levels.
         adjust_count=0;
         while (INIFile.NumberedExists(faction_file,key_name,"adjust_name",adjust_count)) {
            feelee_name = INIFile.NumberedString(faction_file,key_name,"adjust_name",
                                                adjust_count, "none");
            level_string = INIFile.NumberedString(faction_file,key_name,"adjust_level",
                                                adjust_count, "none");
            ++adjust_count;
            level_value = String2Level(level_string);

            feelee = iFaction.Cast(Object.HandleProperty(converter,feelee_name));

            if (none != feelee) {
               iFaction.SetFeeling(faction, feelee, level_value);
            }
         }//While more adjustments.
      }
   }

   Sim.Destroy(converter);
   INIFile.Destroy(faction_file);
}


save_feelings()
{
   int total, feeler_count, feelee_count;
   list faction_list;
   string start_string, feeling_string;
   hfaction feeler, feelee;
   float feeling;


   faction_list = iFaction.All();

   total = List.ItemCount(faction_list);

   for (feeler_count=0;feeler_count<total;++feeler_count) {
      feeler = iFaction.Cast(List.GetNth(faction_list, feeler_count));

      for (feelee_count=0;feelee_count<total;++feelee_count) {
         feelee = iFaction.Cast(List.GetNth(faction_list, feelee_count));

         // Find all the non-zero cases and store them.
         feeling = iFaction.Feeling(feeler, feelee);

         if ((feeling > 0.01)|| (feeling < -0.01)) {
            //feeling_string = String.Join(iFaction.Name(feeler),iFaction.Name(feelee));
            feeling_string = String.FormatInt("%d",iFaction.Allegiance(feeler));
            feeling_string = String.Join(feeling_string,String.FormatInt("%d",iFaction.Allegiance(feelee)));
            feeling_string = String.Join("gtfl_",feeling_string);

            Global.CreateFloat(feeling_string,GA_Write, feeling);

            /*
            debug {
               Debug.PrintHandle(feeler);
               Debug.PrintString("\n");
               Debug.PrintHandle(feelee);
               Debug.PrintString("\n");
            }
            */
         }
      }
   }
}

restore_feelings()
{
   int total, feeler_count, feelee_count;
   list faction_list;
   string start_string, feeling_string;
   hfaction feeler, feelee;
   float feeling;

   faction_list = iFaction.All();

   total = List.ItemCount(faction_list);

   for (feeler_count=0;feeler_count<total;++feeler_count) {
      feeler = iFaction.Cast(List.GetNth(faction_list, feeler_count));

      for (feelee_count=0;feelee_count<total;++feelee_count) {
         feelee = iFaction.Cast(List.GetNth(faction_list, feelee_count));

         feeling = iFaction.Feeling(feeler, feelee);
         //feeling_string = String.Join(iFaction.Name(feeler),iFaction.Name(feelee));
         //feeling_string = String.Join("gt_",feeling_string);

         feeling_string = String.FormatInt("%d",iFaction.Allegiance(feeler));
         feeling_string = String.Join(feeling_string,String.FormatInt("%d",iFaction.Allegiance(feelee)));
         feeling_string = String.Join("gtfl_",feeling_string);

         if (Global.Exists(feeling_string)){
            iFaction.SetFeeling(feeler, feelee, Global.Float(feeling_string));
            Global.Destroy(feeling_string);
         }else{
            // If the feeling did not get saved, then it is returned to neutral.
            iFaction.SetFeeling(feeler, feelee, 0.0);
         }
      }
   }
}




/* 
THIS MOD IS NOT MADE, DISTRIBUTED, OR SUPPORTED BY INFOGRAMES
OR PARTICLE SYSTEMS LTD. 

ELEMENTS TM & (C) INFOGRAMES AND PARTICLE SYSTEMS LTD.
*/
