//*******************************************************************************************/
//
// tsReferenceGui.pog
//
// This module is a library function that allows fast movement through a HTML reference.
// 
// 
//
// May 2005, jon freise
//******************************************************************************************/

package tsReferenceGui;

uses	Sim,
		iShip,
		iSim,
		Debug,
		Global,
		GUI,
		iDirector,
		iGame,
		iGUI,
		iHUD,
		iHabitat,
		iMapEntity,
		INIFile,
		Input,
		List,
		Object,
		String,
		Task,
		Text,
		iUtilities,
		iCargo,
		iInventory,
		iComms,
		Math,
      iDockPort,                
      CargoTypes,

		UniGUI,
      tsGuiEnum,
      tsGui,
      tsLProduction,
      tsEconomy,
      tsEconUtil,
      tsMoney,
      tsPodUtil,
      tsString;




provides ReferenceWindow,
         RunCheck,
         StartScreen,
         OnBackPress,
         OnContentPress,
         SessionStart,
         SessionEnd,
         ExitScreen;

 

prototype create_text_window(string reference_link);


RunCheck()
{
      Global.SetBool("g_zz_ug_passme",true);

}

// Load the text files we wil need.
SessionStart()
{
   Text.Add("csv:/text/gt_ereference_gui");
}


// Unload any text files.
SessionEnd()
{
   Text.Remove("csv:/text/gt_ereference_gui");
}



StartScreen()
{
   GUI.PopScreensTo("icSpaceFlightScreen");
   GUI.OverlayScreen("icPDAOverlayManager");
   iGUI.OverlayCustomScreen( "tsReferenceGui.ReferenceWindow" );
}


ExitScreen()
{
   UniGUI.UniGUIRemoveScreen();
}


OnBackPress()
{
   hwindow text_window = GUI.Cast(Global.Handle("gt_ereference_text_window"));

   GUI.TextWindowBack(text_window);
}


OnContentPress()
{  hwindow button = GUI.FocusedWindow();
   string link = Object.StringProperty(button,"gt_html_link");

   create_text_window(link);
}


hwindow create_border_button(int x, int y, int width, int height, hwindow parent, string name, string function)
{
   hwindow button, border;
   int button_x, button_y, button_width, button_height;

   // We need to change the button size to make room for the border.
   button_x = x + 8;
   button_y = y + 8;

   button_width = width - 16;
   button_height = height - 16;

   button = GUI.CreateButton( button_x,
                              button_y,
                              button_width,
                              button_height,
                              parent);


   GUI.SetWindowTitle(button, name);

   GUI.SetWindowFont(button, Global.String("GUI_title_font"));

   GUI.SetButtonFunctionPog(button, function);

//   tsGui.SetStandardWindowColours(button);

   // Add the border
   border = GUI.CreateBorder(button);

   // we still return the button, because the function might need to change
   // or something. This is one of those no good choice decisions.

   tsGui.SetStandardStateColours(button);

   return button;
}


create_contents_list()
{
   hwindow list_parent = GUI.Cast(Global.Handle("gt_ereference_gui_contents_parent"));
   hwindow list_base = GUI.Cast(Global.Handle("gt_ereference_gui_contents_base"));
   hwindow list_box;
   hwindow button;

   int i, count, index;
	int scrollbar_width = Global.Int( "GUI_scrollbar_width" );	// Scrollbar width

   int button_width, height, list_x, list_y;

   string name, link;

   hinifile link_file = INIFile.Create("ini:/library_contents");

   // Remove the prior inventory list.
   if (none != list_base) {
      GUI.DeleteWindow(list_base);
   }

   list_base = GUI.CreateWindow(0, 
                                0,
                                GUI.WindowCanvasWidth( list_parent),
                                GUI.WindowCanvasHeight( list_parent),
                                list_parent);


   Global.CreateHandle("gt_ereference_gui_contents_base",GA_Write|GA_NoSave, list_base);

   // Set up the button and list sizes now.
   button_width = GUI.WindowCanvasWidth( list_base) - scrollbar_width;
   button_width -= 4;


   list_box = GUI.CreateListBox( 0, 
                                 0,
                                 button_width,
                                 GUI.WindowCanvasHeight( list_base),
                                 list_base,
                                 true,
                                 false);

	// Attach a scrollbar to the list box. from LFPlus.
	GUI.CreateVerticalScrollbar( 
		GUI.WindowCanvasWidth( list_base ) - scrollbar_width, 
		0,
		scrollbar_width, 
		GUI.WindowCanvasHeight( list_base ),
		list_base,
		list_box,
		Global.Float( "GUI_scrollbar_buttonratio" ),
		"" );


   count = 0;
   while (INIFile.NumberedExists(link_file,"Contents","name",count)) {
      name = INIFile.NumberedString(link_file,"Contents","name",count,"none");
      link = INIFile.NumberedString(link_file,"Contents","link",count,"none");
      ++count;

      button = iGUI.CreateAndInitialiseRectangularInverseRadioButton( none, 0, 0, 
                                                                      button_width, 
                                                                      name,
                                                                      false );
      // We will need to be able to look up the cargo 
      // for buying and selling later.
      Object.AddStringProperty(button,"gt_html_link",link);

      GUI.SetInputOverrideFunctions( button,
											"", 
											"",
											"", 
											"", 
											"", 
											"",
											"tsReferenceGui.OnContentPress",
											"",
											"" );

      GUI.AddListBoxEntry(list_box, button);
   }   

   GUI.SelectListBoxEntry(list_box, index);


   INIFile.Destroy(link_file);
}

// Create the actual text window on top of a base window that
// is easy to delete. 
create_text_window(string reference_link)
{
   hwindow text_window_parent = GUI.Cast(Global.Handle("gt_ereference_text_window_parent"));
   hwindow text_window_base = GUI.Cast(Global.Handle("gt_ereference_text_window_base"));
   hwindow text_window;
   int text_width, text_height;
	int scrollbar_width = Global.Int( "GUI_scrollbar_width" );	// Scrollbar width

   if (text_window_base != none) {
      GUI.DeleteWindow(text_window_base);
   }

   text_window_base = GUI.CreateWindow( 0,
                                        0,
                                        GUI.WindowCanvasWidth(text_window_parent),
                                        GUI.WindowCanvasHeight(text_window_parent),
                                        text_window_parent);

   Global.CreateHandle("gt_ereference_text_window_base",GA_Write|GA_NoSave, text_window_base);


   text_width = GUI.WindowCanvasWidth(text_window_base) - scrollbar_width;
   text_width = text_width - 4;


   text_window = GUI.CreateTextWindow( 0,
                                       0,
                                       text_width,
                                       GUI.WindowCanvasHeight(text_window_base),
                                       text_window_base);   

   //GUI.SetWindowFont( text_window, Global.String( "GUI_detail_font" ) );

   Global.CreateHandle("gt_ereference_text_window",GA_Write|GA_NoSave, text_window);

   GUI.SetTextWindowResource( text_window,
                              reference_link );


   GUI.CreateVerticalScrollbar( 0 + text_width + 4,
                                0,
                                scrollbar_width, 
                                GUI.WindowCanvasHeight(text_window_base),
                                text_window_base,
                                text_window,
                                Global.Float( "GUI_scrollbar_buttonratio" ),
                                "" );
}



ReferenceWindow()
{
   hwindow lh_shady, rh_shady;
   hwindow station_title;
   hwindow text_window_parent;
   hwindow back_button;
   hwindow splitter;
   hwindow top_splitter;
   hwindow bottom_splitter;
   hwindow list_parent;
   hwindow contents_title;

   string title_font = Global.String( "GUI_subtitle_font" );

   int rwidth, rheight, rx, ry;
   int lwidth, lheight, text_width, text_height;

   int lshady_width = 400;
	int scrollbar_width = Global.Int( "GUI_scrollbar_width" );	// Scrollbar width

   hinifile link_file = INIFile.Create("ini:/library_contents");
   
   string start_link;

   debug Debug.PrintString("Reference Window\n");

   if (none == link_file) {

   }

   start_link = INIFile.String(link_file,"Contents", "start", "none");

   INIFile.Destroy(link_file);

   ///***********************************
   // GUI setup here.
   lh_shady = iGUI.CreateWideShadyBar();

   GUI.SetShadyBarWidth(lshady_width);
   



   rh_shady = iGUI.CreateShadyBarRight();
   
   tsGui.CreateTitle(lh_shady,Text.Field("gt_ereference_gui_title",FT_Text));
   tsGui.CreateSubtitle(lh_shady,Text.Field("gt_ereference_gui_subtitle",FT_Text));

   tsGui.CreateExitButton(lh_shady, 
                             Text.Field("gt_ereference_gui_exit",FT_Text), 
                             "tsReferenceGui.ExitScreen" );   


   //************ 
   // Setup the text window and the back button.

   lheight = GUI.WindowCanvasHeight(lh_shady);
   lheight = lheight - Global.Int("EpicGui_content_drop");
   lheight = lheight - Global.Int("EpicGui_content_footer");

   lwidth = lshady_width - Global.Int("EpicGui_content_indent");
   lwidth = lwidth - Global.Int("EpicGui_content_indent");

//   text_width = lwidth - scrollbar_width;
//   text_width = text_width - 4;
   text_width = lwidth;
   text_height = lheight - 50;




   text_window_parent = GUI.CreateWindow( Global.Int("EpicGui_content_indent"),
                                       Global.Int("EpicGui_content_drop"),
                                       text_width,
                                       text_height,
                                       lh_shady); 

   Global.CreateHandle("gt_ereference_text_window_parent",GA_Write|GA_NoSave, text_window_parent);

   
   // Create the text window, initially pointed to the start page.
   create_text_window(start_link);



   back_button = create_border_button(Global.Int("EpicGui_content_indent"), 
                                 Global.Int("EpicGui_content_drop") + text_height + 20,
                                 60,
                                 30,
                                 lh_shady,
                                 Text.Field("gt_ereference_gui_back",FT_Text), 
                                 "tsReferenceGui.OnBackPress");



   // Setup the right hand side table of contents

   splitter = GUI.CreateSplitterWindow( Global.Int("EpicGui_content_indent"), 
                                        Global.Int("EpicGui_content_drop"),
                                        lwidth - Global.Int("EpicGui_content_indent"), 
                                        lheight,
                                        rh_shady,
                                        50,
                                        false);


   // This area is the station inventory for sale. 

   top_splitter = GUI.SplitterWindowTopWindow(splitter);

   
   // Set the list box title.
   contents_title = iGUI.CreateAndInitialiseStaticWindow(0,
                                                        0,
                                                        GUI.WindowCanvasWidth( top_splitter),
                                                        20,
                                                        top_splitter,
                                                        title_font,
                                                        Text.Field("gt_ereference_gui_contents",FT_Text));
   // Remove text centering.
   GUI.SetWindowTextFormatting( contents_title, false, 0);


   bottom_splitter = GUI.SplitterWindowBottomWindow(splitter);

   
   list_parent = GUI.CreateWindow(0,
                                  0,
                                  GUI.WindowCanvasWidth( bottom_splitter),
                                  GUI.WindowCanvasHeight( bottom_splitter),
                                  bottom_splitter);


   Global.CreateHandle("gt_ereference_gui_contents_parent",GA_Write|GA_NoSave, list_parent);


   create_contents_list();




} //ReferenceWindow




/* 
THIS MOD IS NOT MADE, DISTRIBUTED, OR SUPPORTED BY INFOGRAMES
OR PARTICLE SYSTEMS LTD. 

ELEMENTS TM & (C) INFOGRAMES AND PARTICLE SYSTEMS LTD.
*/
