//*****************************************************************************/
//
// tsShipEscort.pog
//
// This module also provides utility functions for the creation of
// ship escort groups. From basic form to more complex.
// 
//
// July 2008, James Walker
//****************************************************************************/

package	tsShipEscort;


uses
	Debug,
//	String,
	INIFile,
//	List,
//	Set,
//	Global,
   Sim,
   iSim,
	iShip,
	iFaction,
//	Math,
	Group,
   tsShipCreationEnum,
//   iUtilities,
//   tsFaction,
   tsArray,
   tsShip,
   tsShipName,
   tsPcOwner,
   tsLFleet,
   tsFleetOp,
   tsPilotSetup,
   tsShipCreation;



provides
   CreateStandardEscort,
   CreateMixedEscort,
   DeathScript;




//
// Prototypes
//


/*
Escort death script
Will deal with operation specific details on ship deatth
*/
task DeathScript(hship ship)
{
   hisim owner;
   int index;


   owner = iSim.Cast(tsPcOwner.Owner(ship));

   if (none != owner) {
      // we have an owner
      if (tsFleetOp.IsOperation(owner)) {
         // owner is an operation

         // Reduce the operations fleet value as it has lost a ship
         tsLFleet.ChangeFleets(owner, - Object.FloatProperty(ship, "threat"));
         // find this ship on the operation ship list and set to dead
         tsFleetOp.KillShipOnOp(owner, ship);
      }
   }

   // Utter death threats and explode ...
   iSim.Kill(ship);
}



/*
operation: owning object for this escort.
leader: the lead ship in the group.
cull_group: the group the escort is added to.
ship_name_group: the naming group to use for random name generation
*/
CreateStandardEscort(
                     hisim    operation,
                     hship    leader,
                     hgroup   cull_group,
                     string   ship_name_group,
                     string   ship_type
                     )
{
   float fleets, threat;
   string escort_template;
   hinifile escort_file;
   int i, total;
   hship escort;
   hfaction faction = iSim.Faction(leader);
   
   debug Debug.PrintString("tsShip.CreateEscorts: Start\n");
   escort_template = tsShipCreation.GetShip(faction, tsShipCreation.String2ShipType(ship_type));
   escort_file = INIFile.Create(escort_template);

   if (none == escort_file) {
      debug Debug.PrintString("tsShip.CreateEscorts error escort ini file invalid\n");
      return;
   }

   threat = INIFile.Float(escort_file,"Properties","threat", 40);
   INIFile.Destroy(escort_file);

   // get the total fleet operation is currently capable of supporting
   fleets = tsLFleet.Fleets(operation);
   // we already have a leader for the group so take off its threat from
   // the available total we can fill
   fleets = fleets - Object.FloatProperty(leader, "threat");
   // work out how many of the escorts we can create
   total = fleets/threat;
   
   debug {
   Debug.PrintString("tsShip.CreateEscorts: fleets=");
   Debug.PrintFloat(fleets);
   Debug.PrintString("\n");
   Debug.PrintString("tsShip.CreateEscorts: threat=");
   Debug.PrintFloat(threat);
   Debug.PrintString("\n");   
   }

   for (i=0;i<total;++i) {
      escort = tsShip.Create(escort_template, tsShipName.ShipName(ship_name_group,10000));
      
      // set our custom death script
      Object.SetStringProperty ( escort, "death_script", "tsShipEscort.DeathScript" );

      tsPilotSetup.SetupEscort(escort, 0.9, 0.5);

      iSim.SetFaction(escort, faction);
      Sim.SetCullable(escort, false);

      Sim.PlaceRelativeTo(escort, leader, 2km, 0, 0);

      iShip.Attacked(escort);
      iShip.LastAttacker(escort);

      tsPcOwner.SetOwner(escort, operation);
      
      Group.AddSim(cull_group, escort);
      
      // add the ships details to the operation ship list
		// Note: this list is indexed from 1
      tsFleetOp.SetShipOnOp(operation, escort, i+1);
   }

   debug Debug.PrintString("tsShip.CreateEscorts: End\n");
}



/*
CreateMixedEscort :- Used to create custom escort groups in a standard way.

operation: owning object for this escort.
leader: the lead ship in the group.
cull_group: the group the escort is added to.
ship_name_group: the naming group to use for random name generation
use_maxfleets: boolean to honour the use of fleets/threats ratio
fighter_ships: number of fighters to create
light_ships: number of light ships to create
heavy_ships: number of heavy ships to create
capital_ships: number of capital ships to create
*/
CreateMixedEscort(
                  hisim    operation,
                  hship    leader,
                  hgroup   cull_group,
                  string   ship_name_group,
                  bool     use_maxfleets,
                  int      fighter_ships,
                  int      light_ships,
                  int      heavy_ships,
                  int      capital_ships
                  )
 {
   float fleets, threat;
   string escort_template;
   string ship_type;
   hinifile escort_file;
   int i, sizeloop, total, try_to_make_num_ships;
   hship escort;
   hfaction faction = iSim.Faction(leader);
	int available_fleets = tsLFleet.Fleets(operation);
   
   debug Debug.PrintString("tsShip.CreateMixedEscort: Start\n");

   for(sizeloop=0;sizeloop<4;++sizeloop)
   {
      // Determine ship type to use for this loop
      switch(sizeloop)
      {
         case 0:
            ship_type = "EST_CombatFighter";
            try_to_make_num_ships = fighter_ships;
            break;
         case 1:
            ship_type = "EST_CombatLight";
            try_to_make_num_ships = light_ships;
            break;
         case 2:
            ship_type = "EST_CombatHeavy";
            try_to_make_num_ships = heavy_ships;
            break;
         case 3:
            ship_type = "EST_CombatCapital";
            try_to_make_num_ships = capital_ships;
            break;
      }
      
      debug {
      Debug.PrintString("Creating ship type: ");
      Debug.PrintString(ship_type);
      Debug.PrintString("/n");
      }
      
      if(try_to_make_num_ships > 0 )
      {
         // for the ship type and if number to make > 0 determine
         // template file, threat and total to make based on available fleets on the operation
         escort_template = tsShipCreation.GetShip(faction, tsShipCreation.String2ShipType(ship_type));
         escort_file = INIFile.Create(escort_template);

         if (none == escort_file) {
            debug Debug.PrintString("tsShip.CreateMixedEscort error escort ini file invalid\n");
            return;
         }

         threat = INIFile.Float(escort_file,"Properties","threat", 40);
         INIFile.Destroy(escort_file);

         if(use_maxfleets)
            total = available_fleets/threat;
         else
            total = try_to_make_num_ships;
         
         debug {
            Debug.PrintString("tsShip.CreateMixedEscort: fleets=");
            Debug.PrintFloat(fleets);
            Debug.PrintString("\n");
            Debug.PrintString("tsShip.CreateMixedEscort: threat=");
            Debug.PrintFloat(threat);
            Debug.PrintString("\n");   
         }
         
         for (i=0;i<total;++i) {
            escort = tsShip.Create(escort_template, tsShipName.ShipName(ship_name_group,10000));

            tsPilotSetup.SetupEscort(escort, 0.9, 0.5);

            iSim.SetFaction(escort, faction);
            Sim.SetCullable(escort, false);

            Sim.PlaceRelativeTo(escort, leader, 2km, 0, 0);

            iShip.Attacked(escort);
            iShip.LastAttacker(escort);

            tsPcOwner.SetOwner(escort, operation);
            
            Group.AddSim(cull_group, escort);
				
				// add the ships details to the operation ship list
				// Note: this list is indexed from 1
				tsFleetOp.SetShipOnOp(operation, escort, i+1);
				
				//commented out to make fleet composition easier to predict
				available_fleets -= threat;
         }
      }
   }

   debug Debug.PrintString("tsShip.CreateMixedEscort: End\n");
 }

