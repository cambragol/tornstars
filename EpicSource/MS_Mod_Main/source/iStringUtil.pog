// String utilities 

// Imported from Torn Stars to vanilla EoC Utilities 2012-June-18 by SRC

package iStringUtil;

uses String,
     Text,
     Math,
     Sim,
     iHUD,
     iObjectPropertiesUtil;

provides 
							// Original Torn stars functionality
   RemoveSpace, 
   Locate, 
   Replace, 
   Htmlize, 
   EndName,
   CargoNameNoSpace,
   TranslatedString,
   TranslatedStringRandom,
   CommsString,
   CommsStringRandom,
							// Additional vanilla EoC Utilities functionality
   LocateLastInstance,
   LocateNthNonOverlappingInstance,			// seems to test OK 2012-06/24 SRC
   TerminalStringAfterLastInstanceOfSearchString,
   NumberOfNonoverlappingInstances,
   SeparateDelimitedStrings,				// seems to test OK 2012-06/21 SRC
							// specific string manipulation functions
   ParseSectionKey;

   prototype int Locate( string source, string mark);

   prototype int LocateLastInstance( string source, string mark);
   prototype int LocateNthNonOverlappingInstance(string source, string mark, int n);

   prototype string TerminalStringAfterLastInstanceOfSearchString(string source, string mark);
   prototype int NumberOfNonoverlappingInstances(string source, string mark);

   prototype int SeparateDelimitedStrings(hobject obj, string delimited_string, string delimiter, string name);

   prototype int ParseSectionKey(hobject obj, string section_key);


// Removes all the spaces in words

string RemoveSpace(string words)
{
   string one_word, snip;
   int len, i;

   len = String.Length(words);

   for (i=0;i<len;++i) {
      snip = String.Mid(words,i,1);

      if (" " != snip) {
         one_word = String.Join(one_word,snip);
      }
   }
   
   return one_word;
}


//Doc Start
//Doc Header int Locate( string source, string mark)
//Doc
//Doc Descr: Find a search-string in another string. Return the location (0-referenced) of 
//Doc  the first character of the search-string in the other string.
//Doc
//Doc SRC 2012/06/18 (documented from tsString.pog source)
//Doc
//Doc INPUTS
//Doc name         type     description
//Doc
//Doc source       string   the string within which to search for the "mark" string
//Doc mark         string   the string to locate within the "source" string
//Doc
//Doc OUTPUT/returns
//Doc
//Doc location     int      the character position (0-referenced) within the "source" string
//Doc                       of the first character of the "mark" string.
//Doc                       If the "mark" string does not occur within the "source" string, -1 is returned
//Doc
//Doc Finish


int Locate(string source, string mark){
   int i;
   int size = String.Length(mark);
   int length = String.Length(source);
   for (i=0;i<length;++i) {
      if (mark==String.Mid(source,i,size)) {
         return i;
      }
   }

   return -1;
}


//Doc Start
//Doc Header int LocateLastInstance( string source, string mark)
//Doc
//Doc Descr: Find the rightmost instance of search-string in another string. Return 
//Doc  the location (0-referenced) of the first character of the search-string in the other string.
//Doc
//Doc SRC 2012/06/19 
//Doc//Doc
//Doc INPUTS
//Doc name         type     description
//Doc
//Doc source       string   the string within which to search for the "mark" string
//Doc mark         string   the string to locate within the "source" string
//Doc
//Doc OUTPUT/returns
//Doc
//Doc location     int      the character position (0-referenced) within the "source" string
//Doc                       of the first character of the last (right-most) instance "mark" string.
//Doc                       If the "mark" string does not occur within the "source" string, -1 is returned
//Doc
//Doc Finish


int LocateLastInstance(string source, string mark){
   int i, location;
   int size = String.Length(mark);
   int length = String.Length(source);

   location = -1;					// default "failed to find an instance of the mark string"

   if (size > length) return -1;

   iHUD.Print("iStringUtil: in function LocateLastInstance");

							// COMMENT: this would be more efficient to
							// search from the end of the string -- for now this is quick to code
   for (i=0;i<=(length-size);++i) {
      if (mark==String.Mid(source,i,size)) {
         location = i;
      }
   }

   return location;
}


//Doc Start
//Doc Header int LocateNthNonOverlappingInstance( string source, string mark, int n)
//Doc
//Doc Descr: Find the Nth non-overlapping instance of search-string in another string, starting
//Doc  the search from the left end of the string . Return the location (0-referenced) of the 
//Doc  first character of the Nth non-overlapping occurrence of the search-string in the other 
//Doc  string.
//Doc
//Doc SRC 2012/06/24 
//Doc
//Doc INPUTS
//Doc name         type     description
//Doc
//Doc source       string   the string within which to search for the "mark" string
//Doc mark         string   the string to locate within the "source" string
//Doc n            integer  the number (1-referenced) of instance of the mark string
//Doc                       to search for in the source string.
//DOc
//Doc OUTPUT/returns
//Doc
//Doc location     int      the character position (0-referenced) within the "source" string
//Doc                       of the first character of the last (right-most) instance "mark" string.
//Doc                       If the "mark" string does not occur within the "source" string, -1 is returned
//Doc
//Doc Finish


int LocateNthNonOverlappingInstance(string source, string mark, int n){
   int i, location, count;
   int size = String.Length(mark);
   int length = String.Length(source);

   location = -1;					// default "failed to find an instance of the mark string"

   if (size > length) return -1;

   iHUD.Print("iStringUtil: in function LocateNthNonOverlappingInstance");

   count = 0;
							// COMMENT: this would be more efficient to
							// search from the end of the string -- for now this is quick to code
   for (i=0;i<=(length-size);++i) {
      if (mark==String.Mid(source,i,size)) {
         count += 1;
         if (count == n) return i;
      }
   }

   return location;
}


//Doc Start
//Doc Header int NumberOfNonoverlappingInstances( string source, string mark)
//Doc
//Doc Descr: Determine the number of non-overlapping occurrences of a search-string within
//Doc  another string. The test is performed from the beginning of the string (index 0),
//Doc  which may lead to different results than if performed from the end of the string
//Doc
//Doc SRC 2012/06/19 
//Doc//Doc
//Doc INPUTS
//Doc name         type     description
//Doc
//Doc source       string   the string within which to search for the "mark" string
//Doc mark         string   the string to locate within the "source" string
//Doc
//Doc OUTPUT/returns
//Doc
//Doc instances    int      the number of non-overlapping occurrences of the "mark" string within the
//Doc                       source string
//Doc
//Doc Finish


int NumberOfNonoverlappingInstances(string source, string mark){
   int mark_length, work_length, current_start, instances;
   string work_source;

   instances = 0;
   mark_length = String.Length(mark);

   if (mark_length == 0) return instances;

   work_source = source;
   work_length = String.Length(work_source);

   while (true){

      current_start = Locate(work_source, mark);
							
      if (current_start == -1) break;			// exit the "while" loop

							// proceed to the next mark string lookup
      instances += 1;

      work_length -= mark_length;

      if (work_length < mark_length) return instances;      
           
      work_source = String.Mid( work_source, (current_start + mark_length), work_length );

   }

   return instances;
}


//Doc Start
//Doc Header string Replace(string source, string mark, string replacement){
//Doc
//Doc Descr: Replace one string (the "mark" string) with another (the "replacement"
//Doc  string) at the first occurrence of the "mark" string in a third string (the "source" string)
//Doc
//Doc SRC 2012/06/26 documents from prior tsString.pog function
//Doc
//Doc
//Doc INPUTS
//Doc name         type     description
//Doc
//Doc source       string   the string within which to search for the "mark" string
//Doc mark         string   the string to locate within the "source" string
//Doc replacement  string   the string with which to replace teh "mark" string in the "source" string
//Doc
//Doc OUTPUT/returns
//Doc
//Doc new_string   string   the revised string. If the "mark" string is not found in the "source" 
//Doc                       string, then the "source" string is returned unmodified
//Doc
//Doc Finish

string Replace(string source, string mark, string replacement){
   string new_string;
   int i;
   int size = String.Length(mark);
   int length = String.Length(source);

   for (i=0;i<length;++i) {
      if (mark==String.Mid(source,i,size)) {
         // Found the mark. Now just replace it
         length = length -i;
         length = length - size;
         new_string = String.Join(String.Left(source,i),replacement);
         new_string = String.Join(new_string,String.Right(source, length));
         return new_string;
      }
   }
	
   // Just return the start string if we cannot find the marker.
   return source;
}


string Htmlize(string source)
{
   string new_string;

   new_string = String.Join("<HTML><BODY>",source);
   new_string = String.Join(new_string, "</BODY></HTML>");

   return new_string;
}


// Find the final name in a resource URL
string EndName(string source)
{
   int length = String.Length(source);
   int i;

   // Find the location of the final slash. Cut from this point to the
   // end
   for (i=length;i>0;--i) {

      if ("/" ==String.Mid(source,i,1)) {
         // Found it. Cut.
         return String.Mid(source,i+1, (length - i));
      }
   }

   // We never found a slash, so hand back the whole name.
   return source;
}


string CargoNameNoSpace(string source)
{
   string result;

   result = RemoveSpace(source);
   result = String.Join("Cargo_", result);

   return result;
}


// This function will build a key string that allows indexing into multiple
// text entries. This makes writing and coding easy.
// There should always be a default translation using just the key_string alone.
// More complex varients can be added. Trying to access a missing string
// just forces the use of the default.
// Example csv entries
// lorie_speaks, "Nav here sir"
// lorie_speaks_1, "Another nav entry sir"
// lorie_speaks_2, "Yet Another nav entry sir"
// lorie_speaks_1_leung, "I don't do Chinese sir"
// lorie_speaks_2_leung, "No, and I won't tell you again"
// lorie_speaks_barrens, "That's more my style sir"

string TranslatedString(string key_string, string style, int index)
{
   string full_key;
   string returned_string;
   string style_key;

   full_key = key_string;

   // an empty string means don't use the style feature
   if ("" !=style) {
      full_key = String.Join(key_string,"_");
      full_key = String.Join(full_key,style);
      style_key = full_key;
   }

   // A zero index means don't use the index.
   if (index != 0) {
      full_key = String.Join(full_key,String.FormatInt("_%d", index));
   }

   returned_string = Text.Field(full_key, FT_Text);

   if ("*"==String.Left(returned_string,1)) {
      // Numbered string failed to translate, fall back on style.

      returned_string = Text.Field(style_key, FT_Text);

      if ("*"==String.Left(returned_string,1)) {
         // Style string failed to translate, fall back on default.
         returned_string = Text.Field(key_string, FT_Text);
      }
   }

   return returned_string;
}

// Used to select a random string out of alist of string names;
string TranslatedStringRandom(string key_string, string style, int highest_index)
{

   return TranslatedString(key_string, style, Math.RandomInt(0,highest_index));
}


// Comms strings are self translating. So we play this little game of
// checking if a translation exists and then return the key string instead.
string CommsString(string key_string, string style, int index)
{
   string full_key;
   string style_key = "";
   string returned_string;

   full_key = key_string;

   // an empty string means don't use the style feature
   if ("" !=style) {
      full_key = String.Join(key_string,"_");
      full_key = String.Join(full_key,style);
      style_key = full_key;
   }

   // A zero index means don't use the index.
   if (index != 0) {
      full_key = String.Join(full_key,String.FormatInt("_%d", index));
   }

   returned_string = Text.Field(full_key, FT_Text);


   if (("*"==String.Left(returned_string,1)) || (String.Length(returned_string)<1)) {
      // Numbered string failed to translate, fall back on style.
      returned_string = Text.Field(style_key, FT_Text);

      if (("*"==String.Left(returned_string,1)) || (String.Length(returned_string)<1)) {
         // Style string failed to translate, fall back on default.
        return key_string;
      }
      
      return style_key;
   }

   return full_key;
}


// Used to select a random string out of alist of string names;
string CommsStringRandom(string key_string, string style, int highest_index)
{

   return CommsString(key_string, style, Math.RandomInt(0,highest_index));
}



// Find the final name in a resource URL


//Doc Start
//Doc Header string TerminalStringAfterLastInstanceOfSearchString(string source, string mark)
//Doc
//Doc Descr: Find the last (furthest to the right) search-string in another string. If the 
//Doc  search string is present, return the substring of the source string that is to the
//Doc  right of the rightmost instance of the search string
//Doc
//Doc SRC 2012/06/19
//Doc
//Doc INPUTS (arguments)
//Doc name         type     description
//Doc
//Doc source       string   the string within which to search for the "mark" string
//Doc mark         string   the string to locate within the "source" string
//Doc
//Doc OUTPUTS (returned)
//Doc
//Doc terminal     string   The "residue" of the source string that is to the right of the
//Doc                       last instance of the search string
//Doc
//Doc NOTES: This is useful for operations such as identifying the file name at the end
//Doc  of a URL pathname.
//Doc
//Doc Finish


string TerminalStringAfterLastInstanceOfSearchString(string source, string mark){
   int length_s = String.Length(source);
   int length_m = String.Length(mark);
   int i, mark_location;

   if (length_m >= length_s) return "";

   mark_location =  LocateLastInstance(source, mark);


   if (mark_location == -1) return "";


   return String.Mid(source, (mark_location + 1), (length_s - 1)); 
}







//Doc Start
//Doc Header int SeparateDelimitedStrings(hobject obj, string delimited_string, string delimiter, string name);
//Doc
//Doc Descr: Given a string with the format "[Section_name]key_name", extract the
//Doc  section_name and section_key strings. These strings are returned as handle
//Doc  properties
//Doc
//Doc SRC 2012/06/19
//Doc
//Doc INPUTS (arguments)
//Doc name             type     description
//Doc
//Doc obj              hobject  object handle used for returned values (via handle properties)
//Doc delimited_string string   the character string that contains the wanted strings, separated by character delimiters
//Doc delimiter        string   the character sequence that serves as the delimiter of the wanted strings.
//Doc name             string   the property name to use in the handle array that contains the returned string values
//Doc
//Doc OUTPUTS (returned)
//Doc
//Doc error_code       int      Error code describing the kind of termination the function experienced
//Doc                           -1: No error encountered
//Doc                            1: the delimited string has no information. This can occur if the string
//Doc                              has null length or if it is filled with delimiters with not string information
//Doc                              between the delimiters
//Doc                            2: the delimiter string is empty
//Doc                            3: the output property handle property name is already in use
//Doc                            4: error encountered in creating or adding handle property
//Doc
//Doc OUTPUTS (handle properties)
//Doc
//Doc array_name       int      the number of string elements in the array
//Doc
//Doc string_values    string   the separated string values are stored in string properties with names
//Doc                           "array_name_N" with N the 0-referenced array element index
//Doc 
//Doc NOTES: the delimiter string is understood to separate string data elements. So if there is a
//Doc  an instance of the delimiter string at the very beginning of the delimited_string, then the 
//Doc  first data element will be taken to be a null string. If there is an instance of the delimiter 
//Doc  string at the very end of the delimited_string, then the last data element will be taken to be
//Doc  a null string.
//Doc
//Doc Finish


int SeparateDelimitedStrings(hobject obj, string delimited_string, string delimiter, string name){
   int delimiter_count, delimiter_size, delimiter_index, string_start_index, string_size, output_size;
   string found_string;
   bool at_end;

   iHUD.Print( String.Join(String.Join( "StringUtil: DELIMITED: ", delimited_string), String.Join(" delimiter: ", delimiter)) );
   if (delimited_string == "") return 1;
   if (delimiter == "") return 2;
   if (Object.PropertyExists(obj, name)) return 3;

   delimiter_count = NumberOfNonoverlappingInstances(delimited_string, delimiter);

   iHUD.Print( String.FormatInt(" Separate: Delimiter Count = %d", delimiter_count));

   delimiter_size = String.Length(delimiter);
   string_size = String.Length(delimited_string);

   if (string_size == (delimiter_size * delimiter_count)) return 1;

   if (-1 != iObjectPropertiesUtil.AddArrayProperty(obj, name, "string")) return 4;

   iHUD.Print(" After ADDARRAYPROPERTY");

   at_end = false;

   while (!at_end){

      delimiter_index = Locate(delimited_string, delimiter);

      if (delimiter_index == 0){			// null string prior to delimiter
         found_string = "";
         output_size = 0;

      }
      else if (delimiter_index < 0){			// no more delimiters
         found_string = delimited_string;
         at_end = true;    
      }
      else{						// string data prior to delimiter
							// extract delimited data
         found_string = String.Mid(delimited_string, 0, delimiter_index);
         output_size = String.Length(found_string);
      }

      iHUD.Print(String.Join(" Found String: ", found_string));

							// add the current string to the string array property

      if (-1 != iObjectPropertiesUtil.AddStringArrayPropertyTail(obj, name, found_string)) return 4;


      if (!at_end){					// set up for the next loop
         string_start_index = delimiter_index + delimiter_size;

         string_size = string_size - delimiter_size - output_size;

         if (string_size == 0){
            delimited_string = "";
         }
         else{
            delimited_string = String.Mid(delimited_string, string_start_index, string_size);
         }
      }
      else{
         break;
      }

   }

   iHUD.Print(" string Util: Separate  Delimited Strings: Normal termination");
   return -1;
}





//Doc Start
//Doc Header int ParseSectionKey(hobject obj, string section_key)
//Doc
//Doc Descr: Given a string with the format "[Section_name]key_name", extract the
//Doc  section_name and section_key strings. These strings are returned as handle
//Doc  properties
//Doc
//Doc SRC 2012/06/19
//Doc
//Doc INPUTS (arguments)
//Doc name         type     description
//Doc
//Doc obj          hobject  object handle used for returned values (via handle properties)
//Doc section_key  string   section and key designator in format "[Section_name]Key_name"
//Doc
//Doc OUTPUTS (returned)
//Doc
//Doc error_code   int      Error code describing the kind of termination the function experienced
//Doc                       -1: No error encountered
//Doc                        1: badly formatted or undefined "[Section_name]" part of the section_key
//Doc                        2: Key_name is undefined
//Doc
//Doc OUTPUTS (handle properties)
//Doc
//Doc Section      string   the name of the section defined within the "[...]" part of the
//Doc                       "section_key" input parameter. This is stored in the handle string property
//Doc                       "section name"
//Doc Key          string   the name of the key defined after the "[...]" part of the "section_key"
//Doc                       input parameter. This is stored in the handle string property "section name"
//Doc
//Doc NOTES: This is useful for operations involving searches for keys in INIFile data structures
//Doc
//Doc Finish


int ParseSectionKey(hobject obj, string section_key){
   int end_location, key_size;
   string section_name, key_name;
							// Validate inputs and extract parameters for later use:
							// section_1, keyname_1 and optionally section_2, keyname_2

   if (section_key == "") return 1;

   if (String.Left( section_key, 1) != "[") return 1;
   if (NumberOfNonoverlappingInstances( section_key, "]") != 1) return 1;
							// extract and validate the Primary "[Section]" substring
   end_location = Locate( section_key, "]");

   if (end_location == 1) return 1;			// the Section string has 0 length

   section_name = String.Mid( section_key, 1, (end_location-1) );

   key_size = String.Length( section_key );

   if (key_size == (end_location + 1)) return 2;	// the key name has 0 length

   key_name = String.Mid( section_key, (end_location + 1), (key_size - end_location + 1));

   iHUD.Print( String.Join( String.Join(String.Join("Section_key: ", section_key), String.Join( " |  section: ", section_name)),  String.Join(" | key: ", key_name)));

   return -1;
}


//Doc Start
//Doc Header int ParseSectionKeys(hobject obj, string section_keys)
//Doc
//Doc Descr: Given a string with the format "[Section_name]key1_name&key2_name...&keyN_name", extract the
//Doc  section_name and section_keys strings. These strings are returned as handle
//Doc  properties
//Doc
//Doc SRC 2012/06/19
//Doc
//Doc INPUTS (arguments)
//Doc name         type     description
//Doc
//Doc obj          hobject  object handle used for returned values (via handle properties)
//Doc section_keys  string  section and key(s) designator in format "[Section_name]Key1_name&Key2_name...&KeyN_name"
//Doc
//Doc OUTPUTS (returned)
//Doc
//Doc error_code   int      Error code describing the kind of termination the function experienced
//Doc                       -1: No error encountered
//Doc                        1: badly formatted or undefined "[Section_name]" part of the section_key
//Doc                        2: Key_name is undefined
//Doc
//Doc OUTPUTS (handle properties)
//Doc
//Doc Section      string   the name of the section defined within the "[...]" part of the
//Doc                       "section_key" input parameter. This is stored in the handle string property
//Doc                       "section name"
//Doc Key1 to KeyN string   the name(s) of the key(s) defined after the "[...]" part of the "section_keys"
//Doc                       input parameter. This is stored in the handle string array property "section name"
//Doc
//Doc NOTES: This is useful for operations involving searches for keys in INIFile data structures
//Doc
//Doc Finish


int ParseSectionKeys(hobject obj, string section_keys){
   int end_location, key_size, keys_length;
   string section_name, keys, key_name;
							// Validate inputs and extract parameters for later use:
							// section_1, keyname_1 and optionally section_2, keyname_2

   if (section_keys == "") return 1;

   if (String.Left( section_keys, 1) != "[") return 1;

// need a test that there is no "[" before the first "]}


   if (NumberOfNonoverlappingInstances( section_keys, "]") != 1) return 1;


							// extract and validate the Primary "[Section]" substring
   end_location = Locate( section_keys, "]");

   if (end_location == 1) return 1;			// the Section string has 0 length

   section_name = String.Mid( section_keys, 1, (end_location-1) );

   key_size = String.Length( section_keys );

   if (key_size == (end_location + 1)) return 2;	// the key name has 0 length

							// split off the key(s) section

   keys_length = key_size - (end_location + 1);

   keys = String.Mid(section_keys, (end_location + 1), keys_length);

// use a "split delimited string" function




   key_name = String.Mid( section_keys, (end_location + 1), (key_size - end_location + 1));

   iHUD.Print( String.Join( String.Join(String.Join("Section_key: ", section_keys), String.Join( " |  section: ", section_name)),  String.Join(" | key: ", key_name)));

   return -1;
}



