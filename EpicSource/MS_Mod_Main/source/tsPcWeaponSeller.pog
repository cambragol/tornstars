//*******************************************************************************************/
//
// tsPcWeaponSeller
//
// This pog object implements weapons sellers that will sell player ship systems
// 
//
// June 2005, Jon Freise
//
// Updates:
// 20-May-08 JW: Changed to pick ship template using tsShipCreation
//
//******************************************************************************************/

package tsPcWeaponSeller;

//[of]:Imports
uses    Sim,
        iShip,
        iSim,
        Debug,
        Global,
        GUI,
        iGUI,
        iHUD,
        INIFile,
        Input,
        List,
        Object,
        String,
        Task,
        Text,
        Math,
        iShipCreation,
        iComms,
        iConversation,
        iAI,

        tsPcOwner,
        tsShipComms,
        tsShip,
        tsLRoot,
        tsLTrade,
        tsFaction,
        tsEquipBuy,
        tsMoney,
		tsShipCreationEnum,
		tsShipCreation,
        tsShipName,
        tsCull;
//[cf]


//[of]:Exports
provides PogCreate,
         PogStart,
         Comms,
         CriminalComms;
//[cf]



prototype setup_trade_ship(hisim marker);

prototype string type2comms(string seller_type);



hsim PogCreate(string template_name, string object_name)
{

   hinifile object_file;
   string name;
   string item_template, pog_class, start_function;
   hsim item;

   debug Debug.PrintString("tsPcWeaponSeller.PogCreate\n");


   object_file = INIFile.Create(template_name);

   if (none == object_file) {
      debug {
         Debug.PrintString("tsPcWeaponSeller.PogCreate, failed to find object file\n");
      }

      return none;
   }

   // Pull needed items out of template file. Create the object.
   // Attach them
   pog_class = INIFile.String(object_file, "PogClass","name","none");


   ///********************
   // This block of code is class dependent. The rest must be done to adhere
   // to the pog object calling conventions.

   //name = tsShipName.ShipName( "general", Math.RandomInt(0, 343));
   //item_template = INIFile.String(object_file, "Properties","template","none");
   INIFile.Destroy(object_file);

   item = Sim.Create("ini:/sims/nav/waypoint","weapon_script_marker");
   Sim.SetCullable(item, false);

   //item = Sim.Create(item_template, name);

   if (none == item) {
      debug {
         Debug.PrintString("tsPcWeaponSeller.PogCreate, bad object template\n");
      }
      return none;
   }
   ///********************


   // All 
   Object.AddStringProperty(item, "gt_pog_object_class", pog_class);
   Object.AddStringProperty(item, "gt_pog_object_template", template_name);
   
   // finally mark this sim as an internal sim, i.e. created through an internal PogCreate process,
   Object.AddBoolProperty(item, "gt_pog_internal", true);

   return item;
}


/*
This function is called after the ship has been placed. 

*/
task PogStart(hsim pog_object)
{
   debug Debug.PrintString("tsPcWeaponSeller: starting\n");

   ///***************************************
   // This part of the start code is object dependent. The prior pieces must
   // be done to adhere to the pog class calling convention.

   setup_trade_ship(iSim.Cast(pog_object));

   ///***************************************
}

/*
; 
; Example INI file for setting up a hired ship.
; One of these template files should be created
; for each kind of ship that can be hired.
; Freighter, warship, etc.

[PogClass]
name=tsPcWeaponSeller

[Properties]

template=ini:/sims/ships/utility/freighter

// This is the file that specifies the cargo categories that this 
// weapon seller will provide.

trade_file="ini:/weapon_cargo"



// This is the entry used in the cargo trade_file to use 
// for this specific weapon seller. Look in the file for
// valid entry names.

seller_type="Civilian"



;There are two types of communications from this pog object
; legal - used for legal weapons and equipment dealers
; criminal - used for illegal weapons and equipment dealers

comm_type=legal

*/



/*
This code needs to be able to differentiate between being  called by
with being passed a waypoint coming from this packages PogCreate
or from an operation creation facility. The difference being we
do NOT want to delete the operation waypoint.
We use the 'internal' property existence to make that determination.

Read the ini file, setup the object.
*/
setup_trade_ship(hisim marker)
{
   hinifile control_file;
   bool is_internal;
   string template_file_name, comm_function;
   string seller_file, seller_type, station_string, comms, faction_ship_class;
   string name, ship_template;
   //float faction_standing;
   set habitats;
   hfaction station_faction;
   hsim owner;
   hhabitat start_station;
   hship ship;


   debug Debug.PrintString("tsPcWeaponSeller.setup_trade_ship: Start\n");

   // is  the marker from this packages internal source
   is_internal = Object.PropertyExists(marker, "gt_pog_internal");

   // since the marker has been placed in space we use it as a focus
   // to gather information: Nearby habitats, closest habitat to marker and faction of that closest habitat
   habitats = iMapEntity.SystemHabitats();
   start_station = iHabitat.Nearest(habitats, marker);
   owner = start_station;
   station_faction = iSim.Faction(start_station);

   // get the ini file from the waypoint and open it
   template_file_name = Object.StringProperty(marker, "gt_pog_object_template");
   control_file = INIFile.Create(template_file_name);

   // check for no ini file available
   if (none == control_file) {
      debug Debug.PrintString("ERROR tsPcWeaponSeller. invalid template_file\n");
      debug Debug.PrintString(template_file_name);
      debug Debug.PrintString("\n");
   }

   // Read in the weapon seller control properties and the ship class to be created
   seller_file = INIFile.String(control_file, "Properties", "trade_file", "ini:/weapon_cargo");
   seller_type = INIFile.String(control_file, "Properties", "seller_type", "Civilian");
   faction_ship_class = INIFile.String(control_file, "Properties", "faction_ship_class", "EST_FreightAll");

   // get the comms attribute
   comms = INIFile.String(control_file, "Properties", "comm_type", "legal");

   // close ini file
   INIFile.Destroy(control_file);

   // debug display what faction we will set the ship to
   debug {
   Debug.PrintString("tsPcWeaponSeller.setup_trade_ship: fation = ");
   Debug.PrintHandle(station_faction);
   Debug.PrintString(" <-- ");
   Debug.PrintString(tsFaction.EName(station_faction));
   Debug.PrintString("\n");
   }

   // Get a ship name and template name using tsShipCreation
   name = tsShipName.ShipName( "general", Math.RandomInt(0, 343));
   ship_template = tsShipCreation.GetShip(station_faction, tsShipCreation.String2ShipType(faction_ship_class));

   // create a ship sim
   ship = tsShip.Create(ship_template, name);

   if (ship == none) {
      debug Debug.PrintString("tsPcWeaponSeller.setup_trade_ship: ship failed to create\n");
      debug Debug.PrintString(ship_template);
      debug Debug.PrintString(" template\n");
      return;
   }


   // Setup the comms tasks
   tsShipComms.AddComms(ship, type2comms(comms));
   tsShipComms.DisplayComms(ship, true);


   // Set the owner for this ship and faction
   if(is_internal) {
       tsPcOwner.SetOwner(ship, start_station);
       iSim.SetFaction(iSim.Cast(ship), station_faction);
   } else
   {
       tsPcOwner.SetOwner(ship, marker);
	   iSim.SetFaction(iSim.Cast(ship), iSim.Faction(marker));
   }


   // Setup the trade properties for the seller. NB in this case owner = start_station
   tsLRoot.SetId(ship, tsLRoot.GetId(owner));
   tsLTrade.Create(ship, seller_file, seller_type);

   // Add the ship to the global cull list
   tsCull.AddSim(iSim.Cast(start_station), ship);

   /*
   debug{
      Debug.PrintString("seller file: ");
      Debug.PrintString(seller_file);
      Debug.PrintString("\n");

      Debug.PrintString("seller type: ");
      Debug.PrintString(seller_type);
      Debug.PrintString("\n");

   }
   */
   
   // finally place the sim in space at our marker
   Sim.PlaceAt(ship, marker);
   
   // We don't need the marker anymore if it is an internal on
   if(is_internal)
       Sim.Destroy(marker);
   
   debug Debug.PrintString("tsPcWeaponSeller.setup_trade_ship: End\n");
}


task Comms()
{
   hship ship;
   string ask_string;
   bool start_deal;
   hfaction player_faction, source_faction;

   ship = iShip.Cast(tsShipComms.CommsSource());

   // Turn off the comms display, now that the player knows he can talk to this ship.
   tsShipComms.DisplayComms(ship, false);

        
   // Start the conversation.
    iConversation.Begin();

    // pcws_legal_player_agrees, "Yes, Lets Deal"
    iConversation.AddResponse(
       "pcws_player_agrees",
       "pcws_player_agrees");       

    // pcws_legal_player_refuses, "No Thanks"
    iConversation.AddResponse(
       "pcws_player_refuses",
       "pcws_player_refuses");


   // psws_legal_ask_player, "We supply the finest in weapon systems. Care to look?"
    switch ( iConversation.Ask( ship, "", "pcws_legal_ask_player" ) )
    {
    case 1 :
       player_faction = tsFaction.PlayerFaction();
       source_faction = iSim.Faction(iSim.Cast(ship));
       start_deal = true;

       break;

    case 2 :
       // Player said no.
       // pcws_legal_player_said_no, "This is a dangerous place. You will be back." 
       iConversation.Say(ship,"", "pcws_legal_player_said_no");
       start_deal = false;
       break;

    default :
       // Player selected "Nothing"
       // pcws_legal_player_said_nothing, "The quiet type."
       iConversation.Say(ship,"", "pcws_legal_player_said_nothing");
       start_deal = false;
    }

    // Finish the conversation.
    iConversation.End();

    if (start_deal) {
       tsEquipBuy.TradeObjectStart(ship);
    }

}

task CriminalComms()
{
   hship ship;
   string ask_string;
   bool start_deal;
   hfaction player_faction, source_faction;

   ship = iShip.Cast(tsShipComms.CommsSource());

   // Turn off the comms display, now that the player knows he can talk to this ship.
   tsShipComms.DisplayComms(ship, false);



        // Start the conversation.
    iConversation.Begin();

    iConversation.AddResponse(
       "pcws_player_agrees",
       "pcws_player_agrees");

    // Response 2
    iConversation.AddResponse(
       "pcws_player_refuses",
       "pcws_player_refuses");

    // Ask the player a question and switch on their response.

    // pcws_crime_player_ask, "Can we hook you up with some 'restricted' equipment?"
    switch ( iConversation.Ask( ship, "", "pcws_crime_player_ask") )
    {
    case 1 :
       player_faction = tsFaction.PlayerFaction();
       source_faction = iSim.Faction(iSim.Cast(ship));

       start_deal = true;
       break;

    case 2 :
       // Player said no.
       // pcws_crime_refuse_reply, "Too bad. We have top of the line stuff. Real Navy."
       iConversation.Say(ship,"", "pcws_crime_refuse_reply" );
       start_deal = false;
       break;

    default :
       // pcws_crime_nothing_reply, "Suit yourself."
       start_deal = false;
       iConversation.Say(ship,"", "pcws_crime_nothing_reply" );
    }

    // Finish the conversation.
    iConversation.End();

    if (start_deal) {
       tsEquipBuy.TradeObjectStart(ship);
    }

}

// Turns the specified two types of communications into
// the proper comm task call name.
string type2comms(string seller_type)
{
    if ("legal" == seller_type) {
        return "tsPcWeaponSeller.Comms";
    }else {
        return "tsPcWeaponSeller.CriminalComms";
    }

    return "tsPcWeaponSeller.Comms";
}

/*   

THIS MOD IS NOT MADE, DISTRIBUTED, OR SUPPORTED BY INFOGRAMES
OR PARTICLE SYSTEMS LTD. 

ELEMENTS TM & (C) INFOGRAMES AND PARTICLE SYSTEMS LTD.
*/
