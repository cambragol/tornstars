//*******************************************************************************************/
//
// tPcRumorSeller
//
// This pog object implements a ship that will sell the player the location of a hidden station.
// 
//
// June 2005, Jon Freise
//******************************************************************************************/

package tPcRumorSeller;

uses    Sim,
        iShip,
        iSim,
        Debug,
        Global,
        GUI,
        iGUI,
        iHUD,
        INIFile,
        Input,
        List,
        Object,
        String,
        Task,
        Text,
        Math,
        iShipCreation,
        iComms,
        iConversation,
        iMapEntity,
        iHabitat,
        tTime,
        tEconUtil,
        tStationEnum,
        tStationFilter,
        tUnderOp,
        tUnderOpFilter,
        tEpicComms,
        tEpicFleet,
        tEFaction,
        tEpicMoney,
        tShipName,
        tLCenter,
        tLProduction,
        tsCull;


provides PogCreate,
         PogStart,
         Comms;
   

prototype setup_ship(hsim ship);

prototype hhabitat find_hidden_base();

prototype hhabitat find_hidden_fence();

prototype bool has_unknown_fence(hmapentity location);

prototype give_location(hhabitat station, hship ship, int hire_fee, bool fence);

/*
   Test code just looks up a sim type from the properties section of 
   the class instance INI file. It creates that Sim and passes it 
   back.

*/

hsim PogCreate(string template_name, string object_name)
{

   hinifile object_file;
   string name;
   string item_template, pog_class, start_function;
   hsim item;

   debug Debug.PrintString("PogClass.PogCreate\n");

   object_file = INIFile.Create(template_name);

   if (none == object_file) {
      debug {
         Debug.PrintString("tPcRumorSeller.PogCreate, failed to find object file\n");
      }

      return none;
   }

   // Pull needed items out of template file. Create the object.
   // Attach them

   pog_class = INIFile.String(object_file, "PogClass","name","none");


   ///********************
   // This block of code is class dependent. The rest must be done to adhere
   // to the pog otbject calling conventions.

   item_template = INIFile.String(object_file, "Properties","template","none");

   INIFile.Destroy(object_file);



   name = tShipName.ShipName( "general", Math.RandomInt(0, 343));

   item = Sim.Create(item_template, name);

   if (none == item) {
      debug {
         Debug.PrintString("tPcRumorSeller.PogCreate, bad object template\n");
      }
      return none;
   }
   ///********************


   // All 
   Object.AddStringProperty(item, "gt_pog_object_class", pog_class);
   Object.AddStringProperty(item, "gt_pog_object_template", template_name);

      
   return item;
}


/*
This function is called after the ship has been placed. 

*/
task PogStart(hsim pog_object)
{
   debug Debug.PrintString("tPcRumorSeller: starting\n");

   ///***************************************
   // This part of the start code is object dependent. The prior pieces must
   // be done to adhere to the pog class calling convention.

   setup_ship(pog_object);

   ///***************************************
}

/*
; 
; Example INI file for setting up a hired ship.
; One of these template files should be created
; for each kind of ship that can be hired.
; Freighter, warship, etc.

[PogClass]
name=tPcRumorSeller

[Properties]

template=ini:/sims/ships/utility/freighter

ship_template="ship ini string"
hiring_fee=integer one time hiring fee
faction_standing=float, minimum faction standing the player must have

; This code will be called by the players communication subsystem
; It will check to see if the player has a high enough standing to hire the ship.
; Then it will offer the player the choice of hiring. It will display fee info.
; 
comm_start_function="tRumorSellerComm.Freighter"


*/



// Read the ini file, setup the object. 
setup_ship(hsim ship)
{
   hinifile control_file;
   int base_fee, fence_fee;
   string template_file_name, comm_function;
   float faction_standing;
   hfaction faction;
   hhabitat station;

   template_file_name = Object.StringProperty(ship, "gt_pog_object_template");

   control_file = INIFile.Create(template_file_name);

   if (none == control_file) {
      debug Debug.PrintString("ERROR tPcRumorSeller. invalid template_file\n");
      debug Debug.PrintString(template_file_name);
      debug Debug.PrintString("\n");
   }

   base_fee = INIFile.Int(control_file, "Properties", "hiring_fee", 1005);
   fence_fee = INIFile.Int(control_file, "Properties", "hiring_fee_fence", 105);

   
   faction_standing = tEFaction.String2LowerLevel(INIFile.String(control_file, 
                                                                 "Properties", 
                                                                 "faction_standing",
                                                                 "FT_Neutral"));

   Object.AddIntProperty(ship, "gtRumorSellerFee", base_fee);
   Object.AddIntProperty(ship, "gtRumorSellerFenceFee", fence_fee);
   Object.AddFloatProperty(ship, "gtRumorSellerStanding", faction_standing);

   INIFile.Destroy(control_file);


   tEpicComms.AddComms(ship, "tPcRumorSeller.Comms");

   tEpicComms.DisplayComms(ship, true);

   // Rumor sellers always belong to the same faction as
   // the station where they have been placed. This is the 
   // most flexible solution.

   station = iHabitat.Nearest(iMapEntity.SystemHabitats(),ship);
   faction = iSim.Faction(iSim.Cast(station));
   iSim.SetFaction(iSim.Cast(ship), faction);

   tsCull.AddSim(iSim.Cast(station), ship);
}





task Comms()
{
   hship ship;
   hisim waypoint;
   hfaction player = tEFaction.PlayerFaction();
   hfaction source_faction;
   string ask_string, info_string;
   int base_fee, fence_fee;
   float standing;
   hhabitat base_location;
   hhabitat fence_location;
   hhabitat station;
   int day;
   

   ship = iShip.Cast(tEpicComms.CommsSource());

   // Turn off the comms display, now that the player knows he can talk to this ship.
   tEpicComms.DisplayComms(ship, false);





   // Check if the rumor seller will talk to the player.
   standing = Object.FloatProperty(ship, "gtRumorSellerStanding");
   source_faction = iSim.Faction(iSim.Cast(ship));

   if (standing > iFaction.Feeling(source_faction, player)) {
          
      // pcrs_reputation_low, "Sorry, your reputation is not good enough to trust you." 
      iConversation.OneLiner(ship,"", "pcrs_reputation_low");
      return;
   }





   // Check if we have already given a rumor out today.
   if (Global.Exists("gt_pcrumor_seller")) {

      day = Global.Int("gt_pcrumor_seller");
      if (tTime.GetDay() <= day) {
         // pcrs_no_rumor_today, "I have no new rumors to tell you. Come back another day."
         iConversation.OneLiner(ship,"","pcrs_no_rumor_today");
         return;
      }
   }



   base_location = find_hidden_base();
   fence_location = find_hidden_fence();

   if ((none == base_location) && (none == fence_location)) {
      // pcrs_player_knows_all, "You already know everything. Now get!"
      iConversation.OneLiner(ship,"","pcrs_player_knows_all");
      return;
   }

   base_fee = Object.IntProperty(ship, "gtRumorSellerFee");
   fence_fee = Object.IntProperty(ship, "gtRumorSellerFenceFee");






   // Start the conversation.
   iConversation.Begin();

    // pcrs_player_refuses, "No, Thanks"
    iConversation.AddResponse(
       "pcrs_player_refuses",
       "pcrs_player_refuses_say");


    if (fence_location != none) {

       ask_string = String.FormatInt("$ %d", fence_fee);
       ask_string = String.Join(Text.Field("pcrs_player_agrees_fence",FT_Text), ask_string);
       // pcrs_player_agrees_fence, "Yes, Fence $credits"
       iConversation.AddResponse(
          ask_string,
          "pcrs_player_agrees_fence_say");
    }


    if (base_location != none) {

       ask_string = String.FormatInt("$ %d", base_fee);
       ask_string = String.Join(Text.Field("pcrs_player_agrees_base",FT_Text), ask_string);
       // pcrs_player_agrees_station, "Yes, Base"
       iConversation.AddResponse(
          ask_string,
          "pcrs_player_agrees_base_say");
    }


    // Ask the player a question and switch on their response.
    switch ( iConversation.Ask( ship, "","pcrs_ask_player" ) )
    {
    case 1 :

       // Player said no.
       // pcrs_player_refuse_reply, "If you want cheap weapons or need to unload some hot cargo, stop back."
       iConversation.Say(ship,"", "pcrs_player_refuse_reply" );
       break;

    case 2 :

       // player said yes to fence (or station is there are no fences)
       if (fence_location != none) {
          give_location(fence_location, ship, fence_fee, true);
       }else {
          give_location(base_location, ship, base_fee, false);
       }
       break;

    case 3 :
       // player said yes to station.
       give_location(base_location, ship, base_fee, false);
       break;

    default :
       // Player selected "Nothing"
       //iConversation.Say(ship,"", "" );
       break;
    }

    // Finish the conversation.
    iConversation.End();
}






give_location(hhabitat station, hship ship, int hire_fee, bool fence)
{
   hisim waypoint;
   string info_string;

   if (hire_fee >= tEpicMoney.ShipAccount()) {
      // pcrs_no_credits, "Sorry, you don't have the credits." 
      iConversation.Say(ship,"", "pcrs_no_credits");
   }else {
      debug Debug.PrintString("tPcRumorSeller.give_location\n");

      // Charge the player
      tEpicMoney.ChangeShipAccount(-1*hire_fee);
      // debug Debug.PrintString(String.FormatInt("Ship account %d\n",tEpicMoney.ShipAccount()));


      // Mark that we sold the player a rumor in this system on this day.
      // We will wait to sell another.
      Global.CreateInt("gt_pcrumor_seller", GA_Write, tTime.GetDay());

      // Let the player see this location.
      iMapEntity.SetMapVisibility(station, true);

      waypoint = iSim.Cast(Sim.Create("ini:/sims/nav/waypoint","Rumor Location"));
      Sim.SetCullable(waypoint, false);
      iSim.SetSensorVisibility(waypoint, true);
      Sim.PlaceAt(waypoint, station);

      iHUD.SetTarget(waypoint);


      // Tell the player this is an operation hidden inside a station
      if (fence) {
         // There is a fence that hangs out at "
         iConversation.Say(ship,"", "pcrs_fence_intro");
      }else {
         // pcrs_station_desc, "The base I know about is a " 
         info_string = String.Join(Text.Field("pcrs_station_desc", FT_Text),
                                   Text.Field(tEconUtil.StationIntToString(tLProduction.GetType(station)), FT_Text));
         iConversation.Say(ship,"", info_string);
      }

      Task.Sleep(Task.Current(), 0.75);            

      // Now tell the player the physical location
      // pcrs_station_name, "The location is called " 
      info_string = String.Join(Text.Field("pcrs_station_name", FT_Text),
                                Text.Field(Sim.Name(station), FT_Text));

      iConversation.Say(ship,"", info_string);

      Task.Sleep(Task.Current(), 0.75);

      // pcrs_dropped_nav, "I have placed a nav point at the location"
      iConversation.Say(ship,"","pcrs_dropped_nav");

      Task.Sleep(Task.Current(), 0.75);
   }
}





hhabitat find_hidden_base()
{
   string system = iSim.ActiveWorld();
   hhabitat station;

   list habitats;
   int i, total;

   // Find all the operating pirate stations in the system.
   habitats = List.FromSet( tStationFilter.OnMapVisible(
                                   tStationFilter.OnStatusAndCategory(
                                      iMapEntity.SystemHabitats(), 
                                      ESS_Normal, 
                                      ESC_Pirate), 
                                   false));


/*
   habitats = List.FromSet(tStationFilter.OnStatusAndCategory(
                                      iMapEntity.SystemHabitats(), 
                                      ESS_Normal, 
                                      ESC_Pirate));
                                      */
   total = List.ItemCount(habitats);

   debug {
      Debug.PrintString(String.FormatInt("Hidden bases %d\n", total));
   }

   if (total == 0) {
      return none;
   }else if (total == 1) {
      return iHabitat.Cast(List.Head(habitats));
   }

   return iHabitat.Cast(List.GetNth(habitats, Math.RandomInt(0,(total -1))));
}




hhabitat find_hidden_fence()
{
   string system = iSim.ActiveWorld();
   hhabitat station;
   list habitats, operations, hidden;
   int i, total;

   // Only show fences that are around known stations, to keep the player
   // from paying the fence cost, but getting a station for free.
   habitats = List.FromSet(tStationFilter.OnMapVisible(iMapEntity.SystemHabitats(), true));

   total = List.ItemCount(habitats);
   for (i=0;i<total;++i) {
      station = iHabitat.Cast(List.GetNth(habitats, i));

      if (has_unknown_fence(station)) {
         List.AddTail(hidden, station);
      }
   }

   total = List.ItemCount(hidden);

   debug {
      Debug.PrintString(String.FormatInt("Hidden fences %d\n", total));
   }

   if (total == 0) {
      return none;
   }else if (total == 1) {
      return iHabitat.Cast(List.Head(hidden));
   }

   return iHabitat.Cast(List.GetNth(hidden, Math.RandomInt(0,(total -1))));
}





bool has_unknown_fence(hmapentity location)
{
   list op_list;
   
   op_list = tUnderOpFilter.FilterKnown(tUnderOp.StationOperationsOfType(location, ept_EmbezzleOp), false);

   if (!List.IsEmpty(op_list)) {
      return true;
   }

   return false;
}


/*   

THIS MOD IS NOT MADE, DISTRIBUTED, OR SUPPORTED BY INFOGRAMES
OR PARTICLE SYSTEMS LTD. 

ELEMENTS TM & (C) INFOGRAMES AND PARTICLE SYSTEMS LTD.
*/
