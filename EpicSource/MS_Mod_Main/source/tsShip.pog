//*******************************************************************************************/
//
// tsShip.pog
//
// 
//
// Nov 2006, Jon Freise
//
//******************************************************************************************/

package tsShip;

uses    Sim,
        iShip,
        iSim,
        iPilotSetup,
        Debug,
        Global,
        GUI,
        iDirector,
        iGUI,
        iHUD,
        iHabitat,
        iMapEntity,
        INIFile,
        Input,
        List,
        Object,
        String,
        Task,
        Text,
        iUtilities,
        iCargo,
        iInventory,
        iComms, 
        iAi,
        iWingmen,
        iRemotePilot,
        iDeathScript,
        iGame,
        Math,
        iInventory,
        iConversation,
        CargoTypes,
   
        tStationEnum,
        tEconUtil,
        tPodUtil,
        tEpicComms,
        tFormation,
        tsFaction; 





provides 
        Fuel,
        SetFuel,

        FuelMax,
        SetFuelMax,

        FuelPerJump,
        SetFuelPerJump,

        DailyFuel,
        SetDailyFuel,

        DailyUpkeep,
        SetDailyUpkeep,
        
        World,
        SetWorld,
        ShipPodList,
   
        DockParent,

        IsMiner,
        IsProspector,
        IsLongRangeScan,
        IsTanker,
        IsWarship,

        ReadIniFile,
    
        Create,

        SetSaveId,
        SaveId,
        FindSubsimByTemplateNumber,
        ReplaceSubsim;


 
prototype hsubsim FindSubsimByTemplateNumber(hship ship, int template_number);


// Reading INI defaults
prototype float default_max_fuel(int ship_type);
prototype float default_daily_fuel(int ship_type);
prototype float default_jump_fuel(int ship_type);
prototype int default_daily_cost(int ship_type);

prototype ReadIniFile(hship ship);

prototype tag_subsims(hship ship);

prototype add_hardpoints(hship ship, hinifile ship_file);




int float2int(float number)
{
   return number;
}

float int2float(int number)
{
   return number;
}


SetSaveId(hship ship, int id)
{
   Object.AddIntProperty(ship, "tsss_save_id", id);
}

int SaveId(hship ship)
{
   return Object.IntProperty(ship, "tsss_save_id");
}


// This is the maximum level of fuel that
// can be loaded into the ship.
SetFuelMax(hship ship, float fuel_maximum)
{
   if (Object.PropertyExists(ship, "max_fuel")) {
      Object.SetFloatProperty(ship, "max_fuel", fuel_maximum);
   }else{
      Object.AddFloatProperty(ship, "max_fuel", fuel_maximum);
   }
}

float FuelMax(hship ship)
{
   return Object.FloatProperty(ship, "max_fuel");
}



// This is the current level of fuel in the ship. Zero
// is the lowest and max_fuel is the highest value.
// When this number hits zero, the ship cannot move
// or fight.
SetFuel(hship ship, float fuel_used)
{
   // Clip current fuel supply to the ships limits.
   if (fuel_used < 0.0)
   {
      fuel_used = 0.0;
   }else if (fuel_used > FuelMax(ship))
   {
      fuel_used = FuelMax(ship);
   }

   if (Object.PropertyExists(ship, "fuel")) {
      Object.SetFloatProperty(ship, "fuel", fuel_used);
   }else{
      Object.AddFloatProperty(ship, "fuel", fuel_used);
   }
}

float Fuel(hship ship)
{
   return Object.FloatProperty(ship, "fuel");
}




// This is the amount of fuel the ship uses to make one capsule jump.
SetFuelPerJump(hship ship, float fuel_per_jump)
{
   if (Object.PropertyExists(ship, "jump_fuel")) {
      Object.SetFloatProperty(ship, "jump_fuel", fuel_per_jump);
   }else{
      Object.AddFloatProperty(ship, "jump_fuel", fuel_per_jump);
   }
}

float FuelPerJump(hship ship)
{
   return Object.FloatProperty(ship, "jump_fuel");
}



// This is the amount of fuel a ship burns for reactor power and
// using thrusters to move around.
SetDailyFuel(hship ship, float fuel_amount)
{
   if (Object.PropertyExists(ship, "daily_fuel")) {
      Object.SetFloatProperty(ship, "daily_fuel", fuel_amount);
   }else{
      Object.AddFloatProperty(ship, "daily_fuel", fuel_amount);
   }
}

float DailyFuel(hship ship)
{
   return Object.FloatProperty(ship, "daily_fuel");
}



// This is the cost in credits of operating a ship for one day.
// The credit cost pays for ship upkeep, standard expenses, and crew.
// Fuel is not included.
SetDailyUpkeep(hship ship, int daily_cost)
{
   if (Object.PropertyExists(ship, "daily_cost")) {
      Object.SetIntProperty(ship, "daily_cost", daily_cost);
   }else{
      Object.AddIntProperty(ship, "daily_cost", daily_cost);
   }
}

int DailyUpkeep(hship ship)
{
   return Object.IntProperty(ship, "daily_cost");
}



SetWorld(hship ship, string world)
{
   if (Object.PropertyExists(ship, "EpicFleetWorld")) {
      Object.SetStringProperty(ship, "EpicFleetWorld", world);
   }else{
      Object.AddStringProperty(ship, "EpicFleetWorld", world);
   }
}

string World(hship ship)
{
   return Object.StringProperty(ship, "EpicFleetWorld");
}


// Returns all cargo pods docked to a ship.
list ShipPodList(hsim ship)
{
   set pods;
   list docked_pods;
   hsim child;

   // Search all subsims for cargo pods.
   
   pods = Sim.Children(ship);

   while (!Set.IsEmpty(pods)) {
      child = Sim.Cast(Set.FirstElement(pods));
      Set.Remove(pods, child);

      if (T_CargoPod == iSim.Type(child)) {
         List.AddTail(docked_pods, child);
      }
   }

   return docked_pods;
}

// Creates a ship from it's template and attaches all the epic specific data 
// that is needed.
hship Create(string ini_file, string name)
{
   hship ship;

   ship = iShip.Create(ini_file, name);

   if (none != ship) {
      ReadIniFile(ship);
   }

   return ship; 
}

// Read in the INI file, attach the properties to the ship.
ReadIniFile(hship ship)
{

   hinifile ship_file;
   float max_fuel;
   float daily_fuel;
   float jump_fuel;
   int daily_cost;
   int ship_type;
   int tanker, miner, prospector, study_days, scan_range;
   float mining_efficiency;
   string template_name;

   template_name = Sim.TemplateName(ship);

   if (template_name == "") {
      // The player ship has no template. So we pick a new one based on ships class.
      switch (iSim.Type(ship)) {
      case T_CommandSection:
         template_name = "ini:/sims/ships/player/comsec";
         break;
      case T_Tug:
         template_name = "ini:/sims/ships/player/tug";
         break;
      case T_Patcom:
         template_name = "ini:/sims/ships/player/fast_attack";
         break;
      case T_Corvette:
         template_name = "ini:/sims/ships/player/heavy_corvette";
         break;
      case T_Fighter:
      case T_Interceptor:
         template_name = "ini:/sims/ships/player/storm_petrel";
         break;
      default:
         break;
      }
   }

   ship_file = INIFile.Create(template_name);
   ship_type = iSim.Type(ship);

   max_fuel = INIFile.Float(ship_file,"Properties","max_fuel", default_max_fuel(ship_type));
   daily_fuel = INIFile.Float(ship_file,"Properties","daily_fuel", default_daily_fuel(ship_type));
   jump_fuel = INIFile.Float(ship_file,"Properties","jump_fuel", default_jump_fuel(ship_type));
   daily_cost = INIFile.Int(ship_file,"Properties","daily_cost", default_daily_cost(ship_type));
   tanker = INIFile.Int(ship_file,"Properties","tanker", 0);
   miner = INIFile.Int(ship_file,"Properties","miner", 0);
   mining_efficiency = INIFile.Float(ship_file,"Properties","mining_efficiency", 0);
   prospector = INIFile.Int(ship_file,"Properties","prospector", 0);
   study_days = INIFile.Int(ship_file,"Properties","study_days", 0);
   scan_range = INIFile.Int(ship_file,"Properties","scan_range", 0);



   // Attach the properties to the ship.
   Object.AddFloatProperty(ship, "fuel", max_fuel);
   Object.AddFloatProperty(ship, "max_fuel", max_fuel);
   Object.AddFloatProperty(ship, "daily_fuel", daily_fuel);
   Object.AddFloatProperty(ship, "jump_fuel", jump_fuel);
   Object.AddIntProperty(ship, "daily_cost", daily_cost);

   Object.AddIntProperty(ship, "tanker", tanker);
   Object.AddIntProperty(ship, "miner", miner);
   Object.AddFloatProperty(ship, "mining_efficiency", mining_efficiency);
   Object.AddIntProperty(ship, "prospector", prospector);
   Object.AddIntProperty(ship, "study_days", study_days);
   Object.AddIntProperty(ship, "scan_range", scan_range);

   Object.AddBoolProperty(ship, "fuel_locked", false);


   // Match up the template numbers to the created subsims.
   tag_subsims(ship);


   // Add any subsystems in the ships hardpoint list.
   add_hardpoints(ship, ship_file);


   INIFile.Destroy(ship_file);
}


// If this ship is docked to a larger ship, return that ship.
// Move this code to tsShip.
hisim DockParent(hship ship)
{
   return iSim.Cast(Sim.Parent(ship));
}

bool IsLongRangeScan(hship ship)
{
   return (Object.IntProperty(ship,"scan_range") >= 1);
}

bool IsProspector(hship ship)
{
   return (Object.IntProperty(ship,"prospector") >= 1);
}

bool IsMiner(hship ship)
{
   return (Object.IntProperty(ship,"miner") >= 1);
}

bool IsTanker(hship ship)
{
   return (Object.IntProperty(ship,"tanker") >= 1);
}




// Is this an armed ship? Transports and utility vessels are excluded.
bool IsWarship(hship ship)
{
   if (iSim.Type(ship) & (T_Fighter | T_Tug | T_Patcom | T_Interceptor | T_Corvette | T_Destroyer | T_Cruiser | T_Carrier)) {
      return true;
   }
   return false;
}









float default_max_fuel(int ship_type)
{

    //debug Debug.PrintString("tsShip.using default max fuel\n");

   switch (ship_type)
   {

   case 	T_Drone	: return 500.0; 
      break;
   case 	T_Waldo	: return 500.0; 
      break;
   case 	T_CommandSection: return 500.0; 
      break;
   case 	T_Utility			: return 500.0; 
      break;
   case 	T_Passenger			: return 500.0; 
      break;
   case 	T_Fighter			: return 500.0; 
      break;
   case 	T_Tug				: return 500.0; 
      break;
   case 	T_Patcom			: return 500.0; 
      break;
   case 	T_Interceptor	: return 500.0; 
      break;
   case 	T_Corvette		: return 500.0; 
      break;
   case 	T_Freighter		: return 500.0; 
      break;
   case 	T_Destroyer		: return 500.0; 
      break;
   case 	T_Cruiser		: return 500.0; 
      break;
   case 	T_Carrier		: return 500.0; 
      break;
   default: 
      break;
   }

   return 500.0;
}


float default_daily_fuel(int ship_type)
{
   
   switch (ship_type)
   {

   case 	T_Drone	: return 10.0; 
      break;
   case 	T_Waldo	: return 10.0; 
      break;
   case 	T_CommandSection: return 10.0; 
      break;
   case 	T_Utility			: return 10.0; 
      break;
   case 	T_Passenger			: return 10.0; 
      break;
   case 	T_Fighter			: return 10.0; 
      break;
   case 	T_Tug				: return 10.0; 
      break;
   case 	T_Patcom			: return 10.0; 
      break;
   case 	T_Interceptor	: return 10.0; 
      break;
   case 	T_Corvette		: return 10.0; 
      break;
   case 	T_Freighter		: return 10.0; 
      break;
   case 	T_Destroyer		: return 10.0; 
      break;
   case 	T_Cruiser		: return 10.0; 
      break;
   case 	T_Carrier		: return 10.0; 
      break;
   default: 
      break;
   }

   return 10.0;

}


float default_jump_fuel(int ship_type)
{
   switch (ship_type)
   {

   case 	T_Drone	: return 100.0; 
      break;
   case 	T_Waldo	: return 100.0; 
      break;
   case 	T_CommandSection: return 100.0; 
      break;
   case 	T_Utility			: return 100.0; 
      break;
   case 	T_Passenger			: return 100.0; 
      break;
   case 	T_Fighter			: return 100.0; 
      break;
   case 	T_Tug				: return 100.0; 
      break;
   case 	T_Patcom			: return 100.0; 
      break;
   case 	T_Interceptor	: return 100.0; 
      break;
   case 	T_Corvette		: return 100.0; 
      break;
   case 	T_Freighter		: return 100.0; 
      break;
   case 	T_Destroyer		: return 100.0; 
      break;
   case 	T_Cruiser		: return 100.0; 
      break;
   case 	T_Carrier		: return 100.0; 
      break;
   default: 
      break;
   }

   return 100.0;
}


int default_daily_cost(int ship_type)
{
   switch (ship_type)
   {

   case 	T_Drone	: return 10; 
      break;
   case 	T_Waldo	: return 10; 
      break;
   case 	T_CommandSection: return 10; 
      break;
   case 	T_Utility			: return 10; 
      break;
   case 	T_Passenger			: return 10; 
      break;
   case 	T_Fighter			: return 10; 
      break;
   case 	T_Tug				: return 10; 
      break;
   case 	T_Patcom			: return 10; 
      break;
   case 	T_Interceptor	: return 10; 
      break;
   case 	T_Corvette		: return 10; 
      break;
   case 	T_Freighter		: return 10; 
      break;
   case 	T_Destroyer		: return 10; 
      break;
   case 	T_Cruiser		: return 10; 
      break;
   case 	T_Carrier		: return 10; 
      break;
   default: 
      break;
   }

   return 10;
}


// This function reads the ships INI file and tries to match the template objects 
// against the found subsims. If it finds a match it tags the ships subsims with 
// the subsim class and the subsim template for use by the damage mod and loadout.

tag_subsims(hship ship)
{
   string template_name, subsim_template, subsim_name, subsim_class;
   hinifile ship_file;
   hinifile template_file;
   hsubsim subsim;
   int subsim_count, template_count;
   bool not_found;

   template_name = Sim.TemplateName(ship);

   if (template_name == "") {
      // No template, there is nothing we can do.
      debug Debug.PrintString("tsShip.tag_subsims ship has no template file\n");
      return;
   }

   debug {
      Debug.PrintString(template_name);
      Debug.PrintString(" ship type\n");
   }

   ship_file = INIFile.Create(template_name);   

   if (ship_file == none) {
      // Invalid ship template, there is nothing we can do
      debug Debug.PrintString("tsShip.tag_subsims invalid ship template file\n");
      return;
   }

   template_count = 0;
   while (INIFile.NumberedExists(ship_file,"Subsims","template",template_count)) {
      subsim_template = INIFile.NumberedString(ship_file,"Subsims","template",template_count,"");

      if ("" != subsim_template) {
         template_file = INIFile.Create(subsim_template);

         if (template_file != none) {
            subsim_class = INIFile.String(template_file,"Class","name","");
            subsim_name = INIFile.String(template_file,"Properties","name","");
            INIFile.Destroy(template_file);


            // Decrement through the ships subsims, looking for one by this name.
            subsim_count = Sim.SubsimCount(ship);
            not_found = true;
            do {
               subsim = Sim.NthSubsim(ship,subsim_count);

               if (subsim_name == Object.StringProperty(subsim,"name")) {
                  // Check if we already tagged this one.

                  /*
                  debug {
                     Debug.PrintHandle(subsim);
                     Debug.PrintString(" ");
                     Debug.PrintString(subsim_template);
                     Debug.PrintString(" ");
                     Debug.PrintInt(template_count);
                     Debug.PrintString("\n");
                  }
                  */

                  if (!Object.PropertyExists(subsim,"subsim_template")) {
                     not_found = false;
                     Object.AddStringProperty(subsim,"subsim_template", subsim_template);
                     Object.AddStringProperty(subsim,"subsim_class", subsim_class);
                     Object.AddIntProperty(subsim,"template_number", template_count);
                  }
               }

               --subsim_count;
            } while (not_found && (subsim_count > -1) );
         }
      }
      ++template_count;
   }


   INIFile.Destroy(ship_file);
}



// returns the subsim matching this template number.
hsubsim FindSubsimByTemplateNumber(hship ship, int template_number)
{
   int subsim_count = Sim.SubsimCount(ship);
   int i;
   hsubsim subsim;

   for (i=0;i<subsim_count;++i) {
      subsim = Sim.NthSubsim(ship,i);

      if (Object.IntProperty(subsim,"template_number") == template_number) {
         return subsim;
      }
   }

   return none;
}



/*
[Hardpoints]
hardpoint_name[0]="left_wing_mount"
template[0]="ini:/subsims/systems/player/heavy_pbc"
template_number[0]=15
hardpoint_type[0]=16
position[0]=(15,30,75)
orientation[0]=(0,90,0)

hardpoint_name[1]="right_wing_mount"
template[1]="ini:/subsims/systems/player/heavy_pbc"
template_number[1]=16
hardpoint_type[1]=16
position[1]=(15,30,-75)
orientation[1]=(0,90,0)
*/


add_hardpoints(hship ship, hinifile ship_file)
{
   string subsim_template, hardpoint_name, subsim_class;
   int template_number, hardpoint_type, count;
   float xpos, ypos, zpos, roll, pitch, yaw;
   hsubsim subsim;
   hinifile subsim_file;

   count = 0;
   while (INIFile.NumberedExists(ship_file,"Hardpoints","template",count)) {
      subsim_template = INIFile.NumberedString(ship_file,"Hardpoints","template", count,"");

      subsim_file = INIFile.Create(subsim_template);

      if (none != subsim_file) {
         subsim_class = INIFile.String(subsim_file,"Class","name","");
         INIFile.Destroy(subsim_file);

         subsim = Subsim.Create(subsim_template);

         if (none != subsim) {
            // Mark the ship as allowing loadout.
            Object.AddBoolProperty(ship,"hardpoints", true);

            hardpoint_name = INIFile.NumberedString(ship_file,"Hardpoints","hardpoint_name", count,"");
            template_number = INIFile.NumberedInt(ship_file,"Hardpoints","template_number", count, 0);
            hardpoint_type = INIFile.NumberedInt(ship_file,"Hardpoints","hardpoint_type", count, 0);
            xpos = INIFile.NumberedVectorX(ship_file,"Hardpoints","position",count);
            ypos = INIFile.NumberedVectorY(ship_file,"Hardpoints","position",count);
            zpos = INIFile.NumberedVectorZ(ship_file,"Hardpoints","position",count);

            yaw = INIFile.NumberedVectorX(ship_file,"Hardpoints","orientation",count);
            pitch = INIFile.NumberedVectorY(ship_file,"Hardpoints","orientation",count);
            roll = INIFile.NumberedVectorZ(ship_file,"Hardpoints","orientation",count);


            Object.AddStringProperty(subsim,"subsim_template", subsim_template);
            Object.AddStringProperty(subsim,"subsim_class", subsim_class);
            Object.AddVectorProperty(subsim, "position", xpos, ypos, zpos);
            Object.AddVectorProperty(subsim, "orientation", yaw, pitch, roll);
            Object.AddIntProperty(subsim,"template_number", template_number);
            Object.AddIntProperty(subsim,"hardpoint_type", hardpoint_type);
            Object.AddStringProperty(subsim,"hardpoint_name", hardpoint_name);

            Sim.AddSubsim(ship, subsim);
            Subsim.Place(subsim, xpos, ypos, zpos);
            Subsim.OrientateEuler(subsim, yaw, pitch, roll);
         }
      }
      ++count;
   }
}

// Replaces the passed in subsim with a new one created from template_name.
hsubsim ReplaceSubsim(hship ship, hsubsim subsim, string template_name)
{
   string hardpoint_name, subsim_class;
   int template_number, hardpoint_type;
   float xpos, ypos, zpos, roll, pitch, yaw;
   hsubsim new_subsim;
   hinifile subsim_file;

   if (Object.PropertyExists(subsim, "hardpoint_type")) {

      subsim_file = INIFile.Create(template_name);

      if (none != subsim_file) {
         subsim_class = INIFile.String(subsim_file,"Class","name","");
         INIFile.Destroy(subsim_file);

         subsim = Subsim.Create(template_name);

         if (none != subsim) {
            hardpoint_name = Object.StringProperty(subsim,"hardpoint_name");
            template_number = Object.IntProperty(subsim,"template_number");
            hardpoint_type = Object.IntProperty(subsim,"hardpoint_type");

            xpos = Object.VectorPropertyX(subsim,"position");
            ypos = Object.VectorPropertyY(subsim,"position");
            zpos = Object.VectorPropertyZ(subsim,"position");

            yaw =   Object.VectorPropertyZ(subsim,"orientation");
            pitch = Object.VectorPropertyZ(subsim,"orientation");
            roll =  Object.VectorPropertyZ(subsim,"orientation");

            Object.AddStringProperty(new_subsim,"subsim_template", template_name);
            Object.AddStringProperty(new_subsim,"subsim_class", subsim_class);
            Object.AddIntProperty(new_subsim,"template_number", template_number);

            Object.AddVectorProperty(new_subsim, "position", xpos, ypos, zpos);
            Object.AddVectorProperty(new_subsim, "orientation", yaw, pitch, roll);

            Object.AddIntProperty(new_subsim,"hardpoint_type", hardpoint_type);
            Object.AddStringProperty(new_subsim,"hardpoint_name", hardpoint_name);

            Sim.AddSubsim(ship, new_subsim);
            Subsim.Place(new_subsim, xpos, ypos, zpos);
            Subsim.OrientateEuler(new_subsim, yaw, pitch, roll);

            // Now remove the old subsim.
            Subsim.Destroy(subsim);

            return new_subsim;
         }
      }
   }

   return none;
}

/*  
THIS MOD IS NOT MADE, DISTRIBUTED, OR SUPPORTED BY INFOGRAMES
OR PARTICLE SYSTEMS LTD. 

ELEMENTS TM & (C) INFOGRAMES AND PARTICLE SYSTEMS LTD.
*/
