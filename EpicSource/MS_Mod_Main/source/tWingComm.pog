//*******************************************************************************************/
//
// tWingComm.pog
//
// This file implements player wingman commands.
// 
// 
// 
//
// June 2003, Jon Freise
//******************************************************************************************/

package tWingComm;

uses    Sim,
        iShip,
        iSim,
        iPilotSetup,
        Debug,
        Global,
        GUI,
        iDirector,
        iGUI,
        iHUD,
        iHabitat,
        iMapEntity,
        INIFile,
        Input,
        List,
        Object,
        String,
        Task,
        Text,
        iUtilities,
        iCargo,
        iInventory,
        iComms,
        iAi,
        iWingmen,
        iRemotePilot,
        iDeathScript,
        iMultiplay,
        iGame,
        iComms,
        tPodUtil,
        Math,
        tEpicFleet,
        tEPlayerOrders;

provides ClearCommand,
         KeyOne,
         KeyTwo,
         KeyThree,
         KeyFour,
         KeyFive,
         KeySix,
         KeySeven,
         KeyEight,
         KeyNine,
         KeyZero,
         Setup;


enum eWingCommState{
   WCS_GroupSelect = 0,
   WCS_Command,
   WCS_Empty,
   WCS_GroupComm,
   WCS_CargoComm,
   WCS_CombatComm,
   WCS_MiningComm
};

// External interface to the package
prototype   ReportIn(int group, hsim speaker);
prototype   ClearCommand();

// local functions to implement commands.
prototype clear_command();

prototype   select_group(int group);
prototype   halt();
prototype   defend_me();
prototype   attack();
prototype   defend();
prototype   dock();
prototype   approach();
prototype   cargo_command();
prototype   group_command();
prototype   remove_ship();
prototype   mining_command();
prototype   add_ship();

prototype   refuel();
prototype   refuel_all();
prototype   take_fuel();
prototype   refuel_player();

// Screen prompt aids for commands.
prototype   clear_prompt();
prototype   level_one_prompt();
prototype   cargo_prompt();
prototype   group_prompt();
prototype   combat_prompt();
prototype   mining_prompt();
prototype   empty_group_prompt();

// spoken acknoledgements
prototype halt_ack();
prototype defend_me_ack();
prototype attack_ack();
prototype defend_ack();
prototype dock_ack();
prototype approach_ack();
prototype flee_ack();
prototype capture_ack();
prototype bombard_ack();

prototype refuse_ack();
prototype empty_ack();

prototype move_group_ack(hsim ship);

prototype collect_pods_ack();
prototype undock_all_pods_ack();

// Numbered keypresses. Numbers select groups.
// ~ is the clear command key.

Setup()
{
   debug Debug.PrintString("tWingComm Setup\n");

   Global.CreateInt("gtWingCommDepth",GA_Write|GA_NoSave,WCS_GroupSelect);
   Global.CreateInt("gtWingCommGroup",GA_Write|GA_NoSave,0);
   Global.CreateInt("gtWingCommKey",GA_Write|GA_NoSave,0);

   Input.BindKey( "tWingComm.ClearCommand", "tWingComm.ClearCommand");

   Input.BindKey( "tWingComm.KeyOne","tWingComm.KeyOne");
   Input.BindKey( "tWingComm.KeyTwo", "tWingComm.KeyTwo"); 
   Input.BindKey( "tWingComm.KeyThree","tWingComm.KeyThree");

   Input.BindKey( "tWingComm.KeyFour", "tWingComm.KeyFour"); 
   Input.BindKey( "tWingComm.KeyFive","tWingComm.KeyFive");
   Input.BindKey( "tWingComm.KeySix", "tWingComm.KeySix"); 

   Input.BindKey( "tWingComm.KeySeven","tWingComm.KeySeven");
   Input.BindKey( "tWingComm.KeyEight","tWingComm.KeyEight");
   Input.BindKey( "tWingComm.KeyNine", "tWingComm.KeyNine"); 

   Input.BindKey( "tWingComm.KeyZero",  "tWingComm.KeyZero"); 

   // Pod Control Keys
   Input.BindKey( "tPodUtil.HackNearbyPods",  "tWingComm.HackCargo"); 

   Text.Add("csv:/TEXT/wing_text");
}

ClearCommand()
{
   iHUD.Print("Clear Command");

   clear_command();
}

clear_command()
{
   Global.SetInt("gtWingCommDepth",WCS_GroupSelect);
   Global.SetInt("gtWingCommGroup",0);
   Global.SetInt("gtWingCommKey",0);

   clear_prompt();
}

select_group(int group)
{
   list fleet;
   hsim leader;

   Global.SetInt("gtWingCommGroup",group);



   fleet = tEpicFleet.ReturnGroup(group);
   if (List.ItemCount(fleet) > 0) {
      level_one_prompt();
      Global.SetInt("gtWingCommDepth",WCS_Command);

      leader = Sim.Cast(List.Head(fleet));
      ReportIn(group, leader);
   }else {
      empty_group_prompt();
      Global.SetInt("gtWingCommDepth",WCS_Empty);
   }

   iHUD.Print(String.FormatInt("Group %d Selected", group));
}

// Test if the group is empty. Give audio warning to the player.
bool empty_group_check(int group)
{
   
   // There are no ships in this group yet. Beep.
   if (!tEPlayerOrders.GroupExists(group)) {
      empty_ack();
      clear_command();
      iHUD.PlayAudioCue(AC_InvalidInput);
      return true;
   }

   return false;
}


halt()
{
   int group = Global.Int("gtWingCommGroup");

   if (empty_group_check(group)) {
      return;
   }

   tEPlayerOrders.Halt(group);


   clear_command();
}

defend_me()
{
   int group = Global.Int("gtWingCommGroup");

   if (empty_group_check(group)) {
      return;
   }

   tEPlayerOrders.DefendMe(group);


   clear_command();

}

attack()
{
   int group = Global.Int("gtWingCommGroup");
   hship player = iShip.FindPlayerShip();
   hisim target;

   if (empty_group_check(group)) {
      return;
   }

   target = iShip.CurrentTarget(player);

   tEPlayerOrders.AttackTarget(group, target);

   clear_command();

}


defend()
{
   int group = Global.Int("gtWingCommGroup");
   hship player = iShip.FindPlayerShip();
   hisim target;

   if (empty_group_check(group)) {
      return;
   }

   target = iShip.CurrentTarget(player);

   tEPlayerOrders.DefendTarget(group, target);

   clear_command();
}



approach()
{
   int group = Global.Int("gtWingCommGroup");
   hship player = iShip.FindPlayerShip();
   hisim target;

   if (empty_group_check(group)) {
      return;
   }

   target = iShip.CurrentTarget(player);

   tEPlayerOrders.ApproachTarget(group, target);

   clear_command();
}



dock()
{
   int group = Global.Int("gtWingCommGroup");
   hship player = iShip.FindPlayerShip();
   hisim target;

   if (empty_group_check(group)) {
      return;
   }

   target = iShip.CurrentTarget(player);

   tEPlayerOrders.DockTarget(group, target);

   clear_command();
}

capture()
{
   int group = Global.Int("gtWingCommGroup");
   hship player = iShip.FindPlayerShip();
   hsim target;

   if (empty_group_check(group)) {
      return;
   }

   target = iShip.CurrentTarget(player);

   tEPlayerOrders.CaptureShip(group, iShip.Cast(target));

   clear_command();
}

refuel()
{
   int group = Global.Int("gtWingCommGroup");
   hship player = iShip.FindPlayerShip();
   hsim target;

   if (empty_group_check(group)) {
      return;
   }

   target = iShip.CurrentTarget(player);

   tEPlayerOrders.FuelTarget(group, iShip.Cast(target));

   clear_command();
}

refuel_all()
{
   int group = Global.Int("gtWingCommGroup");
   hship player = iShip.FindPlayerShip();
   hsim target;

   if (empty_group_check(group)) {
      return;
   }

   tEPlayerOrders.TankersFillFleet(group);

   clear_command();
}

refuel_player()
{
   int group = Global.Int("gtWingCommGroup");
   hship player = iShip.FindPlayerShip();

   if (empty_group_check(group)) {
      return;
   }

   tEPlayerOrders.FuelTarget(group, player);

   clear_command();
}

take_fuel()
{
   int group = Global.Int("gtWingCommGroup");
   hship player = iShip.FindPlayerShip();
   hsim target;

   if (empty_group_check(group)) {
      return;
   }

   target = iShip.CurrentTarget(player);

   tEPlayerOrders.FuelDrainTarget(group, iShip.Cast(target));

   clear_command();
}





group_command()
{
   Global.SetInt("gtWingCommDepth",WCS_GroupComm);
   group_prompt();
}






remove_ship()
{
   hship player = iShip.FindPlayerShip();
   hship target;

   target = iShip.Cast(iShip.CurrentTarget(player));

   // Will have no effect on a ship that is
   // not a current player wingman.
   tEPlayerOrders.RemoveShip(target);

   clear_command();
}



add_ship()
{
   int group = Global.Int("gtWingCommGroup");
   hship player = iShip.FindPlayerShip();
   hship target;

   target = iShip.Cast(iShip.CurrentTarget(player));

   // Will have no effect on a ship that is
   // not a current player wingman.
   tEPlayerOrders.ShipToGroup(target, group);
   clear_command();

   debug {
      Debug.PrintHandle(target);
      Debug.PrintString(String.FormatInt(" ship to group %d\n",group));
   }
}



cargo_command()
{
   Global.SetInt("gtWingCommDepth",WCS_CargoComm);
   cargo_prompt();
}



dock_pod()
{
   int group = Global.Int("gtWingCommGroup");

   tEPlayerOrders.DockPod(group);

   clear_command();
}



collect_pods()
{
   int group = Global.Int("gtWingCommGroup");

   tEPlayerOrders.CollectPods(group);

   clear_command();
}



undock_pods()
{
   int group = Global.Int("gtWingCommGroup");

   tEPlayerOrders.UndockAllPods(group);

   clear_command();
}


scan_sky()
{
   int group = Global.Int("gtWingCommGroup");

   tEPlayerOrders.ScanSky(group);

   clear_command();
}


start_prospecting()
{
   int group = Global.Int("gtWingCommGroup");

   tEPlayerOrders.ProspectAsteroid(group);

   clear_command();
}


start_mining()
{
   int group = Global.Int("gtWingCommGroup");

   tEPlayerOrders.MineAsteroid(group);

   clear_command();
}


detach_ship()
{
   int group = Global.Int("gtWingCommGroup");

   tEPlayerOrders.DetachAsteroid(group);

   clear_command();
}


combat_command()
{
   Global.SetInt("gtWingCommDepth",WCS_CombatComm);
   combat_prompt();
}


mining_command()
{
   Global.SetInt("gtWingCommDepth",WCS_MiningComm);
   mining_prompt();
}


// All terminating cases should clear command prompts.
clear_prompt()
{
   iHUD.SetPrompt("","");
}

level_one_prompt()
{

   iHUD.SetPrompt("1 Halt, 2 Formup, 3 Attack, 4 Defend, 5 Dock, 6 Approach",
                  "7 Mining, 9 Cargo, 0 Group");
}

empty_group_prompt()
{
   iHUD.SetPrompt("",
                  " 0 Group");
}

group_prompt()
{
   clear_prompt();
   iHUD.SetPrompt("9 Remove Ship, 0 Add Ship","");
}

cargo_prompt()
{
   clear_prompt();

   iHUD.SetPrompt("1 Fuel All, 2 Fuel Me, 3 Fuel Target, 4 Take Fuel, ",
                  "8 Dock Pod, 9 Collect All, 0 Undock All");
}

combat_prompt()
{
   clear_prompt();
   iHUD.SetPrompt("3 Capture","");
}

mining_prompt()
{
   clear_prompt();

   iHUD.SetPrompt("4 Detach Ship","5 Scan Space, 6 Study Asteroid, 7 Start Mining");

}

KeyOne()
{
   int depth = Global.Int("gtWingCommDepth");
   int group = Global.Int("gtWingCommGroup");

  // iHUD.Print("Key One");

   Global.SetInt("gtWingCommKey",1);

   switch (depth) {
   case WCS_GroupSelect:
      select_group(1);
      break;
   case WCS_Empty:
      clear_command();
      break;
   case WCS_Command:
      halt();
      break;
   case WCS_CargoComm:
      refuel_all();
      break;
   default:
      clear_command();
   }
}

KeyTwo()
{
   int depth = Global.Int("gtWingCommDepth");
   int group = Global.Int("gtWingCommGroup");

  // iHUD.Print("Key Two");

   Global.SetInt("gtWingCommKey",2);

   switch (depth) {
   case WCS_GroupSelect:
      select_group(2);
      break;
   case WCS_Empty:
      clear_command();
      break;
   case WCS_Command:
      defend_me();
      break;
   case WCS_CargoComm:
      refuel_player();
      break;
   default:
      clear_command();
   }
}

KeyThree()
{
   int depth = Global.Int("gtWingCommDepth");
   int group = Global.Int("gtWingCommGroup");

 //  iHUD.Print("Key Three");

   Global.SetInt("gtWingCommKey",3);

   switch (depth) {
   case WCS_GroupSelect:
      select_group(3);
      break;
   case WCS_Empty:
      clear_command();
      break;
   case WCS_Command:
      attack();
      break;
   case WCS_CombatComm:
      capture();
      break;
   case WCS_CargoComm:
      refuel();
      break;
   default:
      clear_command();
   }
}

KeyFour()
{
   int depth = Global.Int("gtWingCommDepth");
   int group = Global.Int("gtWingCommGroup");

  // iHUD.Print("Key Four");

   Global.SetInt("gtWingCommKey",4);

   switch (depth) {
   case WCS_GroupSelect:
      select_group(4);
      break;
   case WCS_Empty:
      clear_command();
      break;
   case WCS_CargoComm:
      take_fuel();
      break;
   case WCS_MiningComm:
      detach_ship();
      break;
   case WCS_Command:
      defend();
      break;
   default:
      clear_command();
   }
}

KeyFive()
{
   int depth = Global.Int("gtWingCommDepth");
   int group = Global.Int("gtWingCommGroup");

//   iHUD.Print("Key Five");

   Global.SetInt("gtWingCommKey",5);

   switch (depth) {
   case WCS_GroupSelect:
      select_group(5);
      break;
   case WCS_Empty:
      clear_command();
      break;
   case WCS_Command:
      dock();
      break;
   case WCS_MiningComm:
      scan_sky();
      break;
   default:
      clear_command();
   }
}

KeySix()
{
   int depth = Global.Int("gtWingCommDepth");
   int group = Global.Int("gtWingCommGroup");

//   iHUD.Print("Key Six");

   Global.SetInt("gtWingCommKey",6);

   switch (depth) {
   case WCS_GroupSelect:
      select_group(6);
      break;
   case WCS_Empty:
      clear_command();
      break;
   case WCS_Command:
      approach();
      break;
   case WCS_MiningComm:
      start_prospecting();
      break;
   default:
      clear_command();
   }
}

KeySeven()
{
   int depth = Global.Int("gtWingCommDepth");
   int group = Global.Int("gtWingCommGroup");

//   iHUD.Print("Key Seven");

   Global.SetInt("gtWingCommKey",7);

   switch (depth) {
   case WCS_GroupSelect:
      select_group(7);
      break;
   case WCS_Empty:
      clear_command();
      break;
   case WCS_Command:
      mining_command();
      break;
   case WCS_MiningComm:
      start_mining();
      break;
   default:
      clear_command();
   }
}

KeyEight()
{
   int depth = Global.Int("gtWingCommDepth");
   int group = Global.Int("gtWingCommGroup");

//   iHUD.Print("Key Eight");

   Global.SetInt("gtWingCommKey",1);

   switch (depth) {
   case WCS_GroupSelect:
      select_group(1);
      break;
   case WCS_Empty:
      clear_command();
      break;
   case WCS_Command:
      // We are not implementing combat commands
      // in this release.
//      combat_command();
      clear_command();
      break;
   case WCS_CargoComm:
      dock_pod();
      break;
   default:
      clear_command();
   }
}

KeyNine()
{
   int depth = Global.Int("gtWingCommDepth");
   int group = Global.Int("gtWingCommGroup");

//   iHUD.Print("Key Nine");

   Global.SetInt("gtWingCommKey",9);

   switch (depth) {
   case WCS_GroupSelect:
      select_group(9);
      break;
   case WCS_Empty:
      clear_command();
      break;
   case WCS_Command:
      cargo_command();
      break;
   case WCS_CargoComm:
      collect_pods();
      break;
   case WCS_GroupComm:
      remove_ship();
      break;
   default:
      clear_command();
   }
}

KeyZero()
{
   int depth = Global.Int("gtWingCommDepth");
   int group = Global.Int("gtWingCommGroup");

   //iHUD.Print("Key Zero");

   Global.SetInt("gtWingCommKey",0);

   switch (depth) {
   case WCS_GroupSelect:
      select_group(0);
      break;
   case WCS_Empty:
      // This is the only command allowed by an empty group.
      group_command();
      break;
   case WCS_Command:
      group_command();
      break;
   case WCS_GroupComm:
      add_ship();
      break;
   case WCS_CargoComm:
      undock_pods();
      break;
   default:
      clear_command();
   }
}

//*******************************************************************************************/
// Voice related functions begin here.

//*******************************************************************************************/

// Have wing issue a voice acknowledgement.
ReportIn(int group, hsim speaker)
{

   switch (group) {
   case 0:
      iComms.Shout(speaker, "PlayerWingMan", "OrderGroupZeroAck");
      break;
   case 1:
      iComms.Shout(speaker, "PlayerWingMan", "OrderGroupOneAck");
      break;
   case 2:
      iComms.Shout(speaker, "PlayerWingMan", "OrderGroupTwoAck");
      break;
   case 3:
      iComms.Shout(speaker, "PlayerWingMan", "OrderGroupThreeAck");
      break;
   case 4:
      iComms.Shout(speaker, "PlayerWingMan", "OrderGroupFourAck");
      break;
   case 5:
      iComms.Shout(speaker, "PlayerWingMan", "OrderGroupFiveAck");
      break;
   case 6:
      iComms.Shout(speaker, "PlayerWingMan", "OrderGroupSixAck");
      break;
   case 7:
      iComms.Shout(speaker, "PlayerWingMan", "OrderGroupSevenAck");
      break;
   case 8:
      iComms.Shout(speaker, "PlayerWingMan", "OrderGroupEightAck");
      break;
   case 9:
      iComms.Shout(speaker, "PlayerWingMan", "OrderGroupNineAck");
      break;
   default:
      break;
   }
}



empty_ack()
{
//   iComms.Shout(none, "PlayerWingMan", "NoShipsInGroup");
}

/*  
THIS MOD IS NOT MADE, DISTRIBUTED, OR SUPPORTED BY INFOGRAMES
OR PARTICLE SYSTEMS LTD. 

ELEMENTS TM & (C) INFOGRAMES AND PARTICLE SYSTEMS LTD.
*/
