//*******************************************************************************************/
//
// tsSaveGui.pog
//
// An UniGUI application that will allow the player to save and load the game.
// 
//	
// Original save code written by EricMan. Many thanks to him for working this out.
//
// Jon Freise Feb, 2003
// Jan 2007, Jon Freise rewritten to allow save anywhere and save name edits.
//******************************************************************************************/
package tsSaveGui;

 
uses    Sim,
        iShip,
        iSim,
        Debug,
        Global,
        GUI,
        iDirector,
        iGUI,
        iHUD,
        iHabitat,
        iMapEntity,
        iLagrangePoint,
        INIFile,
        Input,
        List,
        Object,
        String,
        Task,
        Text,
        iUtilities,
        iMod,
        iGame,
        iLoadout,
        tsTime,
        tsMain,
        tsGuiEnum,
        tsGui,
        tsLProduction,
        UniGUI,
   	  iCargo,
		  tsSpewerOps;


provides DockSave,
         DockSaveDebug,
         SpaceSave,
         SpaceSaveDebug,
   SaveAndLoad,
   SaveScreen,
   BaseLaunch,
   BaseExit,
   PressEnterStation,
   Exit,
   StartEdit,
   CancelEdit,
   EndEdit;




prototype bool is_enterable(hhabitat station);

prototype hmapentity nearby_location(hisim center);




//*********************************************************************
// Only allow the player to save the game when docked to a station.


//********************************************************************
bool dock_valid()
{
   hship player = iShip.FindPlayerShip();
   hhabitat station;
   hfaction f_station, f_player;
   hship docked_ship;

   station = iHabitat.Nearest(iMapEntity.SystemHabitats(), player);

   docked_ship = tsSpewerOps.ShipDocked(station, false);	// Do not allow save when spewer running
   if(docked_ship != none && Object.PropertyExists(docked_ship, "md_epic_shipinit") && Object.IntProperty(docked_ship, "md_epic_podstogo") > 0)
	   return false;

   // Allow the player to save if he is docked to the nearest structure.
   if (iSim.IsDockedToStructure(player, station)) {

       if (is_enterable(station)) {
           f_station = iSim.Faction(iSim.Cast(station));
           f_player = iFaction.Find("Player");
      
           // Do not allow the player to save if the station is hostile.
           if (!(FT_Hate == iFaction.FeelingType(iFaction.Feeling(f_station, f_player)))) {
               return true;
           }
       }
   }

   return false;
}


DockSave()
{
   if (dock_valid()){
      Global.SetBool("g_zz_ug_passme",true);
      return;
   }

   Global.SetBool("g_zz_ug_passme",false);
}



DockSaveDebug()
{
   // ignore that for testing, allow save anywhere.

   Global.SetBool("g_zz_ug_passme",true);
}


SpaceSave()
{
   Global.SetBool("g_zz_ug_passme",true);

}

// Allow saving at any time for debug purposes.
SpaceSaveDebug()
{
   Global.SetBool("g_zz_ug_passme",true);
}

// Exits the space flight screen back to the main menu.
QuitGame()
{
   GUI.PopScreensTo("icSPMainPDAScreen");
}

//********************************************************************
// Catch the player entering the base and
// Cause a launch to space instead.
// Used on base enter.

//********************************************************************
BaseLaunch()
{
   debug Debug.PrintString("Hey, Launching player! \n");

   if (Global.Exists("gt_epic_save_basesave")){
      if (Global.Bool("gt_epic_save_basesave")){
         // The last save was inside the player base, just like the normal game.
         // Stop here and do not launch the player to space.
         return;
      }
   }

   // Hop the player out of Lucretia's base and into space. EpicFleet
   // takes it from here and places the player properly. This option
   // is taken when the player has used "save anywhere".
   GUI.PopScreensTo("icSPMasterScreen");
   GUI.PushScreen("icSpaceFlightScreen");
}

// Clear the base save global on base exit. 
BaseExit()
{
   if (Global.Exists("gt_epic_save_basesave")) {
      Global.SetBool("gt_epic_save_basesave", false);
   }
}


// This button allows the player to save while deep in space. It implements "save anywhere".
SaveAndLoad()
{
	debug Debug.PrintString( "g_gt: Save/Load Operation Started\n" );
 
   GUI.PopScreensTo("icSpaceFlightScreen");
   GUI.OverlayScreen("icPDAOverlayManager");
   iGUI.OverlayCustomScreen( "tsSaveGui.SaveScreen" );
}



Exit()
{
   Input.ResumeBindings();

   // Return control back to UniGUI
   UniGUI.UniGUIRemoveScreen();
}


// Finds the closest location or station.
hmapentity nearby_location(hisim center)
{
   hlagrangepoint lpoint;
   hhabitat habitat;

   lpoint = iLagrangePoint.Nearest(iMapEntity.SystemLagrangePoints(), center);
   habitat = iHabitat.Nearest(iMapEntity.SystemHabitats(), center);

   if (Sim.DistanceBetween(habitat, center) < Sim.DistanceBetween(lpoint, center)) {
      return habitat;
   }

   return lpoint;
}


// 
// This function is used in the version of Epic that still supports using the base
// and the base loadout screen.
// 
// In this version, the player is docked to the station and then presses the enter station
// button.
PressEnterStation()
{
   hship player = iShip.FindPlayerShip();
   hhabitat station = iHabitat.Nearest(iMapEntity.SystemHabitats(), player);

   // Player can undock with the GUI screen active, so to prevent undocked saves, we
   // block them here.
   if (!dock_valid()) {
      UniGUI.UniGUIClose();
      return;
   }

   // Flush all player data to global variables.
   atomic {
      tsMain.SaveGame();
   }

   //iLoadout.StripShip( player );
   Global.CreateInt("gt_epic_save_station_type", GA_Write, tsLProduction.GetType(station));
   Global.CreateString("gt_epic_save_station_faction", GA_Write, 
                       iFaction.Name(iSim.Faction(iSim.Cast(station))));


   Global.CreateInt("gt_epic_savegui_player_ship", GA_Write, iSim.Type(player));

   Global.SetBool("gt_fleet_non_base_save", false);

   debug {
      Debug.PrintString("PlayerShip Template: ");
      Debug.PrintString(Sim.TemplateName(player));
      Debug.PrintString("\n");
   }

   // Tell the restore code that our last save put us inside the base.
   Global.CreateBool("gt_epic_save_basesave",GA_Write,true);

   // Cause the player base screens to load.
   GUI.PopScreensTo("icSPMasterScreen");
   GUI.PushScreen("icSPPlayerBaseScreen");
}





// Mines and Pirate Coves do not
// support loadout facilities. Instead,
// the player must go for the deep space save.

bool is_enterable(hhabitat station)
{
   int station_type;

   station_type = tsLProduction.GetType(iSim.Cast(station));

   switch (station_type) {
   case HT_Invalid:

   case HT_WaterMine:
   case HT_OrganicsMine:
   case HT_InorganicsMine:
	case HT_BiomassMine:
	case HT_CommonMetalsMine:
	case HT_RareMetalsMine:
	case HT_ExoticMetalsMine:
	case HT_RadioactivesMine:
	case HT_FusionableGasesMine:
   case HT_NeutroniumMine:

   case HT_PirateCove:
      return false;
      break;
   default:
      break;
   }

   return true;
}





StartEdit()
{
   hwindow edit_box = GUI.FocusedWindow();
   string name;
   hship player = iShip.FindPlayerShip();
   hmapentity location = nearby_location(player);


   debug Debug.PrintString("Start Edit Pressed!\n");

   name = tsTime.TimeToString();
   name = String.Join(name,"  ");
   name = String.Join(name,Sim.Name(location));
   name = String.Join(name,"  ");
   name = String.Join(name,Text.Field(iSim.ActiveWorld(), FT_Text));

   GUI.SetEditBoxValue(edit_box, name);

}

CancelEdit()
{
   hwindow edit_box = GUI.FocusedWindow();
   int index;
   string button_name;

   debug Debug.PrintString("Cancel Edit Pressed!\n");
   
   index = Object.IntProperty(edit_box, "save_slot");

   button_name = iGame.NameOfSaveInSlot(index);

   if (button_name == "") {
      button_name = "[Empty Save]";
   }

   GUI.SetEditBoxValue(edit_box, button_name);

}

EndEdit()
{   
   hwindow edit_box = GUI.FocusedWindow();
   int index;
   string button_name;

   debug Debug.PrintString("End Edit Pressed!\n");

   index = Object.IntProperty(edit_box, "save_slot");
   button_name = GUI.EditBoxValue(edit_box);

   // Flush all player data to global variables.
   atomic {
      Task.Call("tsMain.SaveGame");
   }

   iGame.SaveGame( index, button_name );
}

SaveScreen()
{
   string save_name, button_name;
   int total,i;
   hwindow shady_bar;
   hwindow shady_bar_right;
   hwindow title;
   hwindow subtitle;
   hwindow exit;
   hwindow list_box;
   hwindow current_button;
   hwindow edit_box;

   int width, height, drop;

   list button_list, edit_list;

   debug Debug.PrintString("tsSaveGui.SaveScreen\n");

   Input.SuspendBindings();


   // Set right hand shady bar width.
   shady_bar = iGUI.CreateWideShadyBar();

   Global.CreateHandle("gt_save_gui_shady",GA_Write,shady_bar);


   GUI.SetWindowClientArea( shady_bar, 
                            0,
                            0,
                            500,
                            GUI.WindowCanvasHeight( shady_bar));
   


   height = GUI.WindowCanvasHeight( shady_bar);
   height = height - Global.Int("EpicGui_content_drop");
   height = height - Global.Int("EpicGui_content_footer");


   width = 500; //GUI.WindowCanvasWidth( shady_bar);
   //width = width/2;
   width = width - Global.Int("EpicGui_content_indent");
   width = width - Global.Int("EpicGui_content_indent");
      

   tsGui.CreateTitle(shady_bar, "SAVE GAME");
   tsGui.CreateSubtitle(shady_bar, "Save your current progress");

   // Create the exit button
   tsGui.CreateExitButton(shady_bar, "Exit", "tsSaveGui.Exit");



   total = iGame.NumberOfSavedGameSlots();

   for (i=0;i<total;++i) {

      current_button = iGUI.CreateAndInitialiseRectangularInverseButton( none,
                                                                         0,
                                                                         0,
                                                                         400,
                                                                         "",
                                                                         "");

      List.AddTail(button_list, current_button);

      Object.AddIntProperty(current_button, "save_slot", i);
   }
   


   iGUI.CreateWindowListInFancyBorder(
      shady_bar,
		button_list,
      Global.Int("EpicGui_content_indent"),
      Global.Int("EpicGui_content_drop"));



   for (i=2;i<total;++i) {

      button_name = iGame.NameOfSaveInSlot(i);

      if (button_name == "") {
         button_name = "[Empty Save]";
      }

      drop = Global.Int("EpicGui_content_drop");

      //   drop = drop + Global.Int( "GUI_fancyborder_width" ); // fancy border width.
      drop = drop + (i * Global.Int( "GUI_inversebutton_height" ));
      drop = drop + (i * Global.Int("GUI_buttonlist_gap")); // Some space between buttons
      drop = drop + Global.Int("GUI_buttonlist_gap"); // Some space between buttons

      edit_box = GUI.CreateEditBox( Global.Int("EpicGui_content_indent") + 10,
                                    drop,
                                    380,
                                    20,
                                    shady_bar,
                                    false,
                                    button_name,
                                    false);

      GUI.SetWindowFont( edit_box, Global.String( "GUI_detail_font" ));

      GUI.SetEditBoxMaxCharLength(edit_box, 60);

      GUI.SetEditBoxCursorToEnd(edit_box);

      Object.AddIntProperty(edit_box, "save_slot", i);

      GUI.SetEditBoxOverrides( edit_box,
                               "tsSaveGui.StartEdit",
                               "tsSaveGui.CancelEdit",
                               "tsSaveGui.EndEdit");

      List.AddTail(edit_list, edit_box);
   }


   Global.CreateList("tsavegui_edit_list",GA_Write|GA_NoSave,edit_list);
}





/*  
THIS MOD IS NOT MADE, DISTRIBUTED, OR SUPPORTED BY INFOGRAMES
OR PARTICLE SYSTEMS LTD. 

ELEMENTS TM & (C) INFOGRAMES AND PARTICLE SYSTEMS LTD.
*/
