//*******************************************************************************************/
//
// tsPcTankerOp
//
// This pog object is the physical representation of a Tanker Operation.
// It requires an tanker operation to appear in game.
// The tanker operation is a ship that supports player refuel,
// It runs from fights and moves the operation with it.
//
// Template defined:- March 2006, Jon Freise
// Implementaion:- May 2008, JW
//
//******************************************************************************************/

package tsPcTankerOp;

//[of]:Imports
uses    Sim,
        iShip,
        iSim,
        Debug,
        Global,
//        GUI,
//        iGUI,
//        iHUD,
        INIFile,
//        Input,
        List,
        Object,
        String,
        Task,
        Text,
//        Math,
        iAI,
        iShipCreation,
        iComms,
        iConversation,
        iEscort,
        ABB_Common,

        tsShipComms,
//        tsLRoot,
//        tsLTrade,
        tsFaction,
//        tsTradeSell,
        tsMoney,
        tsShipName,
        tsPcOwner,
        tsLProduction,
        tsLCenter,
        tsFleetOp,
        tsDistance,
        tsShipCreationEnum,
        tsShipCreation,
        tsLFleet,
        tsPilotSetup,
        tsStationFilter,
        tsDistance,
        tsCapsuleJump,
        tsCull,
        tsShip,
        tsPlayerFleet;
//[cf]


//[of]:Exports
provides PogCreate,
         PogStart,
         TankerComms;
//[cf]


enum eCSScriptState
{
   eCS_Init,
   eCS_Idle,
   eCS_Flee,
   eCS_WaitApproach,
   eCS_EscortOnly,
   eCS_Dead,
   eCS_Cull
};




prototype setup_tanker_ship(hisim marker);


prototype string Station2Fence(int type);

prototype string Station2FenceAsk(int type);

prototype task tanker_watch(hgroup tanker_fleet);

// Fuel the ships the player has commanded.
prototype task fuel_list(hship ship, float fuel_cost, list target_list);


prototype create_escorts(hisim operation, hship tanker, hgroup cull_group);

prototype eCSScriptState change_state(eCSScriptState state, eCSScriptState new_state, bool debug_on);

prototype string state2string(eCSScriptState state);



//[of]:hsim PogCreate(string template_name, string object_name)
hsim PogCreate(string template_name, string object_name)
{
   hinifile object_file;
   string item_template, pog_class, start_function, name;
   hsim item;


   debug Debug.PrintString("tsPcTankerOp.PogCreate\n");

   object_file = INIFile.Create(template_name);

   if (none == object_file) {
      debug {
         Debug.PrintString("tsPcTankerOp.PogCreate, failed to find object file\n");
         Debug.PrintString(template_name);
         Debug.PrintString("\n");
      }

      return none;
   }

   // Pull needed items out of template file. Create the object.
   // Attach them
   pog_class = INIFile.String(object_file, "PogClass","name","none");


   ///********************
   // This block of code is class dependent. The rest must be done to adhere
   // to the pog object calling conventions.


   INIFile.Destroy(object_file);

   item = Sim.Create("ini:/sims/nav/waypoint", "tanker marker");

   if (none == item) {
      debug {
         Debug.PrintString("tsPcTankerOp.PogCreate, bad object template\n");
      }
      return none;
   }
   ///********************

   // All 
   Object.AddStringProperty(item, "gt_pog_object_class", pog_class);
   Object.AddStringProperty(item, "gt_pog_object_template", template_name);

   return item;
}
//[cf]


/*
This function is called after the ship has been placed. 

*/
//[of]:task PogStart(hobject pog_object)
task PogStart(hobject pog_object)
{

   debug Debug.PrintString("tsPcTankerOp.PogStart\n");


   ///***************************************
   // This part of the start code is object dependent. The prior pieces must
   // be done to adhere to the pog class calling convention.

   setup_tanker_ship(iSim.Cast(pog_object));

   ///***************************************
}
//[cf]

/*
; 
; Example INI file for setting up a hired ship.
; One of these template files should be created
; for each kind of ship that can be hired.
; Freighter, warship, etc.

[PogClass]
name=tsPcEmbezzleOp

[Properties]
template=ini:/sims/ships/utility/freighter


; This code will be called by the players communication subsystem
; It will check to see if the player has a high enough standing to hire the ship.
; Then it will offer the player the choice of hiring. It will display fee info.
; 
comm_start_function="tsPcTankerOp.TankerComm"
*/



// Read the ini file, setup the object. 
//[of]:setup_tanker_ship(hisim marker)
setup_tanker_ship(hisim marker)
{
   hinifile control_file;
   string template_file_name, comm_function;
   string tanker_file, fence_type, station_string;
   string ship_template, ship_name;
   float faction_standing;
   hfaction faction;
   hisim owner;
   hhabitat station;
   hship tanker_ship;
   hgroup cull_group;

   template_file_name = Object.StringProperty(marker, "gt_pog_object_template");
   
   /* Not currently used so comment out.
   control_file = INIFile.Create(template_file_name);

   if (none == control_file) {
      Debug.PrintString("tsPcTankerOp.setup_tanker: ERROR: invalid pog_object_template\n");
      Debug.PrintString(template_file_name);
      Debug.PrintString("\n");
      Sim.Destroy(marker);
      return;
   }

   INIFile.Destroy(control_file);
   */

   // The first thing we do is learn if this marker is to represent an operation.
   // If we do, then we handle some things differently.
   owner = iSim.Cast(tsPcOwner.Owner(marker));

   faction = iSim.Faction(iSim.Cast(owner));

   if (!tsFleetOp.IsOperation(owner)){
      // This pog object can only represent operations. 
      // So we destroy the marker and bail out.
      
      debug Debug.PrintString("tsPcTankerOp error no operation set as owner\n");

      Sim.Destroy(marker);
      return;
   }

   // If this operation already has an in game representation, get rid of ourselves.
   if (tsFleetOp.IsCreated(owner)) {
      debug Debug.PrintString("tsPcTankerOp physical already exists.\n");
      Sim.Destroy(marker);
      return;
   }
      
   debug Debug.PrintString("tsPcTankerOp.setup_tanker_ship: operation tanker creating\n");

   // Set the operation to already have a physical representation.
   tsFleetOp.SetCreated(owner, true);

   ship_template = tsFleetOp.ShipTemplate(owner);
   ship_name = tsFleetOp.Name(owner);

   tanker_ship = tsShip.Create(ship_template, ship_name);

   if (none == tanker_ship) {
      debug {
         Debug.PrintString("tsPcTankerOp.PogCreate: error operation ship template invalid:\n");
         Debug.PrintString(ship_template);
         Debug.PrintString("\n");
      }
      Sim.Destroy(marker);

      tsFleetOp.SetCreated(owner, false);

      return;
   }

   cull_group = Group.Create();

   Group.AddSim(cull_group, tanker_ship);

   tsPcOwner.SetOwner(tanker_ship, owner);

   iSim.SetFaction(iSim.Cast(tanker_ship), faction);

   // Notice attacks fast, and flee quickly.
   tsPilotSetup.SetupOperation(tanker_ship, 0.9, 0.75);

   Sim.SetCullable(tanker_ship, false);

   Sim.PlaceNear(tanker_ship, marker, 1km);

   // Now we get rid of the prior created marker.
   Sim.Destroy(marker);

   // create any escort if we need it
   create_escorts(owner, tanker_ship, cull_group);

   // Define the comms function
   comm_function = "tsPcTankerOp.TankerComms";

   // Setup the later comms task.
   tsShipComms.AddComms(tanker_ship, comm_function);
   tsShipComms.DisplayComms(tanker_ship, true);


   station = iHabitat.Nearest(iMapEntity.SystemHabitats(),tanker_ship);
   station_string = Station2Fence(tsLProduction.GetType(station));

   // If the INI file did not specify a type of fence, then
   // use the nearby station to set one. This will default
   // to MineGoods if the station is not a production station.
/*
   if ("none" == fence_type) {
      fence_type = station_string;
   }

   // Setup the trade properties for the fence.
   tsLRoot.SetId(tanker_ship, tsLRoot.GetId(owner));
   tsLTrade.Create(tanker_ship, tanker_file, fence_type);
*/
   Task.Detach(start tanker_watch( cull_group));
}
//[cf]


// AI Watch function for physical Tanker Operation
//[of]:task tanker_watch(hgroup tanker_fleet)
task tanker_watch(hgroup tanker_fleet)
{
   set nearby_ships, nearby_locations;
   hship ship;
   hship player;
   hship tanker;
   hisim operation;
   hmapentity station, new_station;
   int timer;
   eCSScriptState state;
   float spacing;
   hfaction tanker_faction, ship_faction;
   bool nearby_hostile;
   bool debug_on = true;


   // Get handles to the actual tanker and the operation
   tanker = iShip.Cast(Group.Leader(tanker_fleet));
   operation = iSim.Cast(tsPcOwner.Owner(tanker));

   // tanker faction and set initial state
   tanker_faction = iSim.Faction(tanker);
   state = eCS_Idle;

   // Put the ships into formation. And give them guard orders.
   // Any hostiles inside of 25km get shot. We use a smaller
   // value than normal, because fences lurk on the edges of other
   // stations. They don't like trouble.
   spacing = iUtilities.GetLargestShipRadius( tanker_fleet);
   iEscort.Wedge( tanker_fleet, spacing, 25km, true );

   // Have any ships that dislike us come within 50km? Flee to a nearby non-dislike 
   // station. Our escorts will tail along.

   while (1) {
      Task.Sleep(Task.Current(), 1.0);


      if (tsCapsuleJump.IsCapsuleJumping()) {
         state = change_state(state, eCS_Cull, debug_on);
      }else {

         player = iShip.FindPlayerShip();

         if (Sim.IsDead(tanker)) {
            if (eCS_Cull != state) {
               state = change_state(state, eCS_Dead, debug_on);
            }
         }else if (Sim.DistanceBetween(iShip.Cast(Group.Leader(tanker_fleet)), player) > 
                   tsDistance.CullingDistance()) {

            ++timer;
            if (timer > 30) {
               state = change_state(state, eCS_Cull, debug_on);
            }
         }else {
            timer = 0;
         }
      }

      switch (state) {
      case eCS_Init:
         station = iHabitat.Nearest(iMapEntity.SystemHabitats(), tanker);
         state = change_state(state, eCS_Idle, debug_on);
         break;
      case eCS_Idle:

         // Check for nearby ships. Are any of them dislike or lower?
         nearby_ships = iSim.ShipsInRadius(tanker, 50km);
         nearby_hostile = false;

         while (!Set.IsEmpty(nearby_ships)) {
            ship = iShip.Cast(Set.FirstElement(nearby_ships));
            Set.Remove(nearby_ships, ship);
            ship_faction = iSim.Faction(ship);

            // Are any of these ships dislike or lower?
            if (iFaction.Feeling(ship_faction, tanker_faction) < -0.2) {
               nearby_hostile = true;
            }
         }

         if (nearby_hostile) {
            // Some bad guys have arrived, Run.
            state = change_state(state, eCS_Flee, debug_on);
         }

         break;
      case eCS_Flee:

         // Pick a non-hostile station that is near.
         nearby_locations = iMapEntity.SystemHabitats();
         station = iHabitat.Nearest(nearby_locations, tanker);
         Set.Remove(nearby_locations, station);

         new_station = iHabitat.Nearest(tsStationFilter.OnGreaterFeeling(nearby_locations,
                                                                        tanker_faction, 
                                                                        -0.2), 
                                                                 tanker);

         if (none == new_station) {
            new_station = iLagrangePoint.Nearest(iMapEntity.SystemLagrangePoints(), tanker);
         }

         debug {
            Debug.PrintHandle(new_station);
            Debug.PrintString(" flee station target\n");
         }

         iAI.PurgeOrders(tanker);
         iAI.GiveApproachOrderAdvanced( tanker,
                                        new_station,
                                        75km,
                                        80km,
                                        true);


         // Move the operation to the target station.
         tsLCenter.SetCenter(operation, new_station);

         state = change_state(state, eCS_WaitApproach, debug_on);

         break;
      case eCS_WaitApproach:
         // We are now running. If we return to no orders, we must be there.
         // Go back to idle.
         if (OT_None == iAI.CurrentOrderType(tanker)) {
            state = change_state(state, eCS_Idle, debug_on);
         }

         break;
      case eCS_EscortOnly:
         // We were attacked and lost the leader. Now we just wait here for the 
         // fighting to end. The escorts have thier own orders.

         break;
      case eCS_Dead:
         if (Sim.IsDead(tanker)) {
            Group.RemoveSim(tanker_fleet, tanker);
         }

         tanker = iShip.Cast(Group.Leader(tanker_fleet));

         if (none == tanker) {
            state = change_state(state, eCS_Cull, debug_on);
         }else {
            state = change_state(state, eCS_EscortOnly, debug_on);
         }
         break;

      case eCS_Cull:
         // Player is far, or all the ships are dead. Set the last to allow
         // culling and exit task.
         iAI.PurgeOrders(tanker_fleet);
         ABB_Common.SetCullableGroup(tanker_fleet, true);
         Group.Destroy(tanker_fleet, false);
         debug atomic {
            Debug.PrintString("tsPcTankerOp all ships culled, exit\n");
         }

         // Allow this operation to be physically created again.
         tsFleetOp.SetCreated(operation, false);
         return;

         break;
      default:
         state = eCS_Init;
         break;
      }
   }
}
//[cf]


//[of]:task TankerComms()
task TankerComms()
{
   hship ship;
   hship wingman;
   string ask_string;
   bool start_deal;
   hfaction player = tsFaction.PlayerFaction();
   hfaction player_faction, source_faction;
   hhabitat station;
   string station_string;
   string response_string;
   hinifile tanker_file;
   int fleet_total, i, answer, ship_number, level;
   float fuel_cost;
   list player_fleet = tsShip.PlayerFleet();
   list target_fleet;

   ship = iShip.Cast(tsShipComms.CommsSource());

   
   // Turn off the comms display, now that the player knows he can talk to this ship.
   tsShipComms.DisplayComms(ship, false);

   station = iHabitat.Nearest(iMapEntity.SystemHabitats(),ship);
   source_faction = iSim.Faction(ship);


   // Restrict ships to those near the target fleet.
   player_fleet = List.FromSet(iSim.SimsInRadiusFromSet(Set.FromList(player_fleet), 
                                                        ship, Global.Float("gt_distance_wakeup"), TM_Ship));
   List.Remove(player_fleet, iShip.FindPlayerShip());
   fleet_total = List.ItemCount(player_fleet);


   // Open up the tanker INI file and read the fuel cost.
   // We do this at the moment of purchase, just in case the player has
   // increased standing while at the station and expects a discount.
   tanker_file = INIFile.Create(Object.StringProperty(ship, "gt_pog_object_template"));

   level = iFaction.FeelingType(iFaction.Feeling(source_faction, player));

   fuel_cost = INIFile.Float(tanker_file, "FuelCost", tsFaction.Level2String(level), 1.0);

   INIFile.Destroy(tanker_file);


   // Start the conversation.
   iConversation.Begin();

   // pcts_player_refuses, "No, Thank you."
   iConversation.AddResponse(
       "pcts_player_refuses",       
       "pcts_player_refuses");


   // pcts_yes_fuel_fleet, "Yes, fuel the whole fleet"
   iConversation.AddResponse(
       "pcts_yes_fuel_fleet", 
       "pcts_yes_fuel_fleet"); 


   // pcts_yes_fuel_me, "Yes, fuel just my ship"
   iConversation.AddResponse(
      "pcts_yes_fuel_me",
      "pcts_yes_fuel_me");



   // Add a response for each wingman in the player fleet.
    for (i=0;i<fleet_total;++i)
    {
       wingman = iShip.Cast(List.GetNth(player_fleet,i));

       ask_string = String.Join("Fuel ", Text.Field(Sim.Name(wingman),FT_Text));
       response_string = String.Join("Fuel only ", Text.Field(Sim.Name(wingman),FT_Text));

       iConversation.AddResponse(
          ask_string,
          response_string);
    }

    // pcts_ask_player, "Do you need to refuel your ships?"

    // Ask the player a question and switch on their response.
    answer = iConversation.Ask( ship, "", "pcts_ask_player" );

    switch ( answer)
    {
    case 1 :

        // pcts_player_refuse_reply, "Maybe Next Time"
       iConversation.Say(ship,"", "pcts_player_refuse_reply");
       break;

    case 2 :
        // pcts_player_fuel_all, "Fueling All Ships"
       iConversation.Say(ship,"", "pcts_player_fuel_all");

       List.AddHead(player_fleet, iShip.FindPlayerShip());
       Task.Detach( start fuel_list(ship, fuel_cost, player_fleet));
       break;
    case 3:
        // pcts_player_fuel_you, "Fueling You"
       iConversation.Say(ship,"", "pcts_player_fuel_you");

       List.AddHead(target_fleet, iShip.FindPlayerShip());
       Task.Detach( start fuel_list(ship, fuel_cost, target_fleet));
       break;

    default :
       // Player said Fuel Specific wingman
       
       ship_number = answer - 4;

       // Check the answer is less than the number of wingmen.
       if (ship_number < fleet_total)
       {
          wingman = iShip.Cast(List.GetNth(player_fleet, ship_number));

          List.AddHead(target_fleet, wingman);
          Task.Detach(start fuel_list(ship, fuel_cost, target_fleet));

          // pcts_fueling, "Fueling "
          response_string = Text.Field("pcts_fueling", FT_Text);
          response_string = String.Join(response_string, Text.Field(Sim.Name(wingman),FT_Text));

          // Announce that we are fueling that ship.
          iConversation.Say(ship,"", response_string );          
       }else {
           // pcts_invalid_value, "Tanker Invalid Ship Specified"
          iConversation.Say(ship,"", "pcts_invalid_value" );          
       }
       break;
    }

  

    // Finish the conversation.
    iConversation.End();
}


// this task will attempt to fuel each of the ships in the target list.
task fuel_list(hship ship, float fuel_cost, list target_list)
{
   hship target;
   int total, i, cost;
   float max_fuel, fuel_needed;
   bool failed = false;

   Task.Sleep(Task.Current(), 2.0);

   total = List.ItemCount(target_list);

   for (i=0;i<total;++i)
   {
      target = iShip.Cast(List.GetNth(target_list, i));
      
      max_fuel = tsShip.FuelMax(target);

      atomic {
         fuel_needed = max_fuel - tsShip.Fuel(target);
         
         cost = fuel_needed * fuel_cost;

         if (cost < tsMoney.ShipAccount())
         {
            // Player can afford transfer, fill up wingman
            tsShip.SetFuel(target, max_fuel );
            tsMoney.ChangeShipAccount(-1*cost);
         }else {
            failed = true;
         }
      }
   }

   if (failed)
   {
       // pcts_player_low_credits, "You don't have enough credits to finish fueling"
      iComms.Shout(ship, "", "pcts_player_low_credits");
   }else {
       // pcts_fueling_complete, "Fueling complete"
      iComms.Shout(ship, "", "pcts_fueling_complete");
   }

   Task.Sleep(Task.Current(), 2.0);
}
//[cf]


string Station2Fence(int type)
{
   switch (type) {
   case HT_WaterMine :
   case HT_OrganicsMine :
   case HT_InorganicsMine :
   case HT_BiomassMine : 
   case HT_CommonMetalsMine :
   case HT_RareMetalsMine : 
   case HT_ExoticMetalsMine :
   case HT_RadioactivesMine :
   case HT_FusionableGasesMine :
   case HT_NeutroniumMine :
      return "MineGoods";
   break;
   case HT_WaterProcessingPlant : 
   case HT_OrganicsProcessingPlant : 
   case HT_InorganicsProcessingPlant :
   case HT_BiomassProcessingPlant : 
   case HT_CommonMetalsProcessingPlant :
   case HT_RareMetalsProcessingPlant : 
   case HT_ExoticMetalsProcessingPlant : 
   case HT_RadioactivesProcessingPlant : 
   case HT_FusionableGasesProcessingPlant :
   case HT_NeutroniumProcessingPlant : 
      return "ProcessedGoods";
      break;
   case HT_HeavyManufacturingPlant : 
   case HT_BiologicalManufacturingPlant :
   case HT_WetwareManufacturingPlant : 
   case HT_HiTechManufacturingPlant : 
   case HT_ElectronicsManufacturingPlant :
   case HT_WeaponsManufacturingPlant : 
   case HT_PharmaceuticalsManufacturingPlant : 
   case HT_PlasticsManufacturingPlant : 
   case HT_FusionReactorsManufacturingPlant : 
   case HT_EnergyCellsManufacturingPlant : 
   case HT_StationFabricationManufacturingPlant : 
   case HT_LuxuriesManufacturingPlant : 
   case HT_TerraformingStation : 
      return "ManufacturedGoods";
      break;
   default:
      break;
   }


   return "MineGoods";
}


string Station2FenceAsk(int type)
{
   switch (type) {
   case HT_WaterMine :
   case HT_OrganicsMine :
   case HT_InorganicsMine :
   case HT_BiomassMine : 
   case HT_CommonMetalsMine :
   case HT_RareMetalsMine : 
   case HT_ExoticMetalsMine :
   case HT_RadioactivesMine :
   case HT_FusionableGasesMine :
   case HT_NeutroniumMine :
      return "Mine Ore";
   break;
   case HT_WaterProcessingPlant : 
   case HT_OrganicsProcessingPlant : 
   case HT_InorganicsProcessingPlant :
   case HT_BiomassProcessingPlant : 
   case HT_CommonMetalsProcessingPlant :
   case HT_RareMetalsProcessingPlant : 
   case HT_ExoticMetalsProcessingPlant : 
   case HT_RadioactivesProcessingPlant : 
   case HT_FusionableGasesProcessingPlant :
   case HT_NeutroniumProcessingPlant : 
      return "Processed Material";
      break;
   case HT_HeavyManufacturingPlant : 
   case HT_BiologicalManufacturingPlant :
   case HT_WetwareManufacturingPlant : 
   case HT_HiTechManufacturingPlant : 
   case HT_ElectronicsManufacturingPlant :
   case HT_WeaponsManufacturingPlant : 
   case HT_PharmaceuticalsManufacturingPlant : 
   case HT_PlasticsManufacturingPlant : 
   case HT_FusionReactorsManufacturingPlant : 
   case HT_EnergyCellsManufacturingPlant : 
   case HT_StationFabricationManufacturingPlant : 
   case HT_LuxuriesManufacturingPlant : 
   case HT_TerraformingStation : 
      return "Manufactured Equipment";
      break;
   default:
      break;
   }


   return "Mine Ore";
}





// Don't call this until the tanker has been placed into the game.
create_escorts(hisim operation, hship tanker, hgroup cull_group)
{
   int threat, fleets;
   string escort_template;
   hfaction faction = iSim.Faction(tanker);
   hinifile escort_file;
   int i, total;
   hship escort;

   escort_template = tsShipCreation.GetShip(faction, EST_CombatLight);
   escort_file = INIFile.Create(escort_template);

   if (none == escort_file) {
      debug Debug.PrintString("tsPcTankerOp.create_escort: ERROR: escort ini file invalid\n");
      return;
   }

   threat = INIFile.Float(escort_file,"Properties","threat", 40);

   INIFile.Destroy(escort_file);

   fleets = tsLFleet.Fleets(operation);

   total = fleets/threat;

      debug {
         Debug.PrintString(String.FormatInt("Fleets %d\n", fleets));
         Debug.PrintString(String.FormatInt("Threat %d\n", threat));
      }

   if (total > 10) {
      debug {
         Debug.PrintString(String.FormatInt("Fleets %d\n", fleets));
         Debug.PrintString(String.FormatInt("Threat %d\n", threat));
      }

      total = 5;
   }

   for (i=0;i<total;++i) {
      escort = tsShip.Create(escort_template, tsShipName.ShipName("general",10000));

      tsPilotSetup.SetupEscort(escort, 0.9, 0.5);

      iSim.SetFaction(escort, faction);
      Sim.SetCullable(escort, false);

      Sim.PlaceRelativeTo(escort, tanker, 2km, 0, 0);

      iShip.Attacked(escort);
      iShip.LastAttacker(escort);

      tsPcOwner.SetOwner(escort, operation);

      Group.AddSim(cull_group, escort);
   }
}


eCSScriptState change_state(eCSScriptState state, eCSScriptState new_state, bool debug_on)
{
   if (debug_on) {
      debug Debug.PrintString(String.FormatStrStr("tsPcTankerOp state change %s->%s\n",
                                                  state2string(state),
                                                  state2string(new_state)));
   }

   return new_state;
}



string state2string(eCSScriptState state)
{
   switch (state) {
   case eCS_Init:
      return "eCS_Init";
      break;
   case eCS_Idle:   
      return "eCS_Idle";
      break;
   case eCS_Flee:   
      return "eCS_Flee";
      break;
   case eCS_WaitApproach:   
      return "eCS_WaitApproach";
      break;
   case eCS_EscortOnly:   
      return "eCS_EscortOnly";
      break;
   case eCS_Dead:   
      return "eCS_Dead";
      break;
   case eCS_Cull:   
      return "eCS_Cull";
      break;
   default:
      break;
   }

   return "eCS_Invalid";

}


/*   

THIS MOD IS NOT MADE, DISTRIBUTED, OR SUPPORTED BY INFOGRAMES
OR PARTICLE SYSTEMS LTD. 

ELEMENTS TM & (C) INFOGRAMES AND PARTICLE SYSTEMS LTD.

*/
