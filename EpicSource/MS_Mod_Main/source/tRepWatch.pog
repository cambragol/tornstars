//*******************************************************************************************/
//
// tRepWatch.pog
//
// This module checks out what the player and his wingmen are doing. If they are attacking
// other ships, it marks those factions as hostile.
// 
//
// May 2005, Jon Freise
//******************************************************************************************/

package tRepWatch;


uses  Sim,
      iShip,
      iSim,
      Debug,
      Global,
      GUI,
      iGame,
      iGUI,
      iHUD,
      iHabitat,
      iMapEntity,
      iFaction,
      INIFile,
      Input,
      List,
      Object,
      String,
      Task,
      State,
      Text,
      iUtilities,
      iCargo,
      iInventory,
      iComms,
      Math,
      iPilotSetup,
      iMusic,
      iMod,
      iShipCreation,
      iDockport,
      UniGUI,
      tTime,
      tEpicFleet,
      tEFaction,
      tESysSetup,
      tEPlayerOrders;



provides CheckForAttacks,
         ShipAttacked;


ship_was_attacked(hisim target)
{

   hfaction player_faction = tEFaction.PlayerFaction();
   hfaction empty_faction = tEFaction.EmptyFaction();
   hfaction gov_faction;
   hfaction target_faction;
   float feeling;
   string name;
   int time;


   target_faction = iSim.Faction(target);


   // Mistaken shot.
   if (target_faction == player_faction) {
      return;
   }


   // We don't count shooting up umanned pods
   if (T_CargoPod == iSim.Type(target)) {
      return;
   }


   // Shooting empty junk does not make it hostile.
   if (target_faction == empty_faction) {
      return;
   }


   // Set this faction to hostile. Change player to match for 
   // proper HUD color coding.
   if (none != target_faction) {

      name = iFaction.Name(target_faction);
      name = String.Join("gt_repw",name);

      if (Global.Exists(name)) {
         time = Global.Int(name);
      }else {
         // Time must default to a value that always allows an 
         // attack to be recorded.
         time = -1000;
      }

      // We only report one attack every 10 mins of elapsed time.
      // This is to prevent lowering the faction standing too quickly.
      if ((time + 600) < tTime.GetTime()) {
         // Record the current attack time.
         Global.CreateInt(name,GA_Write| GA_NoSave, tTime.GetTime());

         // Knock the player down one level for each attack.
         feeling = iFaction.Feeling(target_faction, player_faction);
         feeling = feeling - 0.4;

         if (feeling < -1.0) {
            feeling = -1.0;
         }

         iFaction.SetFeeling(target_faction, player_faction, feeling);
         iFaction.SetFeeling(player_faction, target_faction, feeling);


         debug {
            Debug.PrintString("tRepWatch faction rep lowered\n");
            Debug.PrintString(iFaction.Name(gov_faction));
            Debug.PrintString(" faction\n");
         }

         if (!tEFaction.IsCriminal(target_faction)) {
            // If the faction is not criminal, the government will step in to
            // protect the civilians. So change the government of this system
            // to hostile.
            gov_faction = tESysSetup.Government();

            if ((none != gov_faction)&& (target_faction != gov_faction)) {
               // One special case, if the government is the empty faction
               // no government, then don't make any changes. And if the
               // government has already been lowered, don't lower it again.

               if (empty_faction != gov_faction) {

                  // Knock the players relationship with the government down
                  // one level for each attack.
                  feeling = iFaction.Feeling(gov_faction, player_faction);
                  feeling = feeling - 0.4;

                  if (feeling < -1.0) {
                     feeling = -1.0;
                  }

                  iFaction.SetFeeling(gov_faction, player_faction, feeling);
                  iFaction.SetFeeling(player_faction, gov_faction, feeling);

                  debug {
                     Debug.PrintString("tRepWatch government rep lowered\n");
                     Debug.PrintString(iFaction.Name(gov_faction));
                     Debug.PrintString(" system government\n");
                  }
               }
            }
         }else {
            debug {
               Debug.PrintString("tRepWatch attack too soon\n");
               Debug.PrintString(iFaction.Name(gov_faction));
               Debug.PrintString(" faction\n");
            }
         }
      }
   }
}

CheckForAttacks()
{
   hship player = iShip.FindPlayerShip();
   hship player_ship;
   hship target;
   hship last_attacker;
   list player_fleet;

   int total,i;

   //debug Debug.PrintString("tRepWatch.CheckForAttacks\n");


   // First check to see if the player has been shooting people.
   if (iShip.HasFired(player)) {
      target = iShip.Cast(iShip.CurrentTarget(player));

      if (none != target) {
         if (iShip.Attacked(target)) {
            last_attacker = iShip.Cast(iShip.LastAttacker(target));

            if (last_attacker == player) {

               debug {
                  Debug.PrintString("Player attacks!\n");
                  Debug.PrintHandle(target);
                  Debug.PrintString("\n");
                  Debug.PrintString(tEFaction.EName(iSim.Faction(target)));
                  //Debug.PrintHandle(iSim.Faction(target));
                  Debug.PrintString("\n");
               }

               ship_was_attacked(target);
            }
         }
      }
   }

   // Find all the player wingmen within Global.Float("gt_distance_culling") of the player.
   // And check if they have been ordered to shoot people.
   player_fleet = List.FromSet(iSim.SimsInRadiusFromSet(Set.FromList(tEpicFleet.PlayerFleet()),
                                                        player,
                                                        Global.Float("gt_distance_culling"),
                                                        TM_Ship));
   
   total = List.ItemCount(player_fleet);
   for (i=0;i<total;++i) {
      player_ship = iShip.Cast(List.GetNth(player_fleet,i));

      // If the player ordered an attack, the target will be attached.
      // We want to change factions once the attack has actually been 
      // made, and not before.
      target = iShip.Cast(tEPlayerOrders.OrderTarget(player_ship));

      if (none != target) {
         if (iShip.LastAttacker(target) == player_ship) {
            // The players fleet has been attacking this ship/station.
            
            debug {
               Debug.PrintString("Wingman attacks!\n");
               Debug.PrintHandle(player_ship);               
               Debug.PrintString("\n");
               Debug.PrintHandle(target);
               Debug.PrintString("\n");
               Debug.PrintHandle(iSim.Faction(target));
               Debug.PrintString("\n");
            }

            ship_was_attacked(target);
         }
      }
   }
}



/*
   Ship attacked. 
   
   Check if the player ship was the attacker. 
   Check if the player ship has fired.
   
   If true, apply the reputation damage.
   
   Check if a wingman was the attacker.
   Check if the wingman was ordered to attack this target.
   
   if true, apply the reputation damage.

*/

apply_penalty(hship target, float penalty)
{
   hfaction player_faction = tEFaction.PlayerFaction();
   hfaction empty_faction = tEFaction.EmptyFaction();
   hfaction target_faction = iSim.Faction(target);
   hfaction gov_faction;

   debug Debug.PrintString("tRepWatch.apply_penalty\n");

   // Mistaken shot.
   if (target_faction == player_faction) {
      return;
   }

   // We don't count shooting up umanned pods
   if (T_CargoPod == iSim.Type(target)) {
      return;
   }

   // Shooting empty junk does not make it hostile.
   if (target_faction == empty_faction) {
      return;
   }

   debug Debug.PrintString("tRepWatch.apply_penalty giving penalty\n");

   // The player is marked for the damage. The day update will
   // change the faction standing based on the damage.
   tEFaction.AdjustCurrentAction(target_faction, penalty);


   if (!tEFaction.IsCriminal(target_faction)) {
      // If the faction is not criminal, the government will step in to
      // protect the civilians. So change the government of this system
      // to hostile.
      gov_faction = tESysSetup.Government();

      if ((none != gov_faction)&& (target_faction != gov_faction)) {
         // One special case, if the government is the empty faction
         // no government, then don't make any changes. And if the
         // government has already been lowered, don't lower it again.

         if (empty_faction != gov_faction) {
            tEFaction.AdjustCurrentAction(gov_faction, penalty);
         }
      }
   }

}


// 
ShipAttacked(hship target_ship, float penalty)
{
   hship player = iShip.FindPlayerShip();
   hship last_attacker;

   list fleet = tEpicFleet.PlayerFleet();

   debug Debug.PrintString("tRepWatch.ShipAttacked\n");

   if (none == target_ship) {
      return;
   }

   last_attacker = iShip.Cast(iShip.LastAttacker(target_ship));

   if (none != last_attacker) {
      if (player == last_attacker) {
         if (iShip.HasFired(player)) {
            // The player is guilty, apply the penalty.
            apply_penalty(target_ship, penalty);
         }
      }

      if (List.Contains(fleet, last_attacker)) {
         // A player wingman is the culprit, check if the player
         // ordered this attack.

         if (target_ship == iShip.Cast(tEPlayerOrders.OrderTarget(last_attacker))){
            // Yes, the attack was ordered, apply the penalty.
            apply_penalty(target_ship, penalty);
         }
      }
   }

}
/*  
THIS MOD IS NOT MADE, DISTRIBUTED, OR SUPPORTED BY INFOGRAMES
OR PARTICLE SYSTEMS LTD. 

ELEMENTS TM & (C) INFOGRAMES AND PARTICLE SYSTEMS LTD.
*/
