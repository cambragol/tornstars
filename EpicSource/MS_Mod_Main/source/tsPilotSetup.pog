//*******************************************************************************************/
//
// tsPilotSetup.pog
//
// This pog object implements the setup of pilots and the scripts they use.
// 
//
// March 2006, Jon Freise
//******************************************************************************************/

package tsPilotSetup;

//[of]:Imports
uses	Sim,
		iShip,
		iSim,
		Debug,
		Global,
		GUI,
		iGUI,
		iHUD,
		INIFile,
		Input,
		List,
		Object,
		String,
		Task,
		Text,
		Math,
		iAI,
		iShipCreation,
		iComms,
		iConversation,
		tsShipComms,
		tsLRoot,
		tsLTrade,
		tsFaction,
		tsTradeSell,
		tsMoney,
		tsShipName,
		tsPcOwner,
		tsLProduction,
		tsLFleet,
		tsFleetOp,
		tsPodUtil,
		tsReputationWatch,
		tEpicEventEnum,
		tsEvent,
		tsDistress;
//[cf]


//[of]:Exports
provides SetupOperation,
         OperationDeath,
         SetupCargo,
         CargoSelfPreserve,
         CargoDeath,
         SetupEscort,
         EscortSelfPreserve,
         EscortDeath;
//[cf]



prototype drop_cargo(hship freighter);

prototype SetupCargo(hship cargo_ship, float notice_level, float flee_level);

prototype SetupEscort(hship escort, float notice_level, float flee_level);

// This task is launched when an escort ship 
// has been attacked. It watches the ship and tells it when
// to stop fighting and flee.
//[of]:task escort_task(hship escort)
task escort_task(hship escort)
{
   float hit_points, flee_points;
   hship last_attacker;
	float notice_level, flee_level;
	int recover_timer;

	notice_level = Object.FloatProperty(escort,"notice_level");
	flee_level = Object.FloatProperty(escort,"flee_level");


   if (Object.BoolProperty(escort,"watch_task")) {
      // this ship has a watch task already.
      return;
   }

   // Set that the ship has a watch task assigned, or is being reactivated
   if (Object.PropertyExists(escort, "watch_task")) {
      Object.SetBoolProperty(escort,"watch_task", true);
   }else {
      Object.AddBoolProperty(escort,"watch_task", true);
   }

   while (1) {
      Task.Sleep(Task.Current(), 1.0);

	recover_timer = recover_timer + 1;
		debug Debug.PrintString("tsPilotSetup.escort_task Checking actual recover times\n");
		debug Debug.PrintInt(recover_timer);

      if (Sim.IsDead(escort)) {
         // our ship is dead, bail.
         return;
      }
      
      hit_points = Object.FloatProperty(escort,"hit_points");
      flee_points = Object.FloatProperty(escort,"flee_hit_points");

	if (recover_timer > 180) {

	// We are okay, return and turn off task

	Object.SetBoolProperty(escort,"watch_task", false);
	recover_timer = 0;
	return;
	}

	else if (recover_timer == 180) {

		iShip.RemovePilot(escort);
		SetupCargo(escort, notice_level, flee_level);

		debug Debug.PrintString("tsPilotSetup.escort_task setting up flee and notice levels\n");
		debug Debug.PrintFloat(notice_level);
		debug Debug.PrintString("\n");
		debug Debug.PrintFloat(flee_level);


	}
      else if (hit_points < flee_points) {
         // If our orders are not to run, then run.

         if (OT_Flee != iAI.CurrentOrderType(escort)) {
            last_attacker = iShip.Cast(iShip.LastAttacker(escort));


            iAI.PurgeOrders(escort);
            iAI.GiveFleeOrder(escort, last_attacker);

            debug Debug.PrintString("tsPilotSetup.escort_task giving flee order\n");
            // This is a good place for a distress call.

            // Escorts don't normally carry cargo, but just in case.
            tsPodUtil.DropCargo(escort);
         }
      }
	else {

	}
   }
}
//[cf]


// This task is launched when a cargo ship has
// been attacked.
//[of]:task cargo_task(hship cargo_ship)
task cargo_task(hship cargo_ship)
{
   float hit_points, flee_points, spacing;
   hship last_attacker;
   set cargo;
	float notice_level, flee_level;
	int recover_timer, do_once;

	notice_level = Object.FloatProperty(cargo_ship,"notice_level");
	flee_level = Object.FloatProperty(cargo_ship,"flee_level");

	//spacing = iUtilities.GetLargestShipRadius( Sim.Group(cargo_ship)) * 2;

   if (Object.BoolProperty(cargo_ship,"watch_task")) {
      // this ship has a watch task already.
      return;
   }

   // set fact that this ship now has a watch task assigned to it
      if (Object.PropertyExists(cargo_ship, "watch_task")) {
      Object.SetBoolProperty(cargo_ship,"watch_task", true);
   }else {
      Object.AddBoolProperty(cargo_ship,"watch_task", true);
   }

   // continuous monitoring loop
   while (1) {
      Task.Sleep(Task.Current(), 1.0);


	recover_timer = recover_timer + 1;
		debug Debug.PrintString("\n");
		debug Debug.PrintString("tsPilotSetup.cargo_task recover timer = ");
		debug Debug.PrintInt(recover_timer);
		debug Debug.PrintString("\n");

      if (Sim.IsDead(cargo_ship)) {
         // our ship is dead, bail.
         return;
      }

	
      
      // get the hit points and flee points for the cargo ship
      hit_points = Object.FloatProperty(cargo_ship,"hit_points");
      flee_points = Object.FloatProperty(cargo_ship,"flee_hit_points");

	if (recover_timer > 180) {

	// We are okay, return and turn off task

	Object.SetBoolProperty(cargo_ship,"watch_task", false);
	recover_timer = 0;
	return;
	}

	else if (recover_timer == 180) {

		iShip.RemovePilot(cargo_ship);
		SetupCargo(cargo_ship, notice_level, flee_level);

		debug Debug.PrintString("tsPilotSetup.cargo_task setting up flee and notice levels\n");
		debug Debug.PrintFloat(notice_level);
		debug Debug.PrintString("\n");
		debug Debug.PrintFloat(flee_level);


	}
      else if (hit_points < flee_points) {
         // If our orders are not to run, then run.

         // if not already fleeing then make us flee
         if (OT_Flee != iAI.CurrentOrderType(cargo_ship)) {

            last_attacker = iShip.Cast(iShip.LastAttacker(cargo_ship));
            iAI.PurgeOrders(cargo_ship);
		
		// No group orders here as it will conflict with the operation states
		//iAI.GiveEscortOrder(Sim.Group(cargo_ship), cargo_ship, spacing, spacing, spacing, 4500);

            iAI.GiveFleeOrder(cargo_ship, last_attacker);

            debug Debug.PrintString("tsPilotSetup.cargo_task giving flee order\n");

            // This is a good place for a distress call.
            // Joco: The distress call should be in 'CargoSelfPreserve' per the escort pattern.

            // Drop all of our cargo and run for it.
            //cargo = tsPodUtil.ShipPods(cargo_ship);
            //Task.Detach(start iUtilities.JettisonCargo( List.FromSet(cargo), cargo_ship ));
            
            tsPodUtil.DropCargo(cargo_ship);

         }
      }
	else {

	}
   }
}
//[cf]


//[of]:SetupEscort(hship escort, float notice_level, float flee_level)
SetupEscort(hship escort, float notice_level, float flee_level)
{
   
   // Setup the pilot so that it turns hostile very quickly.
   iShip.InstallAIPilot(escort, 0.1, 4.0,
                        notice_level,
                        "tsPilotSetup.EscortSelfPreserve",
                        "tsPilotSetup.EscortSelfPreserve",
                        "tsPilotSetup.EscortSelfPreserve",
                        "tsPilotSetup.EscortSelfPreserve");

   // Set the level of hit points when we should run for it.
   Object.AddFloatProperty(escort,"flee_hit_points", 
                           Object.FloatProperty(escort,"hit_points") * flee_level);

   Object.AddFloatProperty(escort,"notice_level", notice_level);
   Object.AddFloatProperty(escort,"flee_level", flee_level);

   Object.SetStringProperty(escort,"death_script", "tsPilotSetup.EscortDeath");
}
//[cf]


// Someone is attacking the escort.
//[of]:task EscortSelfPreserve(hship escort)
task EscortSelfPreserve(hship escort, hship agressor_ship)
{
   hisim last_attacker;
   hfaction empty_faction = tsFaction.EmptyFaction();

   debug Debug.PrintString("tsPilotSetup.EscortSelfPreserve escort attacked\n");

   // Test if the player did it, and give penalty/bonus.
   tsReputationWatch.ShipAttacked(escort, -2.0);

   // Launch the watch task that will set this ship to run
   // when badly damaged.
   Task.Detach(start escort_task(escort));

   // We need to choose if the escort attacks the last
   // attacker. There are a few cases that need
   // to get weeded out.

   if (none == agressor_ship) {
      debug Debug.PrintString("tsPilotSetup.EscortSelfPreserve no attacker\n");
      return;
   }

   // Mistaken shot.
   if (iSim.Faction(escort) == iSim.Faction(agressor_ship)) {
      debug Debug.PrintString("tsPilotSetup.EscortSelfPreserve friendly fire\n");
      return;
   }

   // Empty faction, junk should be ignored.
   if (iSim.Faction(agressor_ship) == empty_faction) {
      debug Debug.PrintString("tsPilotSetup.EscortSelfPreserve empty faction attack\n");
      return;
   }

   debug Debug.PrintString("tsPilotSetup.EscortSelfPreserve sending distress call\n");
   // Let our patrol group know we were fired upon.
   tsEvent.SendEvent(Sim.Group(escort),
                     espSelfAttacked,
                     eseSelfAttacked,
                     escort,
                     agressor_ship,
                     escort);

   iAI.PurgeOrders(escort);
   iAI.GiveAttackOrder(escort, agressor_ship);   

}
//[cf]

 
// Some ships belong to an owner with fleets. Charge the owner for the loss
// of this ship.
//[of]:fleet_loss(hship ship)
fleet_loss(hship ship)
{
   hisim operation = iSim.Cast(tsPcOwner.Owner(ship));

   if (none != operation) {
      // If this escort is owned by a station or operation
      // then the owner will have fleets. So deduct this lost ship from
      // the supply of fleets.
      if (tsFleetOp.IsOperation(operation) || (T_Station == iSim.Type(operation))){

         // Subtract off the threat value of the dead ship.
         tsLFleet.ChangeFleets(operation, -1.0 * Object.FloatProperty(ship,"threat"));
      }
   }
}
//[cf]


// An escort death script just needs to remove 
// its value from the owners fleets.
//[of]:task EscortDeath(hship escort)
task EscortDeath(hship escort)
{
   hfaction empty_faction = tsFaction.EmptyFaction();
   hship last_attacker;

   debug Debug.PrintString("tsPilotSetup.EscortDeath\n");

   tsReputationWatch.ShipAttacked(escort, -8.0);

   fleet_loss(escort);

   // Utter death threats..
   iSim.Kill(escort);
}
//[cf]


//[of]:SetupCargo(hship cargo_ship, float notice_level, float flee_level)
SetupCargo(hship cargo_ship, float notice_level, float flee_level)
{
   
   // Setup the pilot so that it turns hostile very quickly.
   iShip.InstallAIPilot(cargo_ship, 0.1, 1.0,
                        notice_level,
                        "tsPilotSetup.CargoSelfPreserve",
                        "tsPilotSetup.CargoSelfPreserve",
                        "tsPilotSetup.CargoSelfPreserve",
                        "tsPilotSetup.CargoSelfPreserve");

   // Set the level of hit points when we should run for it.
   Object.AddFloatProperty(cargo_ship,"flee_hit_points", 
                           Object.FloatProperty(cargo_ship,"hit_points") * flee_level);

	//Added to allow proper set up of AI restarts in cargo_task
   	Object.AddFloatProperty(cargo_ship,"notice_level", notice_level);
   	Object.AddFloatProperty(cargo_ship,"flee_level", flee_level);

   Object.SetStringProperty(cargo_ship,"death_script", "tsPilotSetup.CargoDeath");
}
//[cf]


// Some one is attacking the ship. 
// Because this is an cargo_ship, don't worry about it too much.
//[of]:task CargoSelfPreserve(hship cargo_ship)
task CargoSelfPreserve(hship cargo_ship, hship agressor_ship)
{
   hfaction empty_faction = tsFaction.EmptyFaction();

   debug Debug.PrintString("tsPilotSetup.CargoSelfPreserve\n");

   // Launch the watch task that will set this ship to run.
   Task.Detach(start cargo_task(cargo_ship));

   // Adjust the attacking ships reputation
   tsReputationWatch.ShipAttacked(cargo_ship, -2.0);

   if (none == agressor_ship) {
      debug Debug.PrintString("tsPilotSetup.CargoSelfPreserve no attacker\n");
      return;
   }

   // Mistaken shot.
   if (iSim.Faction(cargo_ship) == iSim.Faction(agressor_ship)) {
      debug Debug.PrintString("tsPilotSetup.CargoSelfPreserve friendly fire\n");
      return;
   }

   // Empty faction, junk should be ignored.
   if (iSim.Faction(agressor_ship) == empty_faction) {
      debug Debug.PrintString("tsPilotSetup.CargoSelfPreserve empty faction attack\n");
      return;
   }

  	// make a distress call for help, some bugger attacked us!
  	tsDistress.Send(espDistress, eseDistress,  iSim.Cast(cargo_ship), agressor_ship, iSim.Cast(cargo_ship), 50km);  

   	debug Debug.PrintString("tsPilotSetup.CargoSelfPreserve sending distress call\n");
   	// Let our patrol group know we were fired upon.
   	tsEvent.SendEvent(Sim.Group(cargo_ship),
                     espSelfAttacked,
                     eseSelfAttacked,
                     cargo_ship,
                     agressor_ship,
                     cargo_ship);
 	// Added because some cargo ships have turrets?
 	iAI.PurgeOrders(cargo_ship);
 	iAI.GiveSpecificAttackOrder(cargo_ship, agressor_ship, AS_GunStation); 

}
//[cf]


// An cargo_ship death script just needs to remove 
// its value from the owners fleets.
//[of]:task CargoDeath(hship cargo_ship)
task CargoDeath(hship cargo_ship)
{
   hfaction empty_faction = tsFaction.EmptyFaction();
   hship last_attacker;

   debug Debug.PrintString("tsPilotSetup.CargoDeath\n");

   last_attacker = iShip.Cast(iShip.LastAttacker(cargo_ship));

   fleet_loss(cargo_ship);

   // If the player is guilty this will assign penalty (or bonus);
   tsReputationWatch.ShipAttacked(cargo_ship, -8.0);

   // Utter death threats..
   iSim.Kill(cargo_ship);
}
//[cf]


// The operation pilot is just like a cargo ship
// But it also destroys the owning operation when it dies.
//[of]:SetupOperation(hship ship, float notice_level, float flee_level)
SetupOperation(hship ship, float notice_level, float flee_level)
{
   // Setup the pilot so that it turns hostile very quickly.
   iShip.InstallAIPilot(ship, 0.1, 2.0,
                        notice_level,
                        "tsPilotSetup.CargoSelfPreserve",
                        "tsPilotSetup.CargoSelfPreserve",
                        "tsPilotSetup.CargoSelfPreserve",
                        "tsPilotSetup.CargoSelfPreserve");

   // Set the level of hit points when we should run for it.
   Object.AddFloatProperty(ship,"flee_hit_points", 
                           Object.FloatProperty(ship,"hit_points") * flee_level);

   Object.AddFloatProperty(ship,"notice_level", notice_level);
   Object.AddFloatProperty(ship,"flee_level", flee_level);

   Object.SetStringProperty(ship,"death_script", "tsPilotSetup.OperationDeath");
}
//[cf]


// Used for when a ship is representing an operation.
// This function kills the represented operation.
//[of]:task OperationDeath(hship ship)
task OperationDeath(hship ship)
{
   hisim operation;
   hfaction empty_faction = tsFaction.EmptyFaction();
   hship last_attacker;
   bool guilty = true;

   debug Debug.PrintString("tsPilotSetup.OperationDeath\n");


   operation = iSim.Cast(tsPcOwner.Owner(ship));
   if (none != operation) {
      if (tsFleetOp.IsOperation(operation)){

         // This op is history.
         tsFleetOp.DestroyOp(operation);
      }
   }

   fleet_loss(ship);

   tsReputationWatch.ShipAttacked(ship, -8.0);

   // Utter death threats..

   iSim.Kill(ship);
}
//[cf]


/*   

THIS MOD IS NOT MADE, DISTRIBUTED, OR SUPPORTED BY INFOGRAMES
OR PARTICLE SYSTEMS LTD. 

ELEMENTS TM & (C) INFOGRAMES AND PARTICLE SYSTEMS LTD.
*/
