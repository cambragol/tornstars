/*******************************************************************************************/
//
// tsFoThugs.pog
// 
// Torn Stars Fleet Operation Thugs
// 
// This function implements the decision making intellegence of the 
// Thugs type of Fleet Operation. Thugs pick fights, and are the muscle of pirate factions.
// 
// March 2006
//******************************************************************************************/

package tsFoThugs;


uses  Sim,
iSim,
Debug,
Global,
iGame,
iFaction,
INIFile,
Input,
List,
Object,
String,
Task,
State,
Text,
Math,
iShip,
iHabitat,
iMapEntity,
   iCargo,
   iCargoScript,
   iHUD,
   iComms,
   tsStationEnum,
   tsStation,
   tsFaction,
   tsTime,
   tsFleetOp,
   tsLRoot,
   tsLCenter,
   tsLProduction,
   tsLFleet,
   tsStationFilter,
   tsEconUtil,
   tsShipName,
   tsShipCreationEnum,
   tsShipCreation,
   tsFleetOpCombat,
   tsFleetOpPhysical,
   tsDebug;




provides New,
         Save,
         Restore,
         Update,
         PlayerNear;


prototype hhabitat find_patrol_station(hisim operation, hmapentity center, string system_name, float distance);

prototype hhabitat find_safe_station(hisim operation, hmapentity center, string system_name);

//*******************************************************************************************/         
//
//*******************************************************************************************/

New(hisim operation)
{
   string ship_name, ship_template, op_type, ship_class;
   hfaction faction;


   ship_class = tsFleetOp.GetOperationShipClass(operation);

   faction = iSim.Faction(operation);

   // We pick an underworld name for ourselves. 
   // using a large number means we get a random name.
   ship_name = tsShipName.ShipName("underworld", 10000);

   // We pick a heavy warship for center vessel.
   ship_template = tsShipCreation.GetShip(faction, tsShipCreation.String2ShipType(ship_class));

   tsFleetOp.SetName(operation, ship_name);
   tsFleetOp.SetShipTemplate(operation, ship_template);

   tsLFleet.SetMaxFleets(operation, tsFleetOp.GetOperationMaxFleets(operation));
   tsLFleet.SetFleets(operation, tsFleetOp.GetOperationMaxFleets(operation));
}



Save(hisim operation)
{

}



Restore(hisim operation)
{
   
}


/*
   Thugs basic behavior.
   
   Thugs patrol non-hostile stations near pirate bases. 

   If there are hostiles, and we are outnumbered, we leave 
   (criminals would rather live).
   If we are at home however, we stay and fight.
   If we are down to 1/4 hit points we go home.
   If we are wounded, go somewhere safe to heal up.
*/

Update(hisim operation)
{
   hmapentity center = tsLCenter.GetCenter(operation);
   hhabitat target_station, supporter_station;
   bool hostiles, wounded, dying, home, out_gunned, need_patrol;
   bool move_home, stay_still, move_safe;
   list local_operations;
   hisim visitor;
   hfaction faction, visitor_faction;
   int fleets, hostile_fleets, total_hostiles;
   int i, total;
   int current_day = tsTime.GetDay();
   int patrol_day;
   int update_delay = 1;

   tsDebug.PrintString("tsfothugs_debug","tsFoThugs.Update\n");

   
   faction = iSim.Faction(operation);

   // Here we look up what other operations are nearby. 
   // Any combat between this and other operations happens here.

   local_operations = tsFleetOp.StationOperations(center);
   List.Remove(local_operations, operation);
   total = List.ItemCount(local_operations);

   hostiles = false;
   total_hostiles = 0;

   for (i=0;i<total;++i) {
      visitor = iSim.Cast(List.GetNth(local_operations,i));
      visitor_faction = iSim.Faction(visitor);

      if (iFaction.Feeling(visitor_faction, faction) < -0.2) {
         // There are hostile forces at this station
         fleets = tsLFleet.Fleets(operation);
         hostile_fleets = tsLFleet.Fleets(operation);

         if (fleets > hostile_fleets) {
            // We have the advantage, pound them.
            tsFleetOpCombat.Offense(center, operation, visitor);
         }else {
            // We are outnumbered, so switch to evasive tactics.
            tsFleetOpCombat.Defense(center, operation, visitor);
         }
         // Remember this total, so we can choose to flee later.
         total_hostiles += hostile_fleets;
         hostiles = true;
      }
   }

   fleets = tsLFleet.Fleets(operation);

   if (fleets == 0) {
      // Ouch, we died.
      tsDebug.PrintString("tsfothugs_debug","tsFoThugs lost fleets and died\n");

      tsFleetOp.DestroyOp(operation);
      return;
   }

   // Check if we are outnumbered.
   if (fleets < total_hostiles) {
      out_gunned = true;
   }else {
      out_gunned = false;
   }

   // Wounded when half damaged (leave combat)
   if (fleets < (tsLFleet.MaxFleets(operation)/2)) {
      wounded = true;
   }else {
      wounded = false;
   }

   // Dying when down to 1/4 fleets (flee home)
   if (fleets < (tsLFleet.MaxFleets(operation)/4)) {
      dying = true;
   }else {
      dying = false;
   }

   supporter_station = tsFleetOp.Supporter(operation);

   // Are we home?
   if (center == iMapEntity.Cast(supporter_station)) {
      home = true;
   }else {
      home = false;
   }

   move_home = false; // Move to home base
   move_safe = false; // Move to safe location (for repair)
   stay_still = false;

   // 
   if (dying && !home) {
      move_home = true;
   }else if (dying && home) {
      // Stay right here.
      stay_still = true;
   }else if (hostiles && wounded) {
      // Find another station.
      move_safe = true;
   }else if (out_gunned) {
      // Find another station.
      move_safe = true;
   }else if (wounded) {
      // No hostiles, so stay here to heal.
      stay_still = true;
   }

   // Repair some fleets. Double rate if at home.
   if (home) {
      tsLFleet.ChangeFleets(operation, 20 * update_delay);
   }else {
      tsLFleet.ChangeFleets(operation, 10 * update_delay);
   }

   if (move_home) {

      tsLCenter.SetCenter(operation, supporter_station);
      tsFleetOpCombat.SetDistressFlags(supporter_station);

      tsDebug.PrintString("tsfothugs_debug","tsFoThugs moving home\n");
      tsDebug.PrintHandle("tsfothugs_debug",supporter_station);
      tsDebug.PrintString("tsfothugs_debug"," supporter station\n");

   }else if (move_safe) {


      target_station = find_safe_station(operation, center, iSim.WorldName(center));

      if (none != target_station) {
         // To move an operation, we just move the center.
         tsLCenter.SetCenter(operation, target_station);
         tsFleetOpCombat.SetDistressFlags(target_station);
      }else {
         // If there are no other stations, move home.
         tsLCenter.SetCenter(operation, supporter_station);
         tsFleetOpCombat.SetDistressFlags(supporter_station);
      }

      tsDebug.PrintString("tsfothugs_debug","tsFoThugs moving to safety\n");
      tsDebug.PrintHandle("tsfothugs_debug",target_station);
      tsDebug.PrintString("tsfothugs_debug"," new station\n");

   }else if (!stay_still) {

      // Move every week, patrolling near our patrol station.
      patrol_day = tsFleetOp.EventTimer(operation);
      if (patrol_day == 0) {
         patrol_day = Math.RandomInt(1,7);
         tsFleetOp.SetEventTimer(operation, patrol_day);
      }

      if (current_day > patrol_day) {

         // Move to another station near our pirate base.
         tsFleetOp.SetEventTimer(operation, current_day + 7);

         // Find those stations to harass around the same planet as our base.
         target_station = find_patrol_station(operation, center, iSim.WorldName(center), 500000km);

         if (none != target_station) {
            tsLCenter.SetCenter(operation, target_station);

            tsDebug.PrintString("tsfothugs_debug","tsFoThugs new patrol\n");
            tsDebug.PrintHandle("tsfothugs_debug",target_station);
            tsDebug.PrintString("tsfothugs_debug"," new station\n");
         }
      }
   }else {
      tsDebug.PrintString("tsfothugs_debug","tsFoThugs stay still\n");
   }

   // Set next wakeup date.
   tsFleetOp.SetWakeTimer(operation, current_day + update_delay);
}





// Called when the player is near the operation
PlayerNear(hisim operation)
{
   debug Debug.PrintString("tsFoThugs.PlayerNear: Player near operation, instantiate physical sims.\n");
   tsFleetOpPhysical.MakeOpPhysical(operation);
}


// Thugs patrol the neutral or better stations at close distance to thier home station.
hhabitat find_patrol_station(hisim operation, hmapentity center, string system_name, float distance)
{
   set habitats;

   // Search system stations and find a normal status station where we can live.
   habitats = tsStationFilter.OnStatus(iMapEntity.SystemHabitatsInSystem(system_name),
                                                 ESS_Normal);
                                     
   Set.Remove(habitats, center);
   // We can hang out at neutral or better stations. We avoid people trying to
   // kill us.
   habitats = tsStationFilter.OnGreaterFeeling(habitats,
                                              iSim.Faction(operation),
                                              tsFaction.Type2LowerLevel(FT_Neutral));

   return iHabitat.Random(habitats);
}




// We can hang out at neutral or better stations. We avoid people trying to
// kill us. We are glad to make use of empty stations. 
// Good for when the fleet is wounded.
hhabitat find_safe_station(hisim operation, hmapentity center, string system_name)
{
   set habitats;


   habitats = tsStationFilter.OnGreaterFeeling(iMapEntity.SystemHabitatsInSystem(system_name),
                                              iSim.Faction(operation),
                                              tsFaction.Type2LowerLevel(FT_Neutral));
   Set.Remove(habitats, center);

   return iHabitat.Random(habitats);
}

/*  
THIS MOD IS NOT MADE, DISTRIBUTED, OR SUPPORTED BY INFOGRAMES
OR PARTICLE SYSTEMS LTD. 

ELEMENTS TM & (C) INFOGRAMES AND PARTICLE SYSTEMS LTD.
*/