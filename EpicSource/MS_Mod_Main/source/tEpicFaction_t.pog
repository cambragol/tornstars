//*******************************************************************************************/
//
// tEpicFaction_t
//
// Unit test cases for the EpicFaction package.
// 
//
//
//
// September 2003, Jon Freise
//******************************************************************************************/

package tEpicFaction_t;

uses iShip, Global, Object, Sim, Input, iMapEntity, Math, iAI, Task, Debug, iFaction, iSim, iFactionScript, iComms, INIFile, iUtilities, iPilotSetup,
iConversation, iFormation, Group, Text, iEmail, State, iTrafficCreation, iRangeCheck,iRemotePilot, iRegion, iMissionTracker, iWingmen,
iCargoScript, iShipCreation, iHUD, iScriptedOrders, iStation, iStartSystem, iObjectives, iMultiplay, iCutsceneUtilities,
iDirector, iEscort, iLagrangePoint, iMusic, iGame, Stream, iBackToBase, iDeathScript,
   tEActionEnum,
   tEpicFactionEnum,
   tEpicFaction;



provides StartTest, 
         RestoreTest;


bool StartTest()
{
   hsim faction, faction2;
   float feeling;
   hfaction hfac;

   // Does it exist?
   faction = tEpicFaction.Create("UnitTest",
                                 "Exile","html:/html/encyclopedia/politics/junkers", 
                                 FCT_MegaCorp, FALN_Gray, "Sultan");

   if (none == faction) {
      debug Debug.PrintString("EpicFaction_t create failed\n");
      return false;
   }

   if ("UnitTest" != Sim.Name(faction)) {
      debug Debug.PrintString("EpicFaction_t wrong name\n");
      return false;
   }

   if ("Sultan" != tEpicFaction.FleetStyle(faction)) {
      debug Debug.PrintString("EpicFaction_t wrong fleet style\n");
      return false;
   }

   hfac = tEpicFaction.EocFaction(faction);
   if (hfac != iFaction.Find("Exile")){
      debug Debug.PrintString("EpicFaction_t Exile faction not set \n");
      debug Debug.PrintHandle(hfac);
      debug Debug.PrintString("\n");
      debug Debug.PrintHandle(iFaction.Find("Exile"));
      debug Debug.PrintString("\n");
      return false;
   }

   faction2 = tEpicFaction.Find("UnitTest");

   if (faction != faction2) {
      debug Debug.PrintString("EpicFaction_t find failed\n");
      return false;
   }

   faction2 = tEpicFaction.Find("Invalid Name");

   if (none != faction2) {
      debug Debug.PrintString("EpicFaction_t find should have failed\n");
      return false;
   }


   // Test set and get on known
   if (tEpicFaction.IsKnown(faction)){
      debug Debug.PrintString("EpicFaction_t known default wrong\n");
      return false;
   }
   
   tEpicFaction.SetKnown(faction, true);
   if (!tEpicFaction.IsKnown(faction)){
      debug Debug.PrintString("EpicFaction_t known set failed\n");
      return false;
   }

   tEpicFaction.SetKnown(faction, false);
   if (tEpicFaction.IsKnown(faction)){
      debug Debug.PrintString("EpicFaction_t known reset failed\n");
      return false;
   }


   // Test get and set on secret
   if (tEpicFaction.IsSecret(faction)){
      debug Debug.PrintString("EpicFaction_t secret default wrong\n");
   }
   
   tEpicFaction.SetSecret(faction, true);
   if (!tEpicFaction.IsSecret(faction)){
      debug Debug.PrintString("EpicFaction_t secret set failed\n");
      return false;
   }

   tEpicFaction.SetSecret(faction, false);
   if (tEpicFaction.IsSecret(faction)){
      debug Debug.PrintString("EpicFaction_t secret reset failed\n");
      return false;
   }

   // Test type and alignment
   if (FCT_MegaCorp != tEpicFaction.Type(faction)) {
      debug Debug.PrintString("EpicFaction_t unit test type wrong\n");
      return false;
   }

   if (FALN_Gray != tEpicFaction.Alignment(faction)) {
      debug Debug.PrintString("EpicFaction_t unit test alignment wrong\n");
      return false;
   }


   if (tEpicFaction.IsGovernment(faction)) {
      debug Debug.PrintString("EpicFaction_t is gov failed\n");
      return false;
   }

   if (tEpicFaction.IsHidden(faction)) {
      debug Debug.PrintString("EpicFaction_t is hidden failed\n");
      return false;
   }

   if (!tEpicFaction.IsPublic(faction)) {
      debug Debug.PrintString("EpicFaction_t is public failed\n");
      return false;
   }

   faction2 = tEpicFaction.Create("UnitTest2","Exile","html:/html/encyclopedia/politics/junkers", 2, 8,"Empire");

   tEpicFaction.SetSecret(faction2, true);


   feeling = tEpicFaction.Feeling(faction, faction2);

   if ((feeling > 0.01)||(feeling < -0.01)) {
      debug Debug.PrintString("EpicFaction_t init feeling not zero\n");
      return false;
   }

   tEpicFaction.SetFeeling(faction, faction2, 0.4);

   feeling = tEpicFaction.Feeling(faction, faction2);

   if ((feeling > 0.41)||(feeling < 0.39)) {
      debug Debug.PrintString("EpicFaction_t init feeling set 0.4 failed\n");
      return false;
   }

   tEpicFaction.SetFeeling(faction, faction2, 0.2);

   feeling = tEpicFaction.Feeling(faction, faction2);

   if ((feeling > 0.21)||(feeling < 0.19)) {
      debug Debug.PrintString("EpicFaction_t init feeling set 0.2 failed\n");
      return false;
   }

   faction = tEpicFaction.Find("F_Player");

   if (none == faction) {
      debug Debug.PrintString("EpicFaction_t INI Find Player failed\n");
      return false;
   }

   faction = tEpicFaction.Find("F_Vorlon");
   if (none == faction) {
      debug Debug.PrintString("EpicFaction_t INI Find F_Vorlon failed\n");
      return false;
   }

   if (FCT_Navy != tEpicFaction.Type(faction)){
      debug Debug.PrintString("EpicFaction_t INI Type incorrect\n");
      return false;
   }

   if (FALN_Gray != tEpicFaction.Alignment(faction)){
      debug Debug.PrintString("EpicFaction_t INI Alignment incorrect\n");
      return false;
   }   

   // Check that levels were set correctly from INI file 

   faction = tEpicFaction.Find("F_Vorlon");

   faction2 = tEpicFaction.Find("F_Shadow");

   feeling = tEpicFaction.Feeling(faction, faction2);

   if ((feeling > -0.7)||(feeling < -0.9)) {
      debug Debug.PrintString("EpicFaction_t INI feeling set -0.8 failed\n");
      return false;
   }

   // Setup for the restore test
   faction = tEpicFaction.Find("UnitTest");

   // Set positive for restore test
   tEpicFaction.SetKnown(faction, true);

   tEpicFaction.SetSecret(faction, false);


   // Setup for the restore test
   faction = tEpicFaction.Find("UnitTest2");

   // Set positive for restore test
   tEpicFaction.SetKnown(faction, false);

   tEpicFaction.SetSecret(faction, true);

   debug Debug.PrintString("EpicFaction_t start test success\n");
   return true;
}


bool RestoreTest()
{

   hsim faction, faction2;
   float feeling;
   hfaction hfac;


   faction = tEpicFaction.Find("UnitTest");
   if (none == faction) {
      debug Debug.PrintString("EpicFaction_t restore cannot find UnitTest\n");
      return false;
   }

   faction2 = tEpicFaction.Find("UnitTest2");
   if (none == faction2) {
      debug Debug.PrintString("EpicFaction_t restore cannot find UnitTest2\n");
      return false;
   }

   feeling = tEpicFaction.Feeling(faction, faction2);

   if ((feeling > 0.21)||(feeling < 0.19)) {
      debug Debug.PrintString("EpicFaction_t restore feeling 0.2 failed\n");
      return false;
   }

   // Check fleet style restored
   if ("Sultan" != tEpicFaction.FleetStyle(faction)) {
      debug Debug.PrintString("EpicFaction_t unit test fleet style wrong\n");
      return false;
   }


   // Check type restored
   if (FCT_MegaCorp != tEpicFaction.Type(faction)) {
      debug Debug.PrintString("EpicFaction_t unit test type wrong\n");
      return false;
   }

   // Check alignment restored
   if (FALN_Gray != tEpicFaction.Alignment(faction)) {
      debug Debug.PrintString("EpicFaction_t unit test alignment wrong\n");
      return false;
   }

   // Check known restored, should be true
   if (!tEpicFaction.IsKnown(faction)){
      debug Debug.PrintString("EpicFaction_t known restore true failed\n");
      return false;
   }

   // Check known restored, should be false
   if (tEpicFaction.IsKnown(faction2)){
      debug Debug.PrintString("EpicFaction_t known restore false failed\n");
      return false;
   }


   // Check secret restored, should be false
   if (tEpicFaction.IsSecret(faction)){
      debug Debug.PrintString("EpicFaction_t secret restore false failed\n");
      return false;
   }

   // Check secret restored, should be true
   if (!tEpicFaction.IsSecret(faction2)){
      debug Debug.PrintString("EpicFaction_t secret restore true failed\n");
      return false;
   }


   // Check eoc faction restored
   hfac = tEpicFaction.EocFaction(faction);
   if (hfac != iFaction.Find("Exile")){
      debug Debug.PrintString("EpicFaction_t faction restore failed\n");
      return false;
   }



   // Check destroy works
   tEpicFaction.Destroy(faction);

   faction = tEpicFaction.Find("UnitTest");
   if (none != faction) {
      debug Debug.PrintString("EpicFaction_t restore cannot destroy UnitTest\n");
      return false;
   }

   faction2 = tEpicFaction.Find("UnitTest2");
   if (none == faction2) {
      debug Debug.PrintString("EpicFaction_t restore cannot find UnitTest2 after destroy\n");
      return false;
   }

   tEpicFaction.Destroy(faction2);

   faction2 = tEpicFaction.Find("UnitTest2");
   if (none != faction2) {
      debug Debug.PrintString("EpicFaction_t restore cannot destroy UnitTest2\n");
      return false;
   }

   debug Debug.PrintString("EpicFaction_t restore success\n");

   return true;
}




/* 
THIS MOD IS NOT MADE, DISTRIBUTED, OR SUPPORTED BY INFOGRAMES
OR PARTICLE SYSTEMS LTD. 

ELEMENTS TM & (C) INFOGRAMES AND PARTICLE SYSTEMS LTD.
*/
