//*******************************************************************************************/
//
// tMusic.pog
//
// This file recreates the iMusic package. It supports adding new music suites. And a host
// of new sounds. Plus saves the sound events from the original PS iMusic.
// 
// 
//
// July 2003, Jon Freise
//******************************************************************************************/
package tMusic;

uses  Sim,
      iShip,
      iSim,
      Debug,
      Global,
      GUI,
      iGame,
      iGUI,
      iHUD,
      iHabitat,
      iMapEntity,
      iFaction,
      INIFile,
      Input,
      List,
      Object,
      String,
      Task,
      State,
      Text,
      iUtilities,
      iCargo,
      iInventory,
      iComms,
      Math,
      iPilotSetup,
      iMusic,
      iMod,
      Stream,
      uString,
      tStationEnum,
      tStation,
      tLProduction;

provides Play,
         Resume,
         Pause,
         PlayEvent,
         LoadSuite,
         SetSuite,
         ReturnSuite,
         SetMood, 
         ReturnMood,
         Init,
         SuiteList,
         Discovery,
         Combat,
         NewSystem,
         SoundNear;


// Local types ////////////////////////////////////////////////////////////////

// Play a specific piece of music - if iMusic is active this may be overridden
// by the context-sensitive music
prototype Play( string track, bool crossfade, bool loop );

// Play a specific event
prototype PlayEvent( int event );


// Tell iMusic to add in environmental effacts
prototype SetAmbientEnvironment( eAmbientEnvironment ae );

prototype Discovery();
prototype DiscoveryTime();

prototype Combat();
prototype CombatTime();

// Local prototypes;
prototype hsim find_suite(string key_name);

prototype task queuing_task();

prototype string station_sound(hhabitat producer);

// GlobalHandle current suite
// GlobalHandle current suite file INI
// GlobalHandle list of suites


// LoadSuite(string filename)
// This function allows adding a new suite of music for later selection.
// The function is very useful for location specific music suites.

// The function will check if the file name is a valid INI file. Then
// it will open the file and read out the key_name. The key_name will
// be attached to an object that includes the INI file name.

//[Suite_properties]
//key_name=Empire

//[Ambient]
//stream[0]=stream_name
//stream[1]=stream_name

bool LoadSuite(string suite_filename)
{
   hinifile suite_file = INIFile.Create(suite_filename);
   string key_name;
   hsim suite;
   list suite_list;

   if (none == suite_file) {

      debug Debug.PrintString("ERROR tMusic suite file missing ");
      debug Debug.PrintString(suite_filename);
      debug Debug.PrintString("\n");

      return false;
   }

   key_name = INIFile.String(suite_file, "Suite_properties", "key_name", "none");

   INIFile.Destroy(suite_file);

   if ("none" == key_name) {
      return false;
   }

   suite = Sim.Create("ini:/sims/nav/waypoint", key_name);

   Object.AddStringProperty(suite, "music_suite_filename", suite_filename);

   atomic {
      if (Global.Exists("gt_music_suite_list")) {
         suite_list = Global.List("gt_music_suite_list");
         List.AddTail(suite_list, suite);
         Global.SetList("gt_music_suite_list", suite_list);
      }else{
         List.AddTail(suite_list, suite);
         Global.CreateList("gt_music_suite_list", GA_Write|GA_NoSave, suite_list);
      }
   }

   return true;
}


// tMusic.SetSuite(string key_name)
// If the new key_name exists, open the new suite file.
// Check if a current suite is playing, close that file. 

// Stop the current music playing.
// Select an item from the new suite file, and start that playing.
// Save the suite name for future reference.
// Changing the suite will reset the mood to ambient. Use the
// SetMood to change the mood to whatever your new suite desires.

SetSuite(string key_name)
{
   hsim suite;
   hinifile suite_file;
   string filename;
   string sun_sound, planet_sound, moon_sound, ldsi_sound, giant_sound;
   string belt_sound;
   string admin_type, fortress_type, pirate_type, habitat_type, prod_type;

   suite = find_suite( key_name);

   if (none != suite) {
      if (Global.Exists("gt_music_suite_file")) {
        // INIFile.Destroy(INIFile.Cast(Global.Handle("gt_music_suite_file")));
      }

      filename = Object.StringProperty(suite,"music_suite_filename");

      suite_file = INIFile.Create(filename);

      if (none == suite_file) {

         debug Debug.PrintString("ERROR tMusic suite file missing ");
         debug Debug.PrintString(filename);
         debug Debug.PrintString("\n");
         return;
      }

      Global.CreateHandle("gt_music_current_suite", GA_Write| GA_NoSave, suite);
      Global.CreateString("gt_music_suite_filename", GA_Write| GA_NoSave, filename);
      Global.CreateString("gt_music_current_mood", GA_Write| GA_NoSave, "Ambient");
      Global.CreateInt("gt_music_current_selection", GA_Write| GA_NoSave, 0);

      // Stop the current music with a fade. This will trigger the queue task
      // to pick some new music.
      Stream.Stop(0,true);

      ldsi_sound = INIFile.String(suite_file,"Soundscape","station_empire","");
      planet_sound = INIFile.String(suite_file,"Soundscape","planet","");
      moon_sound = INIFile.String(suite_file,"Soundscape","moon","");

      giant_sound = INIFile.String(suite_file,"Soundscape","gasgiant","");
      sun_sound = INIFile.String(suite_file,"Soundscape","sun","");
      belt_sound = INIFile.String(suite_file,"Soundscape","belt","");


      pirate_type = INIFile.String(suite_file,"Soundscape","pirate_station","");
      prod_type = INIFile.String(suite_file,"Soundscape","production_station","");
      admin_type = INIFile.String(suite_file,"Soundscape","admin_station","");
      fortress_type = INIFile.String(suite_file,"Soundscape","fortress_station","");
      habitat_type = INIFile.String(suite_file,"Soundscape","habitat_station","");

      
      // Read in the soundscape info and set the proper globals.
      Global.CreateString("gt_musicchange_planet_sound",GA_Write|GA_NoSave,planet_sound);
      Global.CreateString("gt_musicchange_moon_sound",GA_Write|GA_NoSave,moon_sound);
      Global.CreateString("gt_musicchange_giant_sound",GA_Write|GA_NoSave,giant_sound);
      Global.CreateString("gt_musicchange_star_sound",GA_Write|GA_NoSave,sun_sound);
      Global.CreateString("gt_musicchange_belt_sound",GA_Write|GA_NoSave,belt_sound);


      Global.CreateString("gt_musicchange_ldsi_sound",GA_Write|GA_NoSave,ldsi_sound);
      Global.CreateString("gt_musicchange_pirate_type_sound",GA_Write|GA_NoSave,pirate_type);
      Global.CreateString("gt_musicchange_prod_type_sound",GA_Write|GA_NoSave,prod_type);
      Global.CreateString("gt_musicchange_admin_type_sound",GA_Write|GA_NoSave,admin_type);
      Global.CreateString("gt_musicchange_fortress_type_sound",GA_Write|GA_NoSave,fortress_type);
      Global.CreateString("gt_musicchange_habitat_type_sound",GA_Write|GA_NoSave,habitat_type);  

   }else {
      debug Debug.PrintString("Music: Suite not found ");
      debug Debug.PrintString(key_name);
      debug Debug.PrintString("\n");
   }
}

// Returns the current suites key name. Or empty string.
string ReturnSuite()
{
   hsim suite;
   
   if (Global.Exists("gt_music_current_suite")){
      suite = Sim.Cast(Global.Handle("gt_music_current_suite"));
      return Sim.Name(suite);
   }

   return "";
}

// tMusic.SetMood(string mood)
// Stop the current music playing.
// Save the mood name for future reference.

SetMood(string mood)
{
  if (Global.Exists("gt_music_current_mood")){
     // Only restart the stream if the mood changes.
     if (Global.String("gt_music_current_mood") != mood) {
        Global.SetString("gt_music_current_mood", mood);
        Stream.Stop(0,true);
     }
  }else {
     Global.CreateString("gt_music_current_mood", GA_Write| GA_NoSave, mood);

     // force the queue task to start some new music
     Stream.Stop(0,true);
  }
}

string ReturnMood()
{
  if (Global.Exists("gt_music_current_mood")){
     return Global.String("gt_music_current_mood");
  }

  return "";
}

// tMusic.Resume();
// If no music task has started, start one.
// If music is paused, clear the pause global.
Resume()
{
   if (Global.Exists("gt_music_pause")){
      Global.SetBool("gt_music_pause", false);
   }else {
      Global.CreateBool("gt_music_pause", GA_Write|GA_NoSave, false);
   }

   if (!Global.Exists("gt_queue_task")) {
      Global.CreateInt("gt_queue_task",GA_Write|GA_NoSave, 1);
      Task.Detach (start queuing_task());
   }
}

// tMusic.Pause();
// Set the pause global.
// Stop the current music.
Pause()
{
   if (Global.Exists("gt_music_pause")){
      Global.SetBool("gt_music_pause", true);
   }else {
      Global.CreateBool("gt_music_pause", GA_Write|GA_NoSave, true);
   }

   Stream.Stop(0,true);

}

Play( string track, bool crossfade, bool loop )
{
   Stream.Play(0, track, crossfade, loop);
}



// Events play in the second slot to avoid conflict with the 
// background music.
PlayEvent( int event )
{

   switch (event) {
   case ME_ShortCymbal:
      Stream.Play(2, 
                  "sound:/audio/music/short_cymbal",
                  false,    // fade in
                  false ); // do not loop
   
      break;
   case ME_LongCymbal:
      Stream.Play(2, 
                  "sound:/audio/music/long_cymbal",
                  false,    // fade in
                  false ); // do not loop
      break;
   case ME_SoftTimpani:
      Stream.Play(2, 
                  "sound:/audio/music/soft_timpani",
                  false,    // fade in
                  false ); // do not loop
      break;
   case ME_LoudTimpani:
      Stream.Play(2,
                  "sound:/audio/music/loud_timpani",
                  false,    // fade in
                  false ); // do not loop
      break;
      default:
      break;
   }
}



// queueing_task
// if no music is playing
// Check the current suite and mood. Randomly select from music
// choices and begin playing.

task queuing_task()
{
   string suite_key, mood, stream;
   hsim suite;
   int selection, next_choice, total_choice;
   bool paused;
   hinifile suite_file;

   debug Debug.PrintString("Music: que task running\n");

   iMusic.Pause();

   while (1) {
      Task.Sleep(Task.Current(), 1.0);
         paused = Global.Bool("gt_music_pause");

         if (!paused && !Stream.IsPlaying(0)) {

            debug Debug.PrintString("tMusic: Change tune\n");

            CombatTime();
            DiscoveryTime();
            
            suite = Sim.Cast(Global.Handle("gt_music_current_suite"));

            suite_file = INIFile.Create(Global.String("gt_music_suite_filename"));

            if (none == suite_file) {
               debug Debug.PrintString("tMusic: bad suite file ");
               debug Debug.PrintString(Global.String("gt_music_suite_filename"));
               debug Debug.PrintString("\n");
            }

            mood = Global.String("gt_music_current_mood");
            selection = Global.Int("gt_music_current_selection");

            if ((none != suite) && (none != suite_file)) {
               // Lookup the number of music choices
               total_choice = iUtilities.FindNumberOfINIEntries( suite_file, mood, "stream" );
               if (total_choice > 0) {
                  next_choice = Math.RandomInt(0,total_choice-1);
                  stream = INIFile.NumberedString(suite_file, mood,"stream",next_choice,"none");
                  Global.SetInt("gt_music_current_selection", next_choice);

                  Stream.Play(0, 
                              stream,
                              true,    // fade in
                              false ); // do not loop
               }

               debug Debug.PrintString(stream);
               debug Debug.PrintString(" tMusic:\n");
            }else {
               debug Debug.PrintString("tMusic: bad suite ");
               debug Debug.PrintString(Sim.Name(suite));
               debug Debug.PrintString("\n");
            }

            INIFile.Destroy(suite_file);
         }
   }
}

// Search the list of sims for one named with the key_name.
// or return none
hsim find_suite(string key_name)
{
   list suite_list = Global.List("gt_music_suite_list");
   int i, total;
   hsim suite;

   total = List.ItemCount(suite_list);
   for (i=0;i<total;++i) {
      suite = Sim.Cast(List.GetNth(suite_list, i));
      if (key_name == Sim.Name(suite)) {
         return suite;
      }
   }

   return none;
}

//

// [SuiteList]
// suite[0]="filename"
// suite[1]="filename"

Init()
{
   hinifile music_file = INIFile.Create("ini:/epic_music");
   int count;
   string suite_name;

   if (none == music_file) {
      debug {
         Debug.PrintString("ERROR: tMusic cannot create suite file epic_music.ini\n");
      }
   }

   count = 0;
   while (INIFile.NumberedExists(music_file,"SuiteList","suite",count)) {
      suite_name = INIFile.NumberedString(music_file,"SuiteList","suite",count,"none");
      LoadSuite(suite_name);
      ++count;
   }

   INIFile.Destroy(music_file);


   Global.CreateString("gt_musicchange_planet_sound",GA_Write|GA_NoSave,"");
   Global.CreateString("gt_musicchange_moon_sound",GA_Write|GA_NoSave,"");
   Global.CreateString("gt_musicchange_giant_sound",GA_Write|GA_NoSave,"");
   Global.CreateString("gt_musicchange_star_sound",GA_Write|GA_NoSave,"");

   Global.CreateString("gt_musicchange_ldsi_sound",GA_Write|GA_NoSave,"");
   Global.CreateString("gt_musicchange_pirate_type_sound",GA_Write|GA_NoSave,"");
   Global.CreateString("gt_musicchange_prod_type_sound",GA_Write|GA_NoSave,"");
   Global.CreateString("gt_musicchange_admin_type_sound",GA_Write|GA_NoSave,"");
   Global.CreateString("gt_musicchange_fortress_type_sound",GA_Write|GA_NoSave,"");
   Global.CreateString("gt_musicchange_habitat_type_sound",GA_Write|GA_NoSave,"");   


   Global.CreateHandle("gt_musicchange_body",GA_Write|GA_NoSave, none);
   Global.CreateHandle("gt_musicchange_body_sim",GA_Write|GA_NoSave, none);


   Global.CreateHandle("gt_musicchange_prior_station",GA_Write|GA_NoSave, none);

   Global.CreateHandle("gt_musicchange_ldsi_sim",GA_Write|GA_NoSave, none);
   Global.CreateHandle("gt_musicchange_ldsi_helper_sim",GA_Write|GA_NoSave, none);

   Global.CreateHandle("gt_musicchange_station_prod_sim",GA_Write|GA_NoSave, none);

}


list SuiteList()
{
   return Global.List("gt_music_suite_list");
}


// Sets the discovery timer. When the timer expires, the mood will reset to ambient.
Discovery()
{
   if (Global.Exists("discovery_time")) {
      Global.SetFloat("gt_music_change_discovery_time", iGame.GameTime() + 60);
   }else {
      Global.CreateFloat("gt_music_change_discovery_time", GA_Write|GA_NoSave, iGame.GameTime() + 60);
   }
}
// Tests if the discovery timer has expired, if the mood is still discovery
// it shifts it to ambient.
DiscoveryTime()
{
   float delay_time;

   if (Global.Exists("gt_music_change_discovery_time")) {
      delay_time = Global.Float("gt_music_change_discovery_time");
      if (iGame.GameTime() > delay_time) {
         if ("Discovery" == ReturnMood()) {
            SetMood("Ambient");
         }
         Global.Destroy("gt_music_change_discovery_time");
      }
   }
}

/* 
   When hostile forces are near the player, the music should change to action theme.
   and then stay until the hostiles are gone for awhile. This function call will
   set the hostile timer, and change the theme. When the timer is up, the theme
   will change back.
*/

Combat()
{
   if (Global.Exists("gt_music_change_combat_time")) {
      Global.SetFloat("gt_music_change_combat_time", iGame.GameTime() + 60);
   }else {
      Global.CreateFloat("gt_music_change_combat_time", GA_Write|GA_NoSave, iGame.GameTime() + 60);
   }
}

// Tests if the combat timer has expired, if the current mood is 
// action, it shifts it to ambient.

CombatTime()
{
   float delay_time;

   if (Global.Exists("gt_music_change_combat_time")) {
      delay_time = Global.Float("gt_music_change_combat_time");
      if (iGame.GameTime() > delay_time) {
         if ("Action" == ReturnMood()) {
            SetMood("Ambient");
         }
         Global.Destroy("gt_music_change_combat_time");
      }
   }
}


NewSystem()
{
   string system_name = iSim.ActiveWorld();
   string suite_name;
   hinifile music_file = INIFile.Create("ini:/epic_music");

   if (!Global.Bool("gt_option_music_on")) {
      // Options have turned off the music
      return;
   }

   if (none == music_file) {

      debug Debug.PrintString("ERROR tMusicChange epic_music.ini missing");

      return;
   }

   // Trim off the end name to remove invalid characters from template
   system_name = uString.EndName(system_name);
      

   suite_name = INIFile.String(music_file, system_name, "suite_name", "none");

   INIFile.Destroy(music_file);

   debug {
      Debug.PrintString("Music System Change: ");
      Debug.PrintString(system_name);
      Debug.PrintString("\n");
      Debug.PrintString(suite_name);
      Debug.PrintString(" suit\n");
   }

   SetSuite(suite_name);

   SetMood("Discovery");

   Resume();

   Discovery();

}





near_habitat()
{
   hship player = iShip.FindPlayerShip();
   hhabitat habitat, prior_habitat;

   hsim sound, helper, ldsi_sound, production_sound;

   string station_empire_file, station_prod_file;


   habitat = iHabitat.Nearest(iMapEntity.SystemHabitats(), player);
   prior_habitat = iHabitat.Cast(Global.Handle("gt_musicchange_prior_station"));

   if (habitat != prior_habitat) {
      Global.SetHandle("gt_musicchange_prior_station", habitat);

      debug {
         Debug.PrintString("tMusic new station ");
         Debug.PrintHandle(habitat);
         Debug.PrintString("\n");
      }

      // Delete all the old sound objects to keep the world uncluttered.
      sound = Sim.Cast(Global.Handle("gt_musicchange_ldsi_sim"));
      Sim.Destroy(sound);
      sound = Sim.Cast(Global.Handle("gt_musicchange_ldsi_helper_sim"));
      Sim.Destroy(sound);
      sound = Sim.Cast(Global.Handle("gt_musicchange_station_prod_sim"));
      Sim.Destroy(sound);

      
      if (ESS_Normal != tStation.Status(habitat)) {
         return;
      }

      // We don't create sound objects for stations that are not operating.

      // Create and place the production type dependent sound.
      station_prod_file = station_sound(habitat);
      production_sound = Sim.Create(station_prod_file, String.Join("SType :",station_prod_file));

      debug {
         if (none == production_sound) {
            Debug.PrintString("Error: missing station type sound ");
            Debug.PrintString(station_prod_file);
            Debug.PrintString("\n");
         }
      }

      Sim.SetCullable(production_sound, false);
      Sim.PlaceRelativeToInside(production_sound, habitat, 0, 0, 0);


      // Create the LDSI sound. We need a helper sound to put this item at the 10km barrier.
      helper = Sim.Create("ini:/sims/nav/waypoint","sound helper sim");
      Sim.SetCullable(ldsi_sound, false);
      Sim.PlaceRelativeToInside(helper, habitat, 0, 0, 0);
      Sim.PointAt(helper, player);

      station_empire_file = Global.String("gt_musicchange_ldsi_sound");
      ldsi_sound = Sim.Create(station_empire_file, String.Join("LDSI :", station_empire_file));

      Sim.SetCullable(ldsi_sound, false);
      Sim.PlaceRelativeToInside(ldsi_sound, helper, 0, 0, 10km);

      Global.SetHandle("gt_musicchange_ldsi_sim", ldsi_sound);
      Global.SetHandle("gt_musicchange_ldsi_helper_sim", helper);
      Global.SetHandle("gt_musicchange_station_prod_sim", production_sound);
   }else {
      // Move the LDSI field sim to point at the player.
      ldsi_sound = Sim.Cast(Global.Handle("gt_musicchange_ldsi_sim"));
      helper = Sim.Cast(Global.Handle("gt_musicchange_ldsi_helper_sim"));

      if (none != ldsi_sound) {
         Sim.PointAt(helper, player);
         Sim.PlaceRelativeToInside(ldsi_sound, helper, 0, 0, 10km);
      }
   }
}

// The sound code picks the closest body object and uses that for
// the sound source. The object must also be inside the maximum
// distance, or the sound will not track.
near_body()
{
   hship player = iShip.FindPlayerShip();
   hmapentity center;
   hbody body, prior_body;
   hsim sound, body_sim;
   string sound_ini;
   IeBodyType body_type;
   float volume, distance, radius;
   set bodies;

   float max_distance, min_distance, difference, fraction, sound_distance;
   float location, sound_pos;
   int i, total;

   bodies = iMapEntity.SystemBodies();
   body = iBody.Nearest(bodies, player);
   prior_body = iBody.Cast(Global.Handle("gt_musicchange_body"));

   if (body != prior_body) {
      sound = Sim.Cast(Global.Handle("gt_musicchange_body_sim"));
      Sim.Destroy(sound);

      body_sim = iMapEntity.SimForEntity(body);

      body_type = iBody.Type(body);

      switch (body_type) {
      case 	BT_Planet:
         sound_ini = Global.String("gt_musicchange_planet_sound");
         break;
      case BT_Moon:
         sound_ini = Global.String("gt_musicchange_moon_sound");
         break;
      case BT_GasGiant:
         sound_ini = Global.String("gt_musicchange_giant_sound");
         break;
      case BT_SystemCentre:
      case BT_Star:
         sound_ini = Global.String("gt_musicchange_star_sound");
         break;
      default:
         sound_ini = Global.String("gt_musicchange_planet_sound");
         break;
      }

      sound = Sim.Create(sound_ini, sound_ini);

      debug {
         if (none == sound) {
            Debug.PrintString("Error: missing planet sound ");
            Debug.PrintString(sound_ini);
            Debug.PrintString("\n");
         }
      }

      Sim.SetCullable(sound, false);
      // Just in case the sun can burn it up...
      iSim.SetIndestructable( iSim.Cast(sound), true );

      Sim.PlaceAt(sound, body_sim);

      Global.SetHandle("gt_musicchange_body", body);
      Global.SetHandle("gt_musicchange_body_sim", sound);

      debug {
         Debug.PrintHandle(body);
         Debug.PrintString(String.FormatInt(" new %d\n", body_type));
      }

   }else if (!(iShip.IsInLDS(player) || iSim.IsCapsuleJumping(player))) {

      sound = Sim.Cast(Global.Handle("gt_musicchange_body_sim"));

      body = iBody.Cast(Global.Handle("gt_musicchange_body"));
      body_type = iBody.Type(body);

      if (BT_SystemCentre == body_type) {
         radius = 350000km;
      }else {
         radius = Object.FloatProperty(body,"radius");
      }

      min_distance = radius * 1.5;
      max_distance = radius * 4.0;
      difference = max_distance - min_distance;

      distance = Sim.DistanceBetweenCentres(player, body);
      
      if (distance < min_distance) {
         fraction = 0.0;
      }else if (distance > max_distance) {
         fraction = 1.0;
      }else {
         fraction = distance - min_distance;
         fraction = fraction / difference;

         fraction = fraction;
      }


      // To keep that deep space feeling, we don't track the player when they
      // are more than 4 orbital radii away from the center.

      if (distance < max_distance) {
         sound_distance = 200km * fraction;
         // The sound is never placed closer the player than 20km to keep
         // the player from flying past it while using thrusters.
         // (can still happen if player travelling faster than 20km per second).
         if (sound_distance < 20km) {
            sound_distance = 20km;
         }

         location = sound_distance / distance;

         Sim.PlaceBetween( sound, player, body, location);

         sound_pos = Sim.DistanceBetween(player, sound);
      }




/*
      debug {
         Debug.PrintHandle(body);
         Debug.PrintString(" planet\n");

         Debug.PrintFloat(distance);
         Debug.PrintString(" planet dist\n");

         Debug.PrintFloat(fraction);
         Debug.PrintString(" planet ratio\n");

         Debug.PrintFloat(sound_distance);
         Debug.PrintString(" sound exp\n");

         Debug.PrintFloat(sound_pos);
         Debug.PrintString(" sound real\n");

         Debug.PrintFloat(Object.FloatProperty(body,"radius"));
         Debug.PrintString(" radius\n");
      }
      */
   }



}



SoundNear()
{
   if (Global.Bool("gt_option_music_on")) {
      near_body();
      near_habitat();
   }
}


string station_sound(hhabitat producer)
{
   int production_type;

   production_type = tLProduction.GetType(iSim.Cast(producer));

   switch (production_type) {
   case ept_WaterMine : 
   case ept_OrganicsMine : 
   case ept_InorganicsMine : 
   case ept_BiomassMine : 
   case ept_CommonMetalsMine : 
   case ept_RareMetalsMine : 
   case ept_ExoticMetalsMine : 
   case ept_RadioactivesMine : 
   case ept_FusionableGasesMine : 
   case ept_NeutroniumMine : 
   case ept_WaterProcessingPlant : 
   case ept_OrganicsProcessingPlant : 
   case ept_InorganicsProcessingPlant : 
   case ept_BiomassProcessingPlant : 
   case ept_CommonMetalsProcessingPlant :
   case ept_RareMetalsProcessingPlant : 
   case ept_ExoticMetalsProcessingPlant : 
   case ept_RadioactivesProcessingPlant : 
   case ept_FusionableGasesProcessingPlant :
   case ept_NeutroniumProcessingPlant : 
   case ept_Shipyard : 
   case ept_HeavyManufacturingPlant : 
   case ept_BiologicalManufacturingPlant : 
   case ept_WetwareManufacturingPlant : 
   case ept_HiTechManufacturingPlant : 
   case ept_ElectronicsManufacturingPlant : 
   case ept_WeaponsManufacturingPlant : 
   case ept_PharmaceuticalsManufacturingPlant : 
   case ept_PlasticsManufacturingPlant : 
   case ept_FusionReactorsManufacturingPlant : 
   case ept_EnergyCellsManufacturingPlant : 
   case ept_StationFabricationManufacturingPlant : 
   case ept_LuxuriesManufacturingPlant : 
   case ept_TerraformingStation : 
   case ept_BioBomber : 
   case ept_Waystation : 
   case ept_RepairStation : 
   case ept_Warehousing:
      return Global.String("gt_musicchange_prod_type_sound");
      break;

   case ept_CentralHQ:
   case ept_ResearchStation :
   case ept_Outpost :
   case ept_SystemAdministration :   
   case ept_ClusterAdministration :
   case ept_RegionalDepartment :


      return Global.String("gt_musicchange_admin_type_sound");
      break;

   case ept_SecurityStation :
   case ept_PoliceBase :
   case ept_SystemDefenceDock :
   case ept_MercenaryBase:
      return Global.String("gt_musicchange_fortress_type_sound");
      break;

   case ept_PirateBase:
   case ept_PirateCove:
   case ept_PirateOutpost: 
   case ept_GangsterHideout: 
      return Global.String("gt_musicchange_pirate_type_sound");
      break;

   case ept_EntertainmentStation :
   case ept_MedicalFacility:
   case ept_University:
   case ept_ReligiousCentre:
   case ept_AgriculturalSettlement:
   case ept_Settlement:
   case ept_Habitat:
   default:
     break;
   }

   return Global.String("gt_musicchange_habitat_type_sound");
}





/*  
THIS MOD IS NOT MADE, DISTRIBUTED, OR SUPPORTED BY INFOGRAMES
OR PARTICLE SYSTEMS LTD. 

ELEMENTS TM & (C) INFOGRAMES AND PARTICLE SYSTEMS LTD.
*/
