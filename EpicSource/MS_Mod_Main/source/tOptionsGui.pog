//*******************************************************************************************/
//
// tOptionsGui.pog
//
// 
// A Gui Package for setting and clearing game option flags. Lets the user customize the game
// by turning features on and off.
// 
//
// April 2006, Jon Freise
//******************************************************************************************/

package tOptionsGui;

//[of]:Imports
uses	Sim,
		iShip,
		iSim,
		Debug,
		Global,
		GUI,
		iGame,
		iGUI,
		iHUD,
		iHabitat,
		iMapEntity,
		INIFile,
		Input,
		List,
		Object,
		String,
		Task,
		Text,
		UniGUI,
		tEpicGuiEnum,
		tEpicGui;
//[cf]


//[of]:Exports
provides StartScreen,
         ExitScreen,
         DisplayWindow,
         OnOptionPress,
         NewGame;
//[cf]

         

prototype task list_box_monitor( hwindow system_list_box );


//[of]:NewGame()
NewGame()
{
   hinifile debug_file = INIFile.Create("ini:/ms_mod_main");
   int count, start_value;
   string flag_name;

   if (none == debug_file) {
      debug Debug.PrintString("tOptionsGui error missing ms_mod_main file\n");
   }

   count = 0;
   while (INIFile.NumberedExists(debug_file,"GameOptions","flag_name", count)) {
      flag_name = INIFile.NumberedString(debug_file,"GameOptions","flag_name", count, "");
      start_value = INIFile.NumberedInt(debug_file,"GameOptions","start_value", count, 0);
      ++count;

      Global.CreateBool(flag_name, GA_Write, start_value);
   }
}
//[cf]


//[of]:SetStandardGuiColors(hwindow window)
SetStandardGuiColors(hwindow window)
{


   GUI.SetWindowStateColours( window,
                              Global.Float( "GUI_neutral_red"),
                              Global.Float( "GUI_neutral_green"),
                              Global.Float( "GUI_neutral_blue"),
                              Global.Float( "GUI_focused_red"),
                              Global.Float( "GUI_focused_green"),
                              Global.Float( "GUI_focused_blue"),
                              Global.Float( "GUI_selected_red"),
                              Global.Float( "GUI_selected_green"),
                              Global.Float( "GUI_selected_blue"));

}
//[cf]


//[of]:string button_text(string name, bool value)
string button_text(string name, bool value)
{
   if (value) {
      return String.Join(name," On");
   }

   return String.Join(name, " Off");
}
//[cf]


//[of]:hwindow CreateOptionList(hwindow parent, int x, int y, int width, int height, string function)
hwindow CreateOptionList(hwindow parent, int x, int y, int width, int height, string function)
{
   hwindow list_box;
   hwindow base_win;
   hwindow button;
   int count, i;
   hsim debug_flag;
   string option_name, flag_name, html_file;
   hinifile debug_file = INIFile.Create("ini:/ms_mod_main");
   int cwidth = width - 4;
   list button_list;

   if (none == debug_file) {
      debug Debug.PrintString("tOptionsGui error missing ms_mod_main file\n");
   }
                                   
   
   cwidth = cwidth - Global.Int("GUI_scrollbar_width");



   base_win = GUI.CreateWindow(x, y, width, height, parent);

   // Create the parent listbox
   list_box = GUI.CreateListBox( 0, 0,
                                 cwidth, height,
                                 base_win,
                                 true,
                                 true);
   count = 0;
   while (INIFile.NumberedExists(debug_file,"GameOptions","flag_name", count)) {

      option_name = INIFile.NumberedString(debug_file,"GameOptions","option_name", count, "");
      flag_name = INIFile.NumberedString(debug_file,"GameOptions","flag_name", count, "");
      html_file = INIFile.NumberedString(debug_file,"GameOptions","html_file", count, "");

      ++count;

      button = iGUI.CreateAndInitialiseInverseButton( none, 0, 0, 
                                                      cwidth, 
                                                      option_name,
                                                      function);

      Object.AddStringProperty(button,"gt_option_flag",flag_name);

      Object.AddStringProperty(button,"gt_og_html", html_file);


      if (Global.Bool(flag_name)){
         GUI.SetWindowStateIcons( button,
                                  I_CircleOn,
                                  I_CircleOn,
                                  I_CircleOn);
      }else {
         GUI.SetWindowStateIcons( button,
                                  I_None,
                                  I_None,
                                  I_None);
      }

      GUI.AddListBoxEntry(list_box, button);

      List.AddTail(button_list, button);
   }

   INIFile.Destroy(debug_file);


   Global.CreateList( "gt_og_option_list", GA_Write | GA_NoSave, button_list );

   // Add a scroll bar to the listbox.

   GUI.CreateVerticalScrollbar( cwidth+4,
                                0,
                                Global.Int("GUI_scrollbar_width"),
                                height,
                                base_win,
                                list_box,
                                Global.Float( "GUI_scrollbar_buttonratio"), 
                                "");

   return list_box;
}
//[cf]


//[of]:OnOptionPress()
OnOptionPress()
{
	// Get the currently focused window - it must be the correct system button.
	hwindow button =	GUI.FocusedWindow();
   string flag_name = Object.StringProperty(button,"gt_option_flag");
   bool value;

   value = Global.Bool(flag_name);

   if (value) {
      Global.CreateBool(flag_name, GA_Write, false);

     GUI.SetWindowStateIcons( button,
                                  I_None,
                                  I_None,
                                  I_None);
   }else {
      Global.CreateBool(flag_name, GA_Write, true);

     GUI.SetWindowStateIcons( button,
                                  I_CircleOn,
                                  I_CircleOn,
                                  I_CircleOn);
   }

   debug Debug.PrintString("Option Press\n");
}
//[cf]


//[of]:DisplayWindow()
DisplayWindow()
{
   hwindow shady_bar;
   hwindow shady_bar_right;
   hwindow title;
   hwindow subtitle;
   hwindow exit;
   hwindow debug_list_box;
   hwindow help_win;

   int width, height;

   list debug_list, empty_list;

   debug Debug.PrintString("Debug Gui Display\n");

   // Set right hand shady bar width.
   shady_bar = iGUI.CreateWideShadyBar();

   shady_bar_right = iGUI.CreateShadyBarRight();


   Global.CreateHandle("gt_debug_gui_shady",GA_Write,shady_bar);


   GUI.SetWindowClientArea( shady_bar, 
                            0,
                            0,
                            500,
                            GUI.WindowCanvasHeight( shady_bar));
   


   height = GUI.WindowCanvasHeight( shady_bar);
   height = height - Global.Int("EpicGui_content_drop");
   height = height - Global.Int("EpicGui_content_footer");


   width = 500; //GUI.WindowCanvasWidth( shady_bar);
   //width = width/2;
   width = width - Global.Int("EpicGui_content_indent");
   width = width - Global.Int("EpicGui_content_indent");
      

   tEpicGui.CreateTitle(shady_bar, "GAME OPTIONS");
   tEpicGui.CreateSubtitle(shady_bar, "Set Torn Stars Options");

   // Create the exit button
   tEpicGui.CreateExitButton(shady_bar, "EXIT", "tOptionsGui.ExitScreen");



   
   debug_list_box = CreateOptionList(shady_bar, 
                                     Global.Int("EpicGui_content_indent"),
                                     Global.Int("EpicGui_content_drop") ,
                                     width,
                                     height,
                                     "tOptionsGui.OnOptionPress");





   // Create help window

   // Create help window
   help_win = iGUI.CreateAndInitialiseTextWindow(250+Global.Int("EpicGui_content_indent"),
                                      Global.Int("EpicGui_content_drop") ,
                                      275,
                                      height,
                                      shady_bar_right,
                                      "html:/html/gt_options_desc");

   GUI.CreateVerticalScrollbar( 525+Global.Int("EpicGui_content_indent"),
                                Global.Int("EpicGui_content_drop") ,
                                Global.Int("GUI_scrollbar_width"),
                                height,
                                shady_bar_right,
                                help_win,
                                Global.Float( "GUI_scrollbar_buttonratio"), 
                                "");

   Global.CreateHandle("gt_og_text_win", GA_Write|GA_NoSave, help_win);

   Global.CreateHandle("gt_og_list_box", GA_Write|GA_NoSave, debug_list_box);

   // Last item to make sure all globals are in place.
   Task.Detach(start list_box_monitor(debug_list_box));

}
//[cf]


// From location finder by Steve Robertson.
//[of]:task list_box_monitor( hwindow system_list_box )
task list_box_monitor( hwindow system_list_box )
{
	// Track the currently selected list box entry
	hwindow currently_selected = none;
	hwindow selected;
	
	hwindow location_list_box;	// List box for the locations

   hwindow text_window;
   hwindow option_button;

	// Track the currently focused list box entry
	int focused_index;													// Location window focused index
	int previous_focus = -1;											// Previous location window focused
	int selected_index = GUI.ListBoxSelectedIndex( system_list_box );	// Currently selected location list box index
	int previous_selected = selected_index; 							// Previous location list box selected index

	hwindow selected_window = GUI.ListBoxValue( system_list_box );		// Currently selected system window.
	hwindow previous_window = selected_window;							// Previously selected window

   string text_resource;

   bool update_needed = true;	         // Set this true if mouse was over a button.

   Global.CreateHandle("gt_og_list_task", GA_Write|GA_NoSave, Task.Current());


	// Forever...
	while( 1 )
	{
		
		// Get the location list box handle.
		location_list_box = GUI.Cast( Global.Handle( "gt_og_list_box" ) );
		
		// Continually check the list boxes for selections.
		focused_index = GUI.ListBoxFocusedEntry( location_list_box );
		
		// If a window in the location list box is being focused... ( -1 is no focus )
		if ( focused_index != -1 )
		{
			
			// ... and it has changed from the previous focus can display the info for the
			//	   currently focused location.

			if ( focused_index != previous_focus )
			{



            text_window =  GUI.Cast( Global.Handle( "gt_og_text_win" ) );

            option_button = GUI.Cast( List.GetNth( Global.List( "gt_og_option_list" ), focused_index ) );

            text_resource = Object.StringProperty(option_button, "gt_og_html");

            GUI.SetTextWindowResource(text_window, text_resource);

            update_needed = true;
			} // End if focused = previous
		}
		else
		{
			// Reset the previous focus.
			previous_focus = -1;

         if (update_needed ){
            update_needed = false;
            text_window =  GUI.Cast( Global.Handle( "gt_og_text_win" ) );
            // Nothing is focused, so put the 
            GUI.SetTextWindowResource(text_window, "html:/html/gt_options_desc");
         }

		} // End else focused index = -1

		// Sleep for a short time.
		Task.Sleep( Task.Current(), 0.1 );

	} // End while

} // list_box_monitor
//[cf]


//[of]:StartScreen()
StartScreen()
{
   GUI.PopScreensTo("icSpaceFlightScreen");
   GUI.OverlayScreen("icPDAOverlayManager");
   iGUI.OverlayCustomScreen( "tOptionsGui.DisplayWindow" );
}
//[cf]


//[of]:ExitScreen()
ExitScreen()
{
	Task.Halt( Task.Cast( Global.Handle( "gt_og_list_task" ) ) );

	UniGUI.UniGUIRemoveScreen();
}
//[cf]


/*  
THIS MOD IS NOT MADE, DISTRIBUTED, OR SUPPORTED BY INFOGRAMES
OR PARTICLE SYSTEMS LTD. 

ELEMENTS TM & (C) INFOGRAMES AND PARTICLE SYSTEMS LTD.
*/
