//*****************************************************************************/
//
// tEShipCreation.pog
//
// This module looks up faction and fleet specific ships. 
// 
// Core code taken from jcEShipCreation.pog by james.
//
// June 2004, James Walker
//
// Last Edit: 
//****************************************************************************/

package	tEShipCreation;


uses
	Debug,
	String,
	INIFile,
	List,
	Set,
	Global,
	iShip,
	iFaction,
	Math,
	Group,
   iUtilities,
   tEFaction;


	
provides GetShip,
         ShipClassTemplate,
         ShipType2String,
         String2ShipType,
         TestINIFile;


enum eShipType
{
   EST_Invalid,
	EST_Gunstar,

	EST_Drone,
	EST_Waldo,
	EST_CommandSection,
	EST_Utility,
	EST_Passenger,
	EST_Fighter,
	EST_Tug,
	EST_Patcom,
	EST_Interceptor,
	EST_Corvette,
	EST_Freighter,
	EST_Destroyer,
	EST_Cruiser,
	EST_Carrier,  

	EST_FreightLight, 
   EST_FreightHeavy, 
   EST_FreightAll, 
   EST_FreightSuperHeavy, 
	EST_FreightCourier, 

   EST_CombatFighter, 
   EST_CombatLight, 
   EST_CombatHeavy,
	EST_CombatCaptial, 
   EST_CombatAll, 

   EST_Medical, 
   EST_Interface, 
   EST_PassengerLight, 
	EST_PassengerHeavy, 
   EST_PassengerAll, 

   EST_MiningLight, 
   EST_MiningHeavy, 
   EST_MiningAll,

	EST_TankerLight, 
   EST_TankerHeavy, 
   EST_TankerAll, 

   EST_GeneralPurpose, 
   EST_Flitter, 
   EST_Recovery,
	EST_DemoShips, 
   EST_Taxi,
   EST_Max
};


//
// Prototypes
//
prototype string ShipClassTemplate(string faction, string fleet_style, string ship_class);
prototype string iShipCreation.GetShip( hfaction faction, eShipType ship_type );
prototype string ShipType2String(eShipType ship_type);


string GetShip( hfaction faction, eShipType ship_type )
{
   string faction_name, fleet_style, ship_class;

   ship_class = ShipType2String(ship_type);

   faction_name = tEFaction.EName(faction);

   fleet_style = tEFaction.FleetStyle(faction);

   return ShipClassTemplate(faction_name, fleet_style, ship_class);
}


//
// Fn: ShipClassTemplate
// Desc: Returns a fully qulaified sim template string for use in iShip.Create.
//       This function pulls this data from the faction_ships.ini mapping file.
//
string ShipClassTemplate(string faction, string fleet_style, string ship_class)
{
	string		filename = "ini:/faction_ships";
	hinifile	hini;
	string		result;
   string subsection;
	int			index, total_entries;
   bool entry_numbered;

   /*
	debug {
		Debug.PrintString("jcEShipCreation.ShipClassTemplate: START\n");
		Debug.PrintString(String.FormatStrStr("jcEShipCreation.ShipClassTemplate: faction = %s%s\n",faction, ""));
		Debug.PrintString(String.FormatStrStr("jcEShipCreation.ShipClassTemplate: ship_class = %s%s\n", ship_class, ""));
	}
   */
	
	hini = 	INIFile.Create( filename );
	if( hini == none )
	{
		// we have an error as the ini file can't be found
		debug Debug.PrintString("jcEShipCreation.ShipClassTemplate: END-Error\n");
		return "#error#";
	}
	
   // Search for a valid entry, from most specific to least specific.
   if (INIFile.NumberedExists( hini, faction, ship_class, 0 )) {
      subsection = faction;
      entry_numbered = true;
   } else if (INIFile.NumberedExists( hini, fleet_style, ship_class, 0 )) {
      subsection = fleet_style;
      entry_numbered = true;
   } else if (INIFile.NumberedExists( hini, "default", ship_class, 0 )) {
      subsection = "default";
      entry_numbered = true;
   } else {
      subsection = "#error";
      entry_numbered = false;
   }
	
	if(!entry_numbered)
	{
		// therefore no entry exists
		INIFile.Destroy( hini );
		debug Debug.PrintString("jcEShipCreation.ShipClassTemplate: END-Error\n");
		return "#error#";
	}
	
   total_entries = iUtilities.FindNumberOfINIEntries( hini, subsection, ship_class );

   index = Math.RandomInt(0, (total_entries-1));

   result = INIFile.NumberedString( hini, subsection, ship_class, index, "#error" );

	INIFile.Destroy( hini );
//	debug Debug.PrintString("jcEShipCreation.ShipClassTemplate: END\n");
	return result;
}


string ShipType2String(eShipType ship_type)
{
   switch (ship_type) {
	case EST_Gunstar: return "EST_Gunstar";break;

	case EST_Drone: return "EST_Drone";break;
	case EST_Waldo: return "EST_Waldo";break;
	case EST_CommandSection: return "EST_CommandSection";break;
	case EST_Utility: return "EST_Utility";break;
	case EST_Passenger: return "EST_Passenger";break;
	case EST_Fighter: return "EST_Fighter";break;
	case EST_Tug: return "EST_Tug";break;
	case EST_Patcom: return "EST_Patcom";break;
	case EST_Interceptor: return "EST_Interceptor";break;
	case EST_Corvette: return "EST_Corvette";break;
	case EST_Freighter: return "EST_Freighter";break;
	case EST_Destroyer: return "EST_Destroyer";break;
	case EST_Cruiser: return "EST_Cruiser";break;
	case EST_Carrier: return "EST_Carrier";break;  

	case EST_FreightLight: return "EST_FreightLight";break; 
   case EST_FreightHeavy: return "EST_FreightHeavy";break; 
   case EST_FreightAll: return "EST_FreightAll";break; 
   case EST_FreightSuperHeavy: return "EST_FreightSuperHeavy";break; 
	case EST_FreightCourier: return "EST_FreightCourier";break; 

   case EST_CombatFighter: return "EST_CombatFighter";break; 
   case EST_CombatLight: return "EST_CombatLight";break; 
   case EST_CombatHeavy: return "EST_CombatHeavy";break;
	case EST_CombatCaptial: return "EST_CombatCapital";break; 
   case EST_CombatAll: return "EST_CombatAll";break; 

   case EST_Medical: return "EST_Medical";break; 
   case EST_Interface: return "EST_Interface";break; 
   case EST_PassengerLight: return "EST_PassengerLight";break; 
	case EST_PassengerHeavy: return "EST_PassengerHeavy";break; 
   case EST_PassengerAll: return "EST_PassengerAll";break; 

   case EST_MiningLight: return "EST_MiningLight";break; 
   case EST_MiningHeavy: return "EST_MiningHeavy";break; 
   case EST_MiningAll: return "EST_MiningAll";break;

	case EST_TankerLight: return "EST_TankerLight";break; 
   case EST_TankerHeavy: return "EST_TankerHeavy";break; 
   case EST_TankerAll: return "EST_TankerAll";break; 

   case EST_GeneralPurpose: return "EST_GeneralPurpose";break; 
   case EST_Flitter: return "EST_Flitter";break; 
   case EST_Recovery: return "EST_Recovery";break;
	case EST_DemoShips: return "EST_DemoShips";break; 
   case EST_Taxi: return "EST_Taxi";break;
   default:
      debug {
         Debug.PrintString("tEShipCreation.ShipType2String Error invalid type\n");
         Debug.PrintString(String.FormatInt("%d invalid type\n",ship_type));
      }
      break;
   }

   return "#error#";
}


eShipType String2ShipType(string type_name)
{
	if ("EST_Gunstar"==type_name) { return EST_Gunstar; }
	else if ("EST_Drone"==type_name) { return EST_Drone; }
	else if ("EST_Waldo"==type_name) { return EST_Waldo; }
	else if ("EST_CommandSection"==type_name) { return EST_CommandSection; }
	else if ("EST_Utility"==type_name) { return EST_Utility; }
	else if ("EST_Passenger"==type_name) { return EST_Passenger; }
	else if ("EST_Fighter"==type_name) { return EST_Fighter; }
	else if ("EST_Tug"==type_name) { return EST_Tug; }
	else if ("EST_Patcom"==type_name) { return EST_Patcom; }
	else if ("EST_Interceptor"==type_name) { return EST_Interceptor; }
	else if ("EST_Corvette"==type_name) { return EST_Corvette; }
	else if ("EST_Freighter"==type_name) { return EST_Freighter; }
	else if ("EST_Destroyer"==type_name) { return EST_Destroyer; }
	else if ("EST_Cruiser"==type_name) { return EST_Cruiser; }
	else if ("EST_Carrier"==type_name) { return EST_Carrier; }  

	else if ("EST_FreightLight"==type_name) { return EST_FreightLight; } 
   else if ("EST_FreightHeavy"==type_name) { return EST_FreightHeavy; } 
   else if ("EST_FreightAll"==type_name) { return EST_FreightAll; } 
   else if ("EST_FreightSuperHeavy"==type_name) { return EST_FreightSuperHeavy; } 
	else if ("EST_FreightCourier"==type_name) { return EST_FreightCourier; } 

   else if ("EST_CombatFighter"==type_name) { return EST_CombatFighter; } 
   else if ("EST_CombatLight"==type_name) { return EST_CombatLight; } 
   else if ("EST_CombatHeavy"==type_name) { return EST_CombatHeavy; }
	else if ("EST_CombatCapital"==type_name) { return EST_CombatCaptial; } 
   else if ("EST_CombatAll"==type_name) { return EST_CombatAll; } 

   else if ("EST_Medical"==type_name) { return EST_Medical; } 
   else if ("EST_Interface"==type_name) { return EST_Interface; } 
   else if ("EST_PassengerLight"==type_name) { return EST_PassengerLight; } 
	else if ("EST_PassengerHeavy"==type_name) { return EST_PassengerHeavy; } 
   else if ("EST_PassengerAll"==type_name) { return EST_PassengerAll; } 

   else if ("EST_MiningLight"==type_name) { return EST_MiningLight; } 
   else if ("EST_MiningHeavy"==type_name) { return EST_MiningHeavy; } 
   else if ("EST_MiningAll"==type_name) { return EST_MiningAll; }

	else if ("EST_TankerLight"==type_name) { return EST_TankerLight; } 
   else if ("EST_TankerHeavy"==type_name) { return EST_TankerHeavy; } 
   else if ("EST_TankerAll"==type_name) { return EST_TankerAll; } 

   else if ("EST_GeneralPurpose"==type_name) { return EST_GeneralPurpose; } 
   else if ("EST_Flitter"==type_name) { return EST_Flitter; } 
   else if ("EST_Recovery"==type_name) { return EST_Recovery; }
	else if ("EST_DemoShips"==type_name) { return EST_DemoShips; } 
   else if ("EST_Taxi"==type_name) { return EST_Taxi; }

   debug {
       Debug.PrintString("tEShipCreation.String2ShipType Error invalid type :");
       Debug.PrintString(type_name);
       Debug.PrintString("\n");
    }

   return EST_Invalid;
}



test_subsection(hinifile hini, string subsection, bool must_have)
{
   int entries, j, i;
   string ship_class;
   string result;
   hship ship;
   // Loop through all ship choices and 
   // create at least one from each.
   for (i=EST_Gunstar;i<EST_Max;++i) {
      ship_class = ShipType2String(i);

      if (INIFile.NumberedExists( hini, subsection, ship_class, 0 )) {
         entries = iUtilities.FindNumberOfINIEntries( hini, subsection, ship_class );

         // Loop through all the entries for each type of ship.
         for (j=0;j<entries;++j) {

            result = INIFile.NumberedString( hini, subsection, ship_class, j, "#error#" );

            ship = iShip.Create(result,"testship");

            if (none == ship) {
               // This is not a valid entry. Print it.
               debug {
                  Debug.PrintString("tEShipCreation.TestINIFile Error\n");
                  Debug.PrintString(subsection);
                  Debug.PrintString(" Subsection\n");
                  Debug.PrintString(ship_class);
                  Debug.PrintString(" ship class\n");
               }
            }else {
               // Clean up.
               Sim.Destroy(ship);
            }

         }// for each entry
      }else {
         if (must_have) {
            debug {
               Debug.PrintString("tEShipCreation.TestINIFile Error missing entry\n");
               Debug.PrintString(subsection);
               Debug.PrintString(" Subsection\n");
               Debug.PrintString(ship_class);
               Debug.PrintString(" ship class\n");

            }
         }
      }
   }// for each ship class  
}

TestINIFile()
{
   set factions;
   hfaction faction;
   int total, i, j, entries;
   string template_name;
   string subsection;
   string ship_class;
   hship ship;
   hinifile hini = INIFile.Create("ini:/faction_ships");

   debug Debug.PrintString("tEShipCreation.TestINIFile starts\n");

   if (none == hini) {
      debug Debug.PrintString("tEShipCreation.TestINIFile error no file\n");
      return;
   }

   factions = Set.FromList(iFaction.All());
   while (!Set.IsEmpty(factions)) {
      faction = iFaction.Cast(Set.FirstElement(factions));
      Set.Remove(factions, faction);

      test_subsection(hini, tEFaction.EName(faction), false);
   }


   // Test the default
   test_subsection(hini, "default", true);

   // Test each fleet style
   test_subsection(hini, "leung", false);

   test_subsection(hini, "sultan", false);

   test_subsection(hini, "barrens", false);

   test_subsection(hini, "cmc", false);

   test_subsection(hini, "machine", false);

   test_subsection(hini, "brethren", false);


   INIFile.Destroy(hini);

   debug Debug.PrintString("tEShipCreation.TestINIFile ends\n");
}
