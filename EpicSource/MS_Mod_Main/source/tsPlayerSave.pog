//*******************************************************************************************/
//
// tsPlayerSave.pog
//
// This file implements player specific save information. Such as wingmen and player pods.
// 
// 
// 
//
// November 2006, Jon Freise
//******************************************************************************************/
 
package tsPlayerSave;

uses    Sim,
iShip,
iSim,
iPilotSetup,
Debug,
Global,
GUI,
iDirector,
iGUI,
iHUD,
iHabitat,
iMapEntity,
INIFile,
Input,
List,
Object,
String,
Task,
Text,
iUtilities,
iCargo,
iInventory,
iComms,
iConversation,
iAi,
Math,
CargoTypes,
   iGame,
   tsFaction,
   tsShipEnum,
   tsShip,
   tsShipSave,
   tsPlayerFleet,
   tsWingComm,
   tsWingman;



provides Save,
         Restore,
         RestoreOrders,
         NewGame;


prototype hship create_new_player();

prototype set locate_free_pods();



NewGame()
{
   hinifile player_config = INIFile.Create("ini:/player_start");
   string system;
   system = INIFile.String(player_config, "Player","start_system","map:/geog/middle/emerald_sys");
   INIFile.Destroy(player_config);

   iGame.SetGameType(IGT_SinglePlayer);
   iGame.SetStartSystem(system);      
   Global.CreateInt("g_current_act", GA_Write,1);
   Global.CreateBool("gt_fleet_non_base_save",GA_Write, true);
}


Save()
{
   hship player = iShip.FindPlayerShip();
   hship wingman;
   int id, i, total;
   list player_fleet, clean_fleet;
   list player_pods;
   
   
   // Remember that we are starting in this system.
   iGame.SetStartSystem(iSim.ActiveWorld());

   id = tsShipSave.Save(player);
   Global.CreateInt("ts_player_save",GA_Write, id);

   player_fleet = tsPlayerFleet.PlayerFleet();
   List.Remove(player_fleet, player);

   total = List.ItemCount(player_fleet);
   for (i=0;i<total;++i) {
      wingman = iShip.Cast(List.GetNth(player_fleet,i));
      
      if (!Sim.IsDead(wingman)) {
         List.AddTail(clean_fleet, wingman);
      }
   }

   tsShipSave.SaveList(clean_fleet, "ts_pfleet");

   total = List.ItemCount(clean_fleet);
   for (i=0;i<total;++i) {
      wingman = iShip.Cast(List.GetNth(clean_fleet,i));
      tsWingComm.Save(wingman);
   }

   // Find all loose cargo pods near the player ships.
   // Save those pods.
   player_pods = List.FromSet(locate_free_pods());
   tsShipSave.SaveList(player_pods, "ts_ppods");
}
 


Restore()
{
   list player_fleet;
   hship player = iShip.FindPlayerShip();
   int player_id = Global.Int("ts_player_save");
   hship restored_ship;
   hship wingman;
   int i, total;
   hgroup combat_group = Group.Create();

   restored_ship = tsShipSave.Restore(player_id);

   if (none == player) {
      debug Debug.PrintString("tsPlayerSave.Restore no loadout ship\n");
      // The player did not launch from base.

      if (none == restored_ship) {
         debug Debug.PrintString("tsPlayerSave.Restore no saved player ship\n");
         // There is no prior stored ship.
         player = create_new_player();
      }else {
         // standard restore, player is saved ship.
         player = restored_ship;
      }

   }else if (none != restored_ship){
      Sim.PlaceAt(player, restored_ship);
      Sim.Destroy(restored_ship);
      iUtilities.RenameSim(player, Global.String("gt_player_ship_name"));
      // Attach custom properties to the loadout created ship.
      tsShip.ReadIniFile(player);
   }else {
      debug {
         Debug.PrintString("Error: tsPlayerSave.Restore There is no player starting ship\n");
         return;
      }
   }

   tsPlayerFleet.NewPlayerShip(player);

   // Player fleet goes in this combat group, when near the player.
   Group.AddSim(combat_group, player);

   player_fleet = tsShipSave.RestoreList("ts_pfleet");

   total = List.ItemCount(player_fleet);
   for (i=0;i<total;++i) {
      wingman = iShip.Cast(List.GetNth(player_fleet,i));
      tsPlayerFleet.SetupPlayerWingman(wingman);

   }

   tsShipSave.RestoreList("ts_ppods");
} 

// It is important not to turn the wingman watch code on until
// the final set of links is done. And that is not done until
// after all the wingman exist for a while.
// So this function should be called after the final linking.

RestoreOrders()
{
   hship wingman;
   hship player = iShip.FindPlayerShip();
   list player_fleet;
   int i, total;

   player_fleet = tsPlayerFleet.PlayerFleet();
   List.Remove(player_fleet, player);

   total = List.ItemCount(player_fleet);
   for (i=0;i<total;++i) {
      wingman = iShip.Cast(List.GetNth(player_fleet,i));
      tsWingComm.Restore(wingman);
      tsWingman.Restore(wingman);
   }
}



// Open the starting position INI and read out the player start ship and position.
// Create the player and place them at the start location. 
hship create_new_player()
{
   hinifile player_config = INIFile.Create("ini:/player_start");
   hship player;
   hisim start_location;
   string ship, system, station, name;

   debug Debug.PrintString("tsPlayerSave.create_new_player\n");

   ship = INIFile.String(player_config, "Player","start_ship","ini:/sims/ships/player/fast_attack_prefitted");
   system = INIFile.String(player_config, "Player","start_system","map:/geog/middle/emerald_sys");
   station = INIFile.String(player_config, "Player","start_station","Emerald STC");
   name = INIFile.String(player_config, "Player","start_name","Jon's Revenge");

   INIFile.Destroy(player_config);

   player = tsShip.Create(ship, Global.String("gt_player_ship_name"));
   Sim.SetCullable(player, false);
   start_location = iSim.FindByNameInSystem(station, system);
   Sim.PlaceNear(player, start_location, 20km);
   return player;
}


set locate_free_pods()
{
   list player_fleet, pod_list;
   set pod_set, new_pods, final_set;
   hship wingman;
   hship pod;
   int i, total_wingmen, total_pods;
   hfaction player_faction = tsFaction.PlayerFaction();

   // for each wingman, gather a list of pods that are nearby that
   // belong to the player faction.

   player_fleet = tsPlayerFleet.PlayerFleet();

   // process the set of pods, and remove all the docked ones.
   total_wingmen = List.ItemCount(player_fleet);
   for (i=0;i<total_wingmen;++i) {
      wingman = iShip.Cast(List.GetNth(player_fleet,i));

      new_pods = iSim.SimsInRadiusFromSet(iSim.SimsInRadiusOfFaction( wingman,
                                                                      Global.Float("gt_distance_wakeup"),
                                                                      player_faction),
                                          wingman,
                                          Global.Float("gt_distance_wakeup"),
                                          T_CargoPod);

      Set.Union(pod_set, new_pods);
   }

   // Sift the pods removing the docked and destroyed ones.
   pod_list = List.FromSet(pod_set);
   total_pods = List.ItemCount(pod_list);
   for (i=0;i<total_pods;++i) {
      pod = iShip.Cast(List.GetNth(pod_list, i));

      if (!Sim.IsDead(pod)){
         if (!iSim.IsDocked(pod)) {
            Set.Add(final_set, pod);
         }
      }
   }

   return final_set;
}

/*    
THIS MOD IS NOT MADE, DISTRIBUTED, OR SUPPORTED BY INFOGRAMES
OR PARTICLE SYSTEMS LTD. 

ELEMENTS TM & (C) INFOGRAMES AND PARTICLE SYSTEMS LTD.
*/
