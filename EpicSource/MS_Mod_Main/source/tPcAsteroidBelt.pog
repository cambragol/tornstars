//*******************************************************************************************/
//
// tPcAsteroidBelt
//
// This pog object implements mixed sim asteroid belts. The sims are randomly oriented
// and placed inside the field space.
// 
// 
//
// April 2004, Jon Freise
//******************************************************************************************/

package tPcAsteroidBelt;

uses    Sim,
        iShip,
        iSim,
        iLagrangePoint,
        Debug,
        Global,
        GUI,
        iGUI,
        iHUD,
        INIFile,
        Input,
        List,
        Object,
        String,
        Task,
        Text,
        Math,
        tsCull,
        tLCenter;


provides PogCreate,
         PogStart;


prototype setup_asteroid_belt(hisim center);

prototype hmapentity nearby_location(hisim center);


/*
   Test code just looks up a sim type from the properties section of 
   the class instance INI file. It creates that Sim and passes it 
   back.

*/
hsim PogCreate(string template_name, string object_name)
{

   hinifile object_file;
   string item_template, pog_class, start_function;
   hisim center;

   debug Debug.PrintString("tPcAsteroidBelt.PogCreate\n");


   object_file = INIFile.Create(template_name);

   if (none == object_file) {
      debug {
         Debug.PrintString("tPcAsteroidBelt.PogCreate, failed to find object file\n");
      }

      return none;
   }

   // Pull needed items out of template file. Create the object.
   // Attach them

   pog_class = INIFile.String(object_file, "PogClass","name","none");   

   INIFile.Destroy(object_file);


   ///********************
   // This block of code is class dependent. The rest must be done to adhere
   // to the pog object calling conventions.

   // Setup the center waypoint at proper location. Wait until placement is done to actually 
   // set the asteroids down around the center point.
   center = iSim.Cast(Sim.Create("ini:/sims/nav/waypoint", object_name));
   ///********************


   // Attach these properties to be able to refrence them at start time.
   Object.AddStringProperty(center, "gt_pog_object_class", pog_class);
   Object.AddStringProperty(center, "gt_pog_object_template", template_name);

      
   return center;
}


/*
   A simple behavior test.

*/
task PogStart(hisim pog_object)
{
   hship player;
   float distance;

   debug Debug.PrintString("tPcAsteroidBelt.PogStart\n");

   ///***************************************
   // This part of the start code is object dependent. The prior pieces must
   // be done to adhere to the pog class calling convention.

   // Asteroid belts are inert, but we could create some cool behaviors here
   // like belts that throw rocks at ships.

   setup_asteroid_belt(pog_object);

   ///***************************************
}

/*
[PogClass]
name=tPcAsteroidBelt

[Properties]

length=
width=
height=

; controls how tightly packed the asteroids are. Use a one
; for scattered fields (default) or higher numbers for
; tightly packed fields. Above 3 is not likely to make
; much difference.

density=1

List of field items, and the total number of each item type
item[0]=
number[0]=


*/



// Read the ini file, setup the object. 
setup_asteroid_belt(hisim center)
{
   hinifile control_file;
   hsim item;
   int count, total, i, item_count, pass, density;
   string item_template, template_file;
   float length, width, height;
   float length_pos, width_pos, height_pos, spin, angle;
   list cull_list;

   debug Debug.PrintString("PcAsteroidBelt.setup_asteroid_belt\n");

   template_file = Object.StringProperty(center, "gt_pog_object_template");
   control_file = INIFile.Create(template_file);

   if (none == control_file) {
      debug Debug.PrintString("ERROR tPcAsteroidBelt.setup_asteroid_belt invalid template_file\n");
      debug Debug.PrintString(template_file);
      debug Debug.PrintString("\n");
   }

   // Read in the belt control properties
   length = INIFile.Float(control_file, "Properties", "length", 10km);
   width = INIFile.Float(control_file, "Properties", "width", 10km);
   height = INIFile.Float(control_file, "Properties", "height", 10km);

   density = INIFile.Int(control_file, "Properties", "density", 1);

   if (density < 1) {
      density = 1;
   }else if (density > 10) {
      density = 10;
   }

   // Create the center sim
   List.AddTail(cull_list, center);

   // Read and place all the items.
   count = 0;
   while (INIFile.NumberedExists(control_file,"Properties","item",count)){

      item_template = INIFile.NumberedString(control_file,"Properties","item",count,"none");
      item_count = INIFile.NumberedInt(control_file,"Properties","number",count,0);

      if ("none" == item_template) {
         debug Debug.PrintString("ERROR tPcAsteroidBelt.setup_asteroid_belt invalid item_template\n");
         debug Debug.PrintString(template_file);
         debug Debug.PrintString("\n");
      }else {

         for (i=0;i<item_count;++i) {

            item = Sim.Create(item_template,String.FormatInt("tPcAsteroidBelt%d",i));

            if (none == item) {
               debug Debug.PrintString("ERROR tPcAsteroidBelt.setup_asteroid_belt invalid item\n");
            }

            length_pos = 0.0;
            width_pos = 0.0;
            height_pos = 0.0;

            // The more passes are made, the more tightly bunched the center 
            // position becomes.
            for (pass=0;pass<density;++pass) {
               length_pos += Math.Random(0.0, length);
               width_pos += Math.Random(0.0, width);
               height_pos += Math.Random(0.0, height);
            }

            length_pos = length_pos/density;
            width_pos = width_pos/density;
            height_pos = height_pos/density;

            length_pos -= (length/2.0);
            width_pos -= (width/2.0);
            height_pos -= (height/2.0);

            spin = Math.Random(0.0, 5.0);

            angle = Math.Random(0.0, 360.0);

            Sim.PlaceRelativeTo(item, center, width_pos, height_pos, length_pos);

            Sim.SetAngularVelocityEuler( item, spin, spin, spin );

            Sim.SetOrientationEuler( item,
                                     angle,
                                     angle,
                                     angle);

            List.AddTail(cull_list, item);
         }
      }
      ++count;
   }

   INIFile.Destroy(control_file);

   // put all the objects into the nearby list.
   tsCull.AddList(nearby_location(center), cull_list);

}


// Finds the closest location or station.
hmapentity nearby_location(hisim center)
{
   hlagrangepoint lpoint;
   hhabitat habitat;

   lpoint = iLagrangePoint.Nearest(iMapEntity.SystemLagrangePoints(), center);
   habitat = iHabitat.Nearest(iMapEntity.SystemHabitats(), center);

   if (Sim.DistanceBetween(habitat, center) < Sim.DistanceBetween(lpoint, center)) {
      return habitat;
   }

   return lpoint;
}


/*   

THIS MOD IS NOT MADE, DISTRIBUTED, OR SUPPORTED BY INFOGRAMES
OR PARTICLE SYSTEMS LTD. 

ELEMENTS TM & (C) INFOGRAMES AND PARTICLE SYSTEMS LTD.
*/
