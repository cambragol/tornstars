//*******************************************************************************************/
//
// tsLProduction.pog
//
// This package implements a Production object layer. This layer handles stations as profit
// earning properties. It also handles the profit side of operations.
//
//  
// 
//
// April 2004, Jon Freise
//******************************************************************************************/

package tsLProduction;

uses 
iShip, Global, Object, Sim, Input, iMapEntity, Math, iAI, 
Task, Debug, iFaction, iSim, iFactionScript, iComms, INIFile, iUtilities, iPilotSetup,
iConversation, iFormation, Group, Text, iEmail, State, iTrafficCreation, 
iRangeCheck,iRemotePilot, iRegion, iMissionTracker, iWingmen,
iCargoScript, iShipCreation, iHUD, iScriptedOrders, iStation, 
iStartSystem, iObjectives, iMultiplay, iCutsceneUtilities,
iDirector, iEscort, 
iLagrangePoint, iMusic, iGame, Stream,
   tsLRoot;



provides Init,
         Create,
         Save,
         Restore,
         SetActive,
         IsActive,
         GetType,
         SetType,
         GetFunds,
         SetFunds,
         GetLoans,
         SetLoans,
         GetLoss,
         SetLoss,
         FindById;



prototype add(hisim producer);


prototype SetActive(hisim producer, bool operational);

prototype bool IsActive(hisim producer);


prototype int GetType(hisim producer);

prototype SetType(hisim producer, int prod_type);


prototype int GetFunds(hisim producer);

prototype SetFunds(hisim producer, int funds);


prototype int GetLoans(hisim producer);

prototype SetLoans(hisim producer, int loans);


prototype int GetLoss(hisim producer);

prototype SetLoss(hisim producer, int loss);


prototype hisim FindById(int id);


// Session init this layer.
Init()
{
   list empty_list;

   Global.CreateList("gt_lproduction_all_list",GA_Write|GA_NoSave, empty_list);
}




// Pass in an object to become a production layer.
Create(hisim producer, int type, int funds, int loss, 
       int loans, bool active)
{
   hsim efaction;

   Object.AddHandleProperty(producer,"gtsLProductionCenter", none);
   Object.AddStringProperty(producer,"gtsLProductionFaction", "");
   Object.AddIntProperty(producer,"gtsLProductionType", 0);
   Object.AddIntProperty(producer,"gtsLProductionFunds", 0);
   Object.AddIntProperty(producer,"gtsLProductionLoss", 0);
   Object.AddIntProperty(producer,"gtsLProductionLoans", 0);
   Object.AddBoolProperty(producer,"gtsLProductionActive", true);


//   SetFactionName(producer, faction_name);
   SetType(producer, type);
   SetFunds(producer, funds);
   SetLoss(producer, loss);
   SetLoans(producer, loans);
   SetActive(producer, active);

   add(producer);

/*
   debug {
      Debug.PrintHandle(producer);
      Debug.PrintString(" LProduction.Create\n");
   }
   */
}





Save(hisim producer)
{
   int id = tsLRoot.GetId(producer);
   int prod_type, funds, loss, loans;
   bool active;
   string faction_name, station_name, system_name;
   

   prod_type = GetType(producer);
   loans = GetLoans(producer);
   loss = GetLoss(producer);
   funds = GetFunds(producer);
   active = IsActive(producer);

   Global.CreateInt(String.FormatInt("gt_lproduction%d_type",id),GA_Write, prod_type);
   Global.CreateInt(String.FormatInt("gt_lproduction%d_funds",id),GA_Write, funds);
   Global.CreateInt(String.FormatInt("gt_lproduction%d_loss",id),GA_Write, loss);
   Global.CreateInt(String.FormatInt("gt_lproduction%d_loans",id),GA_Write, loans);
   Global.CreateBool(String.FormatInt("gt_lproduction%d_active",id),GA_Write, active);
}




Restore(hisim producer)
{  
   int id = tsLRoot.GetId(producer);
   int prod_type, funds, loss, loans;
   bool active;


   prod_type = Global.Int(String.FormatInt("gt_lproduction%d_type",id));
   Global.Destroy(String.FormatInt("gt_lproduction%d_type",id));

   funds = Global.Int(String.FormatInt("gt_lproduction%d_funds",id));
   Global.Destroy(String.FormatInt("gt_lproduction%d_funds",id));

   loss = Global.Int(String.FormatInt("gt_lproduction%d_loss",id));
   Global.Destroy(String.FormatInt("gt_lproduction%d_loss",id));

   loans = Global.Int(String.FormatInt("gt_lproduction%d_loans",id));
   Global.Destroy(String.FormatInt("gt_lproduction%d_loans",id));

   active = Global.Bool(String.FormatInt("gt_lproduction%d_active",id));
   Global.Destroy(String.FormatInt("gt_lproduction%d_active",id));


   Create(producer, prod_type, funds, loss, loans, active);
}


add(hisim producer)
{
   list all_list;

   if (!Global.Exists("gt_lproduction_all_list")) {
      Global.CreateList("gt_lproduction_all_list",GA_Write|GA_NoSave, all_list);
   }
   atomic {
      all_list = Global.List("gt_lproduction_all_list");
      List.AddTail(all_list, producer); 
      Global.SetList("gt_lproduction_all_list", all_list);
   }
}

list All()
{
   return Global.List("gt_lproduction_all_list");
}

/*
hisim GetProductionFromCenter(hisim center)
{
   return iSim.Cast(Object.HandleProperty(center, "gtsLProductionObject"));
}


LinkToProduction(hisim center, hisim producer)
{
   Object.AddHandleProperty(center, "gtsLProductionObject", producer);
   Object.SetHandleProperty(center, "gtsLProductionObject", producer);
}
*/

hisim FindById(int id)
{
   int i, total;
   hisim producer;
   list producer_list = All();

   total = List.ItemCount(producer_list);
   for (i=0;i<total;++i) {
      producer = iSim.Cast(List.GetNth(producer_list, i));

      if (tsLRoot.GetId(producer) == id) {
         return producer;
      }
   }

   return none;
}





SetActive(hisim producer, bool operational)
{
   Object.SetBoolProperty(producer,"gtsLProductionActive", operational);
}

bool IsActive(hisim producer)
{
   return Object.BoolProperty(producer,"gtsLProductionActive");
}



int GetType(hisim producer)
{
   return Object.IntProperty(producer,"gtsLProductionType");
}

SetType(hisim producer, int prod_type)
{
   Object.SetIntProperty(producer,"gtsLProductionType", prod_type);
}



int GetFunds(hisim producer)
{
   return Object.IntProperty(producer,"gtsLProductionFunds");
}

SetFunds(hisim producer, int funds)
{
   Object.SetIntProperty(producer,"gtsLProductionFunds", funds);
}



int GetLoans(hisim producer)
{
   return Object.IntProperty(producer,"gtsLProductionLoans");
}

SetLoans(hisim producer, int loans)
{
   Object.SetIntProperty(producer,"gtsLProductionLoans", loans);
}



int GetLoss(hisim producer)
{
   return Object.IntProperty(producer,"gtsLProductionLoss");
}

SetLoss(hisim producer, int loss)
{
   Object.SetIntProperty(producer,"gtsLProductionLoss", loss);
}


/*  
THIS MOD IS NOT MADE, DISTRIBUTED, OR SUPPORTED BY INFOGRAMES
OR PARTICLE SYSTEMS LTD. 

ELEMENTS TM & (C) INFOGRAMES AND PARTICLE SYSTEMS LTD.
*/
