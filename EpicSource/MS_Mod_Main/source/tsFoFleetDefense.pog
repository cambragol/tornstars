/*******************************************************************************************/
//
// tsFoFleetDefense.pog
// 
// Torn Stars Fleet Operation Defense Fleet
// 
// A Defense Fleet moves around the system protecting operating stations
// of friendly or better faction standing. These fleets will (eventually) respond
// to station distress calls.

// For now they just patrol.
// Fleet defense will fight with any dislike or lower faction.
// It will not retreat until badly damaged (waits for help). 
// If badly damaged, it moves home for repair.
// When not fighting, it runs a patrol loop near its home base.
//
// April 2006, Jon Freise
//******************************************************************************************/

package tsFoFleetDefense;


uses  Sim,
iSim,
Debug,
Global,
iGame,
iFaction,
INIFile,
Input,
List,
Object,
String,
Task,
State,
Text,
Math,
iShip,
iHabitat,
iMapEntity,
   iLagrangePoint,
   iCargo,
   iCargoScript,
   iHUD,
   iComms,
   tStationEnum,
   tStation,
   tsFaction,
   tTime,
   tUnderOp,
   tLRoot,
   tLCenter,
   tLProduction,
   tLFleet,
   tStationFilter,
   tEconUtil,
   tShipName,
   tEShipCreation,
   tsFleetOpCombat,
   tsDebug;




provides New,
         Save,
         Restore,
         Update;


prototype hhabitat find_patrol_station(hisim operation, hmapentity center, string system_name, float distance);

prototype hlagrangepoint find_lpoint(hisim operation, hmapentity center, string system_name, float distance);

//*******************************************************************************************/         
//
//*******************************************************************************************/

New(hisim operation)
{
   string ship_name, ship_template, op_type, ship_class;
   hfaction faction;
   hinifile op_data = INIFile.Create("ini:/metagame_production");
   int fleets;

   if (none == op_data) {
      debug Debug.PrintString("tsFoFleetDefense.New error cannot open metagame_production.ini\n");
      return;
   }

   op_type = tEconUtil.StationIntToString(tLProduction.GetType(operation));

   fleets = INIFile.Int(op_data, op_type, "max_fleets", 600);

   ship_class = INIFile.String(op_data, op_type, "ship_class", "EST_CombatHeavy");

   INIFile.Destroy(op_data);


   faction = iSim.Faction(operation);

   // We pick an underworld name for ourselves. 
   // using a large number means we get a random name.
   ship_name = tShipName.ShipName("military", 10000);

   // We pick a heavy warship for center vessel.
   ship_template = tEShipCreation.GetShip(faction, tEShipCreation.String2ShipType(ship_class));

   tUnderOp.SetName(operation, ship_name);
   tUnderOp.SetShipTemplate(operation, ship_template);

   tLFleet.SetFleets(operation, fleets);
   tLFleet.SetMaxFleets(operation, fleets);
}



Save(hisim operation)
{

}



Restore(hisim operation)
{
   
}



Update(hisim operation)
{
   hmapentity center = tLCenter.GetCenter(operation);
   hhabitat target_station, supporter_station;
   hlagrangepoint target_lpoint;
   bool hostiles, wounded, dying, home, out_gunned, need_patrol;
   bool move_home, stay_still, move_safe;
   list local_operations;
   hisim visitor;
   hfaction faction, visitor_faction;
   int fleets, hostile_fleets, total_hostiles;
   int i, total;
   int current_day = tTime.GetDay();
   int patrol_day;
   int update_delay = 1;

   //tsDebug.PrintString("tsfofleetdefense_debug","tsFoFleetDefense.Update\n");

   
   faction = iSim.Faction(operation);

   // Here we look up what other operations are nearby. 
   // Any combat between this and other operations happens here.

   local_operations = tUnderOp.StationOperations(center);
   List.Remove(local_operations, operation);
   total = List.ItemCount(local_operations);

   hostiles = false;
   total_hostiles = 0;

   for (i=0;i<total;++i) {
      visitor = iSim.Cast(List.GetNth(local_operations,i));
      visitor_faction = iSim.Faction(visitor);

      if (iFaction.Feeling(visitor_faction, faction) < -0.2) {
         // There are hostile forces at this station
         fleets = tLFleet.Fleets(operation);
         hostile_fleets = tLFleet.Fleets(operation);

         if (fleets > hostile_fleets) {
            // We have the advantage, pound them.
            tsFleetOpCombat.Offense(center, operation, visitor);
         }else {
            // We are outnumbered, so switch to evasive tactics.
            tsFleetOpCombat.Defense(center, operation, visitor);
         }
         // Remember this total, so we can choose to flee later.
         total_hostiles += hostile_fleets;
         hostiles = true;
      }
   }

   fleets = tLFleet.Fleets(operation);

   if (fleets == 0) {
      // Ouch, we died.
      tsDebug.PrintString("tsfofleetdefense_debug",
                          String.FormatStrStr("tsFoFleetDefense %s died\n%s",
                                              Text.Field(tUnderOp.Name(operation),FT_Text),
                                              ""));


      tUnderOp.DestroyOp(operation);
      return;
   }

   // Dying when down to quarter damage (leave combat)
   if (fleets < (tLFleet.MaxFleets(operation)/4)) {
      dying = true;
   }else {
      dying = false;
   }

   // Wounded when down to quarter damage (leave combat)
   if (fleets < tLFleet.MaxFleets(operation)) {
      wounded = true;
   }else {
      wounded = false;
   }


   supporter_station = tUnderOp.Supporter(operation);

   // Are we home?
   if (center == iMapEntity.Cast(supporter_station)) {
      home = true;
   }else {
      home = false;
   }

   move_home = false; // Move to home base
   move_safe = false; // Move to safe location (for repair)
   stay_still = false;

   // 
   if (dying && !home) {
      move_home = true;
   }else if (wounded && home) {
      // Stay right here.
      stay_still = true;
   }

   // Repair some fleets. Double rate if at home.
   if (home) {
      tLFleet.ChangeFleets(operation, 20 * update_delay);
   }else {
      tLFleet.ChangeFleets(operation, 10 * update_delay);
   }

   if (move_home) {

      tLCenter.SetCenter(operation, supporter_station);

      tsDebug.PrintString("tsfofleetdefense_debug",
                          String.FormatStrStr("tsFoFleetDefense %s moving home\n%s",
                                              Text.Field(tUnderOp.Name(operation),FT_Text),
                                              ""));
      tsDebug.PrintHandle("tsfofleetdefense_debug",supporter_station);
      tsDebug.PrintString("tsfofleetdefense_debug"," supporter station\n");

   }else if (!stay_still) {

      // Move every week, patrolling near our patrol station.
      patrol_day = tUnderOp.EventTimer(operation);
      if (patrol_day == 0) {
         patrol_day = Math.RandomInt(1,7);
         tUnderOp.SetEventTimer(operation, patrol_day);
      }

      if (current_day > patrol_day) {

         // Set next move date.
         tUnderOp.SetEventTimer(operation, current_day + 7);

         // Patrol stations near our own, avoiding dislike or lower stations.
         target_lpoint = find_lpoint(operation, center, iSim.WorldName(center), 1500000km);

         // Patrol stations near our own, avoiding dislike or lower stations.
         target_station = find_patrol_station(operation, center, iSim.WorldName(center), 500000km);

         if (none != target_lpoint) {
            tLCenter.SetCenter(operation, target_lpoint);

            tsDebug.PrintString("tsfofleetdefense_debug",
                          String.FormatStrStr("tsFoFleetDefense %s new lpoint\n%s",
                                              Text.Field(tUnderOp.Name(operation),FT_Text),
                                              ""));
            tsDebug.PrintHandle("tsfofleetdefense_debug",target_lpoint);
            tsDebug.PrintString("tsfofleetdefense_debug"," new station\n");

         }else if (none != target_station) {
            tLCenter.SetCenter(operation, target_station);

            tsDebug.PrintString("tsfofleetdefense_debug",
                          String.FormatStrStr("tsFoFleetDefense %s new station\n%s",
                                              Text.Field(tUnderOp.Name(operation),FT_Text),
                                              ""));
            tsDebug.PrintHandle("tsfofleetdefense_debug",target_station);
            tsDebug.PrintString("tsfofleetdefense_debug"," new station\n");
         }
      }
   }else {
      tsDebug.PrintString("tsfofleetdefense_debug",
                          String.FormatStrStr("tsFoFleetDefense %s stay still\n%s",
                                              Text.Field(tUnderOp.Name(operation),FT_Text),
                                              ""));
   }

   // Set next wakeup date.
   tUnderOp.SetWakeTimer(operation, current_day + update_delay);
}




// patrol the neutral or better stations at close distance to thier home station.
hhabitat find_patrol_station(hisim operation, hmapentity center, string system_name, float distance)
{
   set habitats;

   // Search system stations and find a normal status station where we can live.
   habitats = tStationFilter.OnStatus(iSim.SimsInRadius( center,
                                                         distance,
                                                         T_Station),
                                      ESS_Normal);
                                     
   Set.Remove(habitats, center);
   // We can hang out at neutral or better stations. We avoid people trying to
   // kill us.
   habitats = tStationFilter.OnGreaterFeeling(habitats,
                                              iSim.Faction(operation),
                                              tsFaction.Type2LowerLevel(FT_Neutral));

   return iHabitat.Random(habitats);
}



// Return an Lpoint that is on a standard route and has no other customs 
// operations on it.
hlagrangepoint find_lpoint(hisim operation, hmapentity center, string system_name, float distance)
{
   set lpoints, final_set;
   hlagrangepoint lpoint;
   list lpoint_ops;
   hisim lpoint_op;
   int i, total;
   bool taken;

   lpoints = iSim.SimsInRadius(center, distance, T_LagrangePoint);

   // If already at an lpoint, remove.
   Set.Remove(lpoints, center);

   while (!Set.IsEmpty(lpoints)) {
      lpoint = iLagrangePoint.Cast(Set.FirstElement(lpoints));
      Set.Remove(lpoints, lpoint);

      if (Object.BoolProperty(lpoint,"standard_route")) {
         lpoint_ops = tUnderOp.StationOperations(iSim.Cast(lpoint));

         taken = false;
         total = List.ItemCount(lpoint_ops);
         for (i=0;i<total;++i) {
            lpoint_op = iSim.Cast(List.GetNth(lpoint_ops, i));

            if (ept_FleetDefenseOp == tLProduction.GetType(lpoint_op)){
               // Fleet defense is already there.
               taken = true;
            }
         }

         // If the lpoint is not taken, we grab it.
         if (!taken) {
            Set.Add(final_set, lpoint);
         }
      }
   }

   if (Set.IsEmpty(final_set)) {
      return none;
   }

   return iLagrangePoint.Cast(Set.FirstElement(final_set));
}


/*  
THIS MOD IS NOT MADE, DISTRIBUTED, OR SUPPORTED BY INFOGRAMES
OR PARTICLE SYSTEMS LTD. 

ELEMENTS TM & (C) INFOGRAMES AND PARTICLE SYSTEMS LTD.
*/