//*******************************************************************************************/
//
// tPcWeaponSeller
//
// This pog object implements weapons sellers that will sell player ship systems
// 
//
// June 2005, Jon Freise
//******************************************************************************************/

package tPcWeaponSeller;

uses    Sim,
        iShip,
        iSim,
        Debug,
        Global,
        GUI,
        iGUI,
        iHUD,
        INIFile,
        Input,
        List,
        Object,
        String,
        Task,
        Text,
        Math,
        iShipCreation,
        iComms,
        iConversation,
        iAI,

        tPcOwner,
        tEpicComms,
        tEpicFleet,
        tLRoot,
        tLTrade,
        tEFaction,
        tETradeBuy,
        tEpicMoney,
        tShipName,
        tsCull;


provides PogCreate,
         PogStart,
         Comms,
         CriminalComms;



prototype setup_trade_ship(hship ship);

prototype string type2comms(string seller_type);



hsim PogCreate(string template_name, string object_name)
{

   hinifile object_file;
   string name;
   string item_template, pog_class, start_function;
   hsim item;

   debug Debug.PrintString("tPcWeaponSeller.PogCreate\n");


   object_file = INIFile.Create(template_name);

   if (none == object_file) {
      debug {
         Debug.PrintString("tPcWeaponSeller.PogCreate, failed to find object file\n");
      }

      return none;
   }

   // Pull needed items out of template file. Create the object.
   // Attach them
   pog_class = INIFile.String(object_file, "PogClass","name","none");


   ///********************
   // This block of code is class dependent. The rest must be done to adhere
   // to the pog object calling conventions.

   name = tShipName.ShipName( "general", Math.RandomInt(0, 343));

   item_template = INIFile.String(object_file, "Properties","template","none");

   INIFile.Destroy(object_file);



   item = Sim.Create(item_template, name);

   if (none == item) {
      debug {
         Debug.PrintString("tPcWeaponSeller.PogCreate, bad object template\n");
      }
      return none;
   }
   ///********************


   // All 
   Object.AddStringProperty(item, "gt_pog_object_class", pog_class);
   Object.AddStringProperty(item, "gt_pog_object_template", template_name);

   return item;
}


/*
This function is called after the ship has been placed. 

*/
task PogStart(hsim pog_object)
{
   debug Debug.PrintString("tPcWeaponSeller: starting\n");

   ///***************************************
   // This part of the start code is object dependent. The prior pieces must
   // be done to adhere to the pog class calling convention.

   setup_trade_ship(iShip.Cast(pog_object));

   ///***************************************
}

/*
; 
; Example INI file for setting up a hired ship.
; One of these template files should be created
; for each kind of ship that can be hired.
; Freighter, warship, etc.

[PogClass]
name=tPcWeaponSeller

[Properties]

template=ini:/sims/ships/utility/freighter

// This is the file that specifies the cargo categories that this 
// weapon seller will provide.

trade_file="ini:/weapon_cargo"



// This is the entry used in the cargo trade_file to use 
// for this specific weapon seller. Look in the file for
// valid entry names.

seller_type="Civilian"



;There are two types of communications from this pog object
; legal - used for legal weapons and equipment dealers
; criminal - used for illegal weapons and equipment dealers

comm_type=legal

*/



// Read the ini file, setup the object. 
setup_trade_ship(hship ship)
{
   hinifile control_file;
   string template_file_name, comm_function;
   string seller_file, seller_type, station_string, comms;
   float faction_standing;
   hfaction faction;
   hsim owner;
   hhabitat station;

   template_file_name = Object.StringProperty(ship, "gt_pog_object_template");
   control_file = INIFile.Create(template_file_name);

   if (none == control_file) {
      debug Debug.PrintString("ERROR tPcWeaponSeller. invalid template_file\n");
      debug Debug.PrintString(template_file_name);
      debug Debug.PrintString("\n");
   }

   // Read in the belt control properties
   seller_file = INIFile.String(control_file, "Properties", "trade_file", "ini:/weapon_cargo");
   seller_type = INIFile.String(control_file, "Properties", "seller_type", "Civilian");

   comms = INIFile.String(control_file, "Properties", "comm_type", "legal");

   INIFile.Destroy(control_file);

   // Setup the later comms task.
   tEpicComms.AddComms(ship, type2comms(comms));
   tEpicComms.DisplayComms(ship, true);


   // Find the owner ship.
   station = iHabitat.Nearest(iMapEntity.SystemHabitats(),ship);

   owner = Sim.Cast(tPcOwner.Owner(ship));
   faction = iSim.Faction(iSim.Cast(owner));

   iSim.SetFaction(iSim.Cast(ship), faction);


   // Setup the trade properties for the seller.
   tLRoot.SetId(ship, tLRoot.GetId(owner));
   tLTrade.Create(ship, seller_file, seller_type);

   tsCull.AddSim(iSim.Cast(station), ship);

   /*
   debug{
      Debug.PrintString("seller file: ");
      Debug.PrintString(seller_file);
      Debug.PrintString("\n");

      Debug.PrintString("seller type: ");
      Debug.PrintString(seller_type);
      Debug.PrintString("\n");

   }
   */
}


task Comms()
{
   hship ship;
   string ask_string;
   bool start_deal;
   hfaction player_faction, source_faction;

   ship = iShip.Cast(tEpicComms.CommsSource());

   // Turn off the comms display, now that the player knows he can talk to this ship.
   tEpicComms.DisplayComms(ship, false);

        
   // Start the conversation.
    iConversation.Begin();

    // pcws_legal_player_agrees, "Yes, Lets Deal"
    iConversation.AddResponse(
       "pcws_player_agrees",
       "pcws_player_agrees");       

    // pcws_legal_player_refuses, "No Thanks"
    iConversation.AddResponse(
       "pcws_player_refuses",
       "pcws_player_refuses");


   // psws_legal_ask_player, "We supply the finest in weapon systems. Care to look?"
    switch ( iConversation.Ask( ship, "", "pcws_legal_ask_player" ) )
    {
    case 1 :
       player_faction = tEFaction.PlayerFaction();
       source_faction = iSim.Faction(iSim.Cast(ship));
       start_deal = true;

       break;

    case 2 :
       // Player said no.
       // pcws_legal_player_said_no, "This is a dangerous place. You will be back." 
       iConversation.Say(ship,"", "pcws_legal_player_said_no");
       start_deal = false;
       break;

    default :
       // Player selected "Nothing"
       // pcws_legal_player_said_nothing, "The quiet type."
       iConversation.Say(ship,"", "pcws_legal_player_said_nothing");
       start_deal = false;
    }

    // Finish the conversation.
    iConversation.End();

    if (start_deal) {
       tETradeBuy.TradeObjectStart(ship);
    }

}

task CriminalComms()
{
   hship ship;
   string ask_string;
   bool start_deal;
   hfaction player_faction, source_faction;

   ship = iShip.Cast(tEpicComms.CommsSource());

   // Turn off the comms display, now that the player knows he can talk to this ship.
   tEpicComms.DisplayComms(ship, false);



        // Start the conversation.
    iConversation.Begin();

    iConversation.AddResponse(
       "pcws_player_agrees",
       "pcws_player_agrees");

    // Response 2
    iConversation.AddResponse(
       "pcws_player_refuses",
       "pcws_player_refuses");

    // Ask the player a question and switch on their response.

    // pcws_crime_player_ask, "Can we hook you up with some 'restricted' equipment?"
    switch ( iConversation.Ask( ship, "", "pcws_crime_player_ask") )
    {
    case 1 :
       player_faction = tEFaction.PlayerFaction();
       source_faction = iSim.Faction(iSim.Cast(ship));

       start_deal = true;
       break;

    case 2 :
       // Player said no.
       // pcws_crime_refuse_reply, "Too bad. We have top of the line stuff. Real Navy."
       iConversation.Say(ship,"", "pcws_crime_refuse_reply" );
       start_deal = false;
       break;

    default :
       // pcws_crime_nothing_reply, "Suit yourself."
       start_deal = false;
       iConversation.Say(ship,"", "pcws_crime_nothing_reply" );
    }

    // Finish the conversation.
    iConversation.End();

    if (start_deal) {
       tETradeBuy.TradeObjectStart(ship);
    }

}

// Turns the specified two types of communications into
// the proper comm task call name.
string type2comms(string seller_type)
{
    if ("legal" == seller_type) {
        return "tPcWeaponSeller.Comms";
    }else if ("legal" == seller_type) {
        return "tPcWeaponSeller.CriminalComms";
    }

    return "tPcWeaponSeller.Comms";
}

/*   

THIS MOD IS NOT MADE, DISTRIBUTED, OR SUPPORTED BY INFOGRAMES
OR PARTICLE SYSTEMS LTD. 

ELEMENTS TM & (C) INFOGRAMES AND PARTICLE SYSTEMS LTD.
*/
