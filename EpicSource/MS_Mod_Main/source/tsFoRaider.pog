/*******************************************************************************************/
//
// tsFoRaider.pog
// 
// Torn Stars Fleet Operation Raiders
// 
// Raiders are another profit earning pirate fleet. They make money by raiding cargo shipping
// of factions that are already dislike or hostile to the pirates. (protection preys on neutral 
// or better).
//
// Raiders move onto production stations of dislike or worse standing.
// They will raid cargo there until chased away.
// Raiders will leave if they are outnumbered.
// They will leave if half damaged.
// 
// Damaged raiders will go to neutral or better to heal.
// Badly damaged raiders will go home to heal. (double rate).
//
// 
// March 2006
//******************************************************************************************/

package tsFoRaider;


uses  Sim,
iSim,
Debug,
Global,
iGame,
iFaction,
INIFile,
Input,
List,
Object,
String,
Task,
State,
Text,
Math,
iShip,
iHabitat,
iMapEntity,
   iCargo,
   iCargoScript,
   iHUD,
   iComms,
   tsStationEnum,
   tsStation,
   tsFaction,
   tsTime,
   tsFleetOp,
   tsLRoot,
   tsLCenter,
   tsLProduction,
   tsLFleet,
   tsStationFilter,
   tsEconUtil,
   tsShipName,
   tsShipCreationEnum,
tsShipCreation,
   tsFleetOpCombat,
   tsDebug;




provides New,
         Save,
         Restore,
         Update;


prototype hhabitat find_raiding_station(hisim operation, hmapentity center, string system_name);

prototype hhabitat find_safe_station(hisim operation, hmapentity center, string system_name);

prototype bool is_production(hmapentity center);



//*******************************************************************************************/         
//
//*******************************************************************************************/

New(hisim operation)
{
   string ship_name, ship_template, op_type, ship_class;
   hfaction faction;
   hinifile op_data = INIFile.Create("ini:/metagame_production");
   int fleets;

   if (none == op_data) {
      debug Debug.PrintString("tsFoRaider.New error cannot open metagame_production.ini\n");
      return;
   }

   op_type = tsEconUtil.StationIntToString(tsLProduction.GetType(operation));

   fleets = INIFile.Int(op_data, op_type, "max_fleets", 600);

   ship_class = INIFile.String(op_data, op_type, "ship_class", "EST_CombatHeavy");

   INIFile.Destroy(op_data);

   faction = iSim.Faction(operation);

   // We pick an underworld name for ourselves. 
   // using a large number means we get a random name.
   ship_name = tsShipName.ShipName("underworld", 10000);

   // We pick a heavy warship for center vessel.
   ship_template = tsShipCreation.GetShip(faction, tsShipCreation.String2ShipType(ship_class));

   tsFleetOp.SetName(operation, ship_name);
   tsFleetOp.SetShipTemplate(operation, ship_template);

   tsLFleet.SetMaxFleets(operation, fleets);
   tsLFleet.SetFleets(operation, fleets);
}



Save(hisim operation)
{

}



Restore(hisim operation)
{
   
}


/*
   
   
*/

Update(hisim operation)
{
   hmapentity center = tsLCenter.GetCenter(operation);
   hhabitat target_station, supporter_station;
   bool hostiles, wounded, dying, home, out_gunned, need_patrol;
   bool move_home, stay_still, move_safe, pick_raid;
   list local_operations;
   hisim visitor;
   hfaction faction, visitor_faction, local_faction;
   int fleets, hostile_fleets, total_hostiles;
   int i, total;
   int current_day = tsTime.GetDay();
   int update_delay = 1;

   //tsDebug.PrintString("tsforaider_debug","tsFoRaider.Update\n");

   
   faction = iSim.Faction(operation);

   // Here we look up what other operations are nearby. 
   // Any combat between this and other operations happens here.

   local_operations = tsFleetOp.StationOperations(center);
   List.Remove(local_operations, operation);
   total = List.ItemCount(local_operations);

   hostiles = false;
   total_hostiles = 0;

   for (i=0;i<total;++i) {
      visitor = iSim.Cast(List.GetNth(local_operations,i));
      visitor_faction = iSim.Faction(visitor);

      if (iFaction.Feeling(visitor_faction, faction) < -0.2) {
         // There are hostile forces at this station
         fleets = tsLFleet.Fleets(operation);
         hostile_fleets = tsLFleet.Fleets(operation);

         if (fleets > hostile_fleets) {
            // We have the advantage, pound them.
            tsFleetOpCombat.Offense(center, operation, visitor);
         }else {
            // We are outnumbered, so switch to evasive tactics.
            tsFleetOpCombat.Defense(center, operation, visitor);
         }
         // Remember this total, so we can choose to flee later.
         total_hostiles += hostile_fleets;
         hostiles = true;
      }
   }

   fleets = tsLFleet.Fleets(operation);

   if (fleets == 0) {
      // Ouch, we died.
      tsDebug.PrintString("tsforaider_debug",
                          String.FormatStrStr("tsFoRaider %s lost fleets and died\n%s",
                                              tsFleetOp.Name(operation),
                                              ""));

      tsFleetOp.DestroyOp(operation);
      return;
   }

   // Check if we are outnumbered.
   if (fleets < total_hostiles) {
      out_gunned = true;
   }else {
      out_gunned = false;
   }

   // Wounded when half damaged (leave combat)
   if (fleets < (tsLFleet.MaxFleets(operation)/2)) {
      wounded = true;
   }else {
      wounded = false;
   }

   // Dying when down to 1/4 fleets (flee home)
   if (fleets < (tsLFleet.MaxFleets(operation)/4)) {
      dying = true;
   }else {
      dying = false;
   }

   supporter_station = tsFleetOp.Supporter(operation);

   // Are we home?
   if (center == iMapEntity.Cast(supporter_station)) {
      home = true;
   }else {
      home = false;
   }

   move_home = false; // Move to home base
   move_safe = false; // Move to safe location (for repair)
   stay_still = false;

   // 
   if (dying && !home) {
      move_home = true;
   }else if (dying && home) {
      // Stay right here.
      stay_still = true;
   }else if (hostiles && wounded) {
      // Find another station.
      move_safe = true;
   }else if (out_gunned) {
      // Find another station.
      move_safe = true;
   }else if (wounded) {
      // No hostiles, so stay here to heal.
      stay_still = true;
   }

   // Repair some fleets. Double rate if at home.
   if (home) {
      tsLFleet.ChangeFleets(operation, 20 * update_delay);
   }else {
      tsLFleet.ChangeFleets(operation, 10 * update_delay);
   }

   if (move_home) {

      tsLCenter.SetCenter(operation, supporter_station);
      tsFleetOpCombat.SetDistressFlags(supporter_station);

      tsDebug.PrintString("tsforaider_debug",
                          String.FormatStrStr("tsFoRaider %s moving home\n%s",
                                              tsFleetOp.Name(operation),
                                              ""));
      tsDebug.PrintHandle("tsforaider_debug",supporter_station);
      tsDebug.PrintString("tsforaider_debug"," supporter station\n");

   }else if (move_safe) {


      target_station = find_safe_station(operation, center, iSim.WorldName(center));

      if (none != target_station) {
         // To move an operation, we just move the center.
         tsLCenter.SetCenter(operation, target_station);
         tsFleetOpCombat.SetDistressFlags(target_station);
      }else {
         // If there are no other stations, move home.
         tsLCenter.SetCenter(operation, supporter_station);
         tsFleetOpCombat.SetDistressFlags(supporter_station);
      }
      tsDebug.PrintString("tsforaider_debug",
                          String.FormatStrStr("tsFoRaider %s moving home\n%s",
                                              tsFleetOp.Name(operation),
                                              ""));
      tsDebug.PrintHandle("tsforaider_debug",target_station);
      tsDebug.PrintString("tsforaider_debug"," new station\n");

   }else if (!stay_still) {
      // Ok, nothing is forcing the raider to move. So we now look into if
      // the raider needs to choose a hunting ground.
      // We defer these tests because they tend to be expensive to calculate.
      pick_raid = false;

      if (T_Station != iSim.Type(center)) {
         // We are not at a station, so pick a station to raid.
         pick_raid = true;
      }else if (is_production(center)) {
         // We are want to be at a dislike or lower production station.
         local_faction = iSim.Faction(center);
         if (iFaction.Feeling(local_faction, faction) > -0.2) {
            pick_raid = true;
         }
      }else {
         // The station is not a production station, pick one that is.
         pick_raid = true;
      }

      if (pick_raid) {

         target_station = find_raiding_station(operation, center, iSim.WorldName(center));

         if (none != target_station) {
            tsLCenter.SetCenter(operation, target_station);
            tsFleetOpCombat.SetDistressFlags(target_station);

            tsDebug.PrintString("tsforaider_debug",
                          String.FormatStrStr("tsFoRaider %s new raid station\n%s",
                                              tsFleetOp.Name(operation),
                                              ""));
            tsDebug.PrintHandle("tsforaider_debug",target_station);
            tsDebug.PrintString("tsforaider_debug"," new station\n");
         }
      }
   }else {
      tsDebug.PrintString("tsforaider_debug","tsFoRaider stay still\n");
   }

   // Set next wakeup date.
   tsFleetOp.SetWakeTimer(operation, current_day + update_delay);
}





// Return true is this location is an operating production station.
bool is_production(hmapentity center)
{
   if (T_Station == iSim.Type(center)) {
      if (ESS_Normal == tsStation.Status(iHabitat.Cast(center))) {
         if ( (ESC_Mine|ESC_Process|ESC_Manufacture) & tsStation.Category(iHabitat.Cast(center))){
            return true;
         }
      }
   }
   return false;
}


// Raiders haunt dislike or hostile production stations and raid them for cargo shipments.
hhabitat find_raiding_station(hisim operation, hmapentity center, string system_name)
{
   set habitats;

   habitats = tsStationFilter.OnStatusAndCategory(iMapEntity.SystemHabitatsInSystem(system_name),
                                                 ESS_Normal,
                                                 (ESC_Mine|ESC_Process|ESC_Manufacture));

   Set.Remove(habitats, center);

   habitats = tsStationFilter.OnLowerFeeling(habitats,
                                              iSim.Faction(operation),
                                              tsFaction.Type2LowerLevel(FT_Neutral));

   return iHabitat.Random(habitats);
}






// We can hang out at neutral or better stations. We avoid people trying to
// kill us. We are glad to make use of empty stations. 
// Good for when the fleet is wounded.
hhabitat find_safe_station(hisim operation, hmapentity center, string system_name)
{
   set habitats;


   habitats = tsStationFilter.OnGreaterFeeling(iMapEntity.SystemHabitatsInSystem(system_name),
                                              iSim.Faction(operation),
                                              tsFaction.Type2LowerLevel(FT_Neutral));
   Set.Remove(habitats, center);

   return iHabitat.Random(habitats);
}

/*  
THIS MOD IS NOT MADE, DISTRIBUTED, OR SUPPORTED BY INFOGRAMES
OR PARTICLE SYSTEMS LTD. 

ELEMENTS TM & (C) INFOGRAMES AND PARTICLE SYSTEMS LTD.
*/